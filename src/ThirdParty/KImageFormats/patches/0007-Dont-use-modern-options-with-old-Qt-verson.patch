From 58a1ecf5bbc6e14fcc422c3064da613f1a1a9314 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Wed, 3 Jan 2024 08:33:45 +0700
Subject: [PATCH 7/7] Dont use modern options with old Qt verson

---
 src/imageformats/ani.cpp  |  4 ++++
 src/imageformats/ani_p.h  | 16 +++++++++++++++
 src/imageformats/exr.cpp  | 38 ++++++++++++++++++++++++++++++++++++
 src/imageformats/hdr.cpp  | 27 +++++++++++++++++++++++++-
 src/imageformats/jxl.cpp  | 33 +++++++++++++++++++++++++++++++
 src/imageformats/jxl_p.h  |  8 ++++++++
 src/imageformats/jxr.cpp  | 17 ++++++++++++++--
 src/imageformats/pfm.cpp  | 26 +++++++++++++++++++++++++
 src/imageformats/psd.cpp  | 40 ++++++++++++++++++++++++++++++++++++++
 src/imageformats/pxr.cpp  |  2 +-
 src/imageformats/ras.cpp  | 17 +++++++++++++++-
 src/imageformats/rgb.cpp  | 24 +++++++++++++++++++++++
 src/imageformats/util_p.h |  7 +++++++
 src/imageformats/xcf.cpp  | 41 +++++++++++++++++++++++++++++++++++++--
 14 files changed, 293 insertions(+), 7 deletions(-)

diff --git a/src/imageformats/ani.cpp b/src/imageformats/ani.cpp
index 5fa0d46..4c13315 100644
--- a/src/imageformats/ani.cpp
+++ b/src/imageformats/ani.cpp
@@ -383,7 +383,11 @@ bool ANIHandler::ensureScanned() const
 
             // TODO should we check that the number of rate entries matches nSteps?
             auto *dataPtr = data.data();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
             QList<int> list;
+#else
+            QVector<int> list;
+#endif
             for (int i = 0; i < data.size(); i += sizeof(quint32_le)) {
                 const auto entry = *(reinterpret_cast<const quint32_le *>(dataPtr + i));
                 list.append(entry);
diff --git a/src/imageformats/ani_p.h b/src/imageformats/ani_p.h
index bfce9ef..7b8435b 100644
--- a/src/imageformats/ani_p.h
+++ b/src/imageformats/ani_p.h
@@ -10,6 +10,10 @@
 #include <QImageIOPlugin>
 #include <QSize>
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#include <QVector>
+#endif
+
 class ANIHandler : public QImageIOHandler
 {
 public:
@@ -41,14 +45,26 @@ private:
     int m_frameCount = 0; // "physical" frames
     int m_imageCount = 0; // logical images
     // Stores a custom sequence of images
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<int> m_imageSequence;
+#else
+    QVector<int> m_imageSequence;
+#endif
     // and the corresponding offsets where they are
     // since we can't read the image data sequentally in this case then
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<qint64> m_frameOffsets;
+#else
+    QVector<qint64> m_frameOffsets;
+#endif
     qint64 m_firstFrameOffset = 0;
 
     int m_displayRate = 0;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<int> m_displayRates;
+#else
+    QVector<int> m_displayRates;
+#endif
 
     QString m_name;
     QString m_artist;
diff --git a/src/imageformats/exr.cpp b/src/imageformats/exr.cpp
index 0885c92..6338a4d 100644
--- a/src/imageformats/exr.cpp
+++ b/src/imageformats/exr.cpp
@@ -81,7 +81,10 @@
 #include <QImageIOPlugin>
 #include <QLocale>
 #include <QThread>
+
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
 #include <QTimeZone>
+#endif
 
 class K_IStream : public Imf::IStream
 {
@@ -216,7 +219,11 @@ bool EXRHandler::canRead() const
 static QImage::Format imageFormat(const Imf::RgbaInputFile &file)
 {
     auto isRgba = file.channels() & Imf::RgbaChannels::WRITE_A;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
     return (isRgba ? QImage::Format_RGBA16FPx4 : QImage::Format_RGBX16FPx4);
+#else
+    return (isRgba ? QImage::Format_RGBA64 : QImage::Format_RGBX64);
+#endif
 }
 
 /*!
@@ -278,7 +285,11 @@ static void readMetadata(const Imf::Header &header, QImage &image)
         }
         auto dateTime = QDateTime::fromString(QString::fromStdString(capDate->value()), QStringLiteral("yyyy:MM:dd HH:mm:ss"));
         if (dateTime.isValid()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
             dateTime.setTimeZone(QTimeZone::fromSecondsAheadOfUtc(off));
+#else
+            dateTime.setOffsetFromUtc(off);
+#endif
             image.setText(QStringLiteral(META_KEY_CREATIONDATE), dateTime.toString(Qt::ISODate));
         }
     }
@@ -404,6 +415,7 @@ bool EXRHandler::read(QImage *outImage)
             file.readPixels(my, std::min(my + EXR_LINES_PER_BLOCK - 1, dw.max.y));
 
             for (n = 0; n < std::min(EXR_LINES_PER_BLOCK, height - y); ++n) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
                 auto scanLine = reinterpret_cast<qfloat16 *>(image.scanLine(y + n));
                 for (int x = 0; x < width; ++x) {
                     auto xcs = x * 4;
@@ -412,6 +424,15 @@ bool EXRHandler::read(QImage *outImage)
                     *(scanLine + xcs + 2) = qfloat16(float(pixels[n][x].b));
                     *(scanLine + xcs + 3) = qfloat16(isRgba ? std::clamp(float(pixels[n][x].a), 0.f, 1.f) : 1.f);
                 }
+#else
+                auto scanLine = reinterpret_cast<QRgba64 *>(image.scanLine(y + n));
+                for (int x = 0; x < width; ++x) {
+                    *(scanLine + x) = QRgba64::fromRgba64(quint16(qBound(0.f, float(pixels[n][x].r) * 65535.f + 0.5f, 65535.f)),
+                                                          quint16(qBound(0.f, float(pixels[n][x].g) * 65535.f + 0.5f, 65535.f)),
+                                                          quint16(qBound(0.f, float(pixels[n][x].b) * 65535.f + 0.5f, 65535.f)),
+                                                          isRgba ? quint16(qBound(0.f, float(pixels[n][x].a) * 65535.f + 0.5f, 65535.f)) : quint16(65535));
+                }
+#endif
             }
         }
 
@@ -598,12 +619,17 @@ bool EXRHandler::write(const QImage &image)
         pixels.resizeErase(EXR_LINES_PER_BLOCK, width);
 
         // convert the image and write into the stream
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
         auto convFormat = image.hasAlphaChannel() ? QImage::Format_RGBA16FPx4 : QImage::Format_RGBX16FPx4;
+#else
+        auto convFormat = image.hasAlphaChannel() ? QImage::Format_RGBA64 : QImage::Format_RGBX64;
+#endif
         ScanLineConverter slc(convFormat);
         slc.setDefaultSourceColorSpace(QColorSpace(QColorSpace::SRgb));
         slc.setTargetColorSpace(QColorSpace(QColorSpace::SRgbLinear));
         for (int y = 0, n = 0; y < height; y += n) {
             for (n = 0; n < std::min(EXR_LINES_PER_BLOCK, height - y); ++n) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
                 auto scanLine = reinterpret_cast<const qfloat16 *>(slc.convertedScanLine(image, y + n));
                 if (scanLine == nullptr) {
                     return false;
@@ -615,6 +641,18 @@ bool EXRHandler::write(const QImage &image)
                     pixels[n][x].b = float(*(scanLine + xcs + 2));
                     pixels[n][x].a = float(*(scanLine + xcs + 3));
                 }
+#else
+                auto scanLine = reinterpret_cast<const QRgba64 *>(slc.convertedScanLine(image, y + n));
+                if (scanLine == nullptr) {
+                    return false;
+                }
+                for (int x = 0; x < width; ++x) {
+                    pixels[n][x].r = float((scanLine + x)->red() / 65535.f);
+                    pixels[n][x].g = float((scanLine + x)->green() / 65535.f);
+                    pixels[n][x].b = float((scanLine + x)->blue() / 65535.f);
+                    pixels[n][x].a = float((scanLine + x)->alpha() / 65535.f);
+                }
+#endif
             }
             file.setFrameBuffer(&pixels[0][0] - qint64(y) * width, 1, width);
             file.writePixels(n);
diff --git a/src/imageformats/hdr.cpp b/src/imageformats/hdr.cpp
index bee4fdc..0b1bf7d 100644
--- a/src/imageformats/hdr.cpp
+++ b/src/imageformats/hdr.cpp
@@ -148,7 +148,9 @@ public:
                                           QPointF(primaries.at(2), primaries.at(3)),
                                           QPointF(primaries.at(4), primaries.at(5)),
                                           QColorSpace::TransferFunction::Linear);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
                     cs.setDescription(QStringLiteral("Embedded RGB"));
+#endif
                     if (cs.isValid())
                         h.m_colorSpace = cs;
                 }
@@ -215,6 +217,17 @@ private:
     Header m_header;
 };
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 2, 0)
+static inline uchar ClipToByte(float value)
+{
+    if (value > 255.0f) {
+        return 255;
+    }
+    // else if (value < 0.0f) return 0;  // we know value is positive.
+    return uchar(value);
+}
+#endif
+
 // read an old style line from the hdr image file
 // if 'first' is true the first byte is already read
 static bool Read_Old_Line(uchar *image, int width, QDataStream &s)
@@ -271,6 +284,7 @@ void RGBE_To_QRgbLine(uchar *image, float_T *scanline, const Header& h)
             v = 1.0f / float(1 << -e);
         }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
         auto j4 = j * 4;
         auto vn = v / 255.0f;
         if (exposure > 0) {
@@ -281,17 +295,24 @@ void RGBE_To_QRgbLine(uchar *image, float_T *scanline, const Header& h)
         scanline[j4 + 1] = float_T(float(image[1]) * vn);
         scanline[j4 + 2] = float_T(float(image[2]) * vn);
         scanline[j4 + 3] = float_T(1.0f);
+#else
+        scanline[j] = qRgb(ClipToByte(float(image[0]) * v), ClipToByte(float(image[1]) * v), ClipToByte(float(image[2]) * v));
+#endif
         image += 4;
     }
 }
 
 QImage::Format imageFormat()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
 #ifdef HDR_HALF_QUALITY
     return QImage::Format_RGBX16FPx4;
 #else
     return QImage::Format_RGBX32FPx4;
 #endif
+#else
+    return QImage::Format_RGB32;
+#endif
 }
 
 // Load the HDR image.
@@ -315,11 +336,15 @@ static bool LoadHDR(QDataStream &s, const Header& h, QImage &img)
     uchar *image = reinterpret_cast<uchar *>(lineArray.data());
 
     for (int cline = 0; cline < height; cline++) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
 #ifdef HDR_HALF_QUALITY
         auto scanline = reinterpret_cast<qfloat16 *>(img.scanLine(cline));
 #else
         auto scanline = reinterpret_cast<float *>(img.scanLine(cline));
 #endif
+#else
+        auto scanline = reinterpret_cast<QRgb *>(img.scanLine(cline));
+#endif
 
         // determine scanline type
         if ((width < MINELEN) || (MAXELEN < width)) {
@@ -462,7 +487,7 @@ QVariant HDRHandler::option(ImageOption option) const
         if (auto dev = device()) {
             auto&& h = d->header(dev);
             if (h.isValid()) {
-                v = QVariant::fromValue(h.transformation());
+                v = QVariant::fromValue(int(h.transformation()));
             }
         }
     }
diff --git a/src/imageformats/jxl.cpp b/src/imageformats/jxl.cpp
index df2a3e8..6afe8e1 100644
--- a/src/imageformats/jxl.cpp
+++ b/src/imageformats/jxl.cpp
@@ -8,6 +8,7 @@
 
 #include <QThread>
 #include <QtGlobal>
+#include <QFloat16>
 
 #include "jxl_p.h"
 #include "util_p.h"
@@ -59,6 +60,15 @@ typedef enum {JXL_ENC_SUCCESS, JXL_ENC_ERROR, JXL_ENC_NEED_MORE_OUTPUT, JXL_ENC_
 #endif
 #endif
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 2, 0))
+#ifndef JXL_FP_DISABLED
+#define JXL_FP_DISABLED
+#endif
+#endif
+#if defined (JXL_FP_DISABLED) && !defined (JXL_HDR_PRESERVATION_DISABLED)
+#define JXL_HDR_PRESERVATION_DISABLED
+#endif
+
 #if JPEGXL_NUMERIC_VERSION < JPEGXL_COMPUTE_NUMERIC_VERSION(0, 9, 0)
 #ifndef JXL_HDR_PRESERVATION_DISABLED
 // Define JXL_HDR_PRESERVATION_DISABLED to disable HDR preservation
@@ -310,6 +320,7 @@ bool QJpegXLHandler::countALLFrames()
             m_input_pixel_format.data_type = JXL_TYPE_UINT16;
             m_input_image_format = m_target_image_format = QImage::Format_Grayscale16;
             m_buffer_size = (size_t)m_basicinfo.xsize * (size_t)m_basicinfo.ysize * m_input_pixel_format.num_channels * 2;
+#ifndef JXL_FP_DISABLED
         } else if (m_basicinfo.bits_per_sample > 16 && is_fp) {
             m_input_pixel_format.data_type = JXL_TYPE_FLOAT;
             m_input_image_format = QImage::Format_RGBA32FPx4;
@@ -318,13 +329,19 @@ bool QJpegXLHandler::countALLFrames()
                 m_target_image_format = QImage::Format_RGBA32FPx4;
             else
                 m_target_image_format = QImage::Format_RGBX32FPx4;
+#endif
         } else {
             m_buffer_size = (size_t)m_basicinfo.xsize * (size_t)m_basicinfo.ysize * m_input_pixel_format.num_channels * 2;
+#ifndef JXL_FP_DISABLED
             m_input_image_format = is_fp ? QImage::Format_RGBA16FPx4 : QImage::Format_RGBA64;
             if (loadalpha)
                 m_target_image_format = is_fp ? QImage::Format_RGBA16FPx4 : QImage::Format_RGBA64;
             else
                 m_target_image_format = is_fp ? QImage::Format_RGBX16FPx4 : QImage::Format_RGBX64;
+#else
+            m_input_image_format = QImage::Format_RGBA64;
+            m_target_image_format = loadalpha ? QImage::Format_RGBA64 : QImage::Format_RGBX64;
+#endif
         }
     } else { // 8bit depth
         m_input_pixel_format.data_type = JXL_TYPE_UINT8;
@@ -586,6 +603,7 @@ bool QJpegXLHandler::write(const QImage &image)
     bool is_gray = false;
     // depth detection
     switch (image.format()) {
+#ifndef JXL_FP_DISABLED
     case QImage::Format_RGBX32FPx4:
     case QImage::Format_RGBA32FPx4:
     case QImage::Format_RGBA32FPx4_Premultiplied:
@@ -601,6 +619,7 @@ bool QJpegXLHandler::write(const QImage &image)
         save_depth = 16;
         save_fp = true;
         break;
+#endif
 #endif
     case QImage::Format_BGR30:
     case QImage::Format_A2BGR30_Premultiplied:
@@ -736,6 +755,7 @@ bool QJpegXLHandler::write(const QImage &image)
         output_info.bits_per_sample = 8;
         tmpformat = QImage::Format_Grayscale8;
         pixel_format.num_channels = 1;
+#ifndef JXL_FP_DISABLED
     } else if (save_depth > 16) { // 32bit depth rgb
         pixel_format.data_type = JXL_TYPE_FLOAT;
         output_info.exponent_bits_per_sample = 8;
@@ -754,6 +774,7 @@ bool QJpegXLHandler::write(const QImage &image)
             output_info.alpha_bits = 0;
             output_info.num_extra_channels = 0;
         }
+#endif
     } else if (save_depth > 8) { // 16bit depth rgb
         pixel_format.data_type = save_fp ? JXL_TYPE_FLOAT16 : JXL_TYPE_UINT16;
         output_info.exponent_bits_per_sample = save_fp ? 5 : 0;
@@ -761,13 +782,23 @@ bool QJpegXLHandler::write(const QImage &image)
         output_info.bits_per_sample = 16;
 
         if (image.hasAlphaChannel()) {
+#ifndef JXL_FP_DISABLED
             tmpformat = save_fp ? QImage::Format_RGBA16FPx4 : QImage::Format_RGBA64;
+#else
+            Q_ASSERT(!save_fp);
+            tmpformat = QImage::Format_RGBA64;
+#endif
             pixel_format.num_channels = 4;
             output_info.alpha_bits = 16;
             output_info.alpha_exponent_bits = save_fp ? 5 : 0;
             output_info.num_extra_channels = 1;
         } else {
+#ifndef JXL_FP_DISABLED
             tmpformat = save_fp ? QImage::Format_RGBX16FPx4 : QImage::Format_RGBX64;
+#else
+            Q_ASSERT(!save_fp);
+            tmpformat = QImage::Format_RGBX64;
+#endif
             pixel_format.num_channels = 3;
             output_info.alpha_bits = 0;
             output_info.num_extra_channels = 0;
@@ -881,8 +912,10 @@ bool QJpegXLHandler::write(const QImage &image)
         // pack pixel data
         if (save_depth > 16 && save_fp)
             packRGBPixels<float>(tmpimage);
+#ifndef JXL_FP_DISABLED
         else if (save_fp)
             packRGBPixels<qfloat16>(tmpimage);
+#endif
         else
             packRGBPixels<quint16>(tmpimage);
     }
diff --git a/src/imageformats/jxl_p.h b/src/imageformats/jxl_p.h
index 923a611..cad7036 100644
--- a/src/imageformats/jxl_p.h
+++ b/src/imageformats/jxl_p.h
@@ -17,6 +17,10 @@
 #include <QList>
 #include <QVariant>
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#include <QVector>
+#endif
+
 #include <jxl/decode.h>
 
 class QJpegXLHandler : public QImageIOHandler
@@ -73,7 +77,11 @@ private:
     void *m_runner;
     JxlBasicInfo m_basicinfo;
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<int> m_framedelays;
+#else
+    QVector<int> m_framedelays;
+#endif
     int m_next_image_delay;
 
     QImage m_current_image;
diff --git a/src/imageformats/jxr.cpp b/src/imageformats/jxr.cpp
index 9180391..1eca33e 100644
--- a/src/imageformats/jxr.cpp
+++ b/src/imageformats/jxr.cpp
@@ -45,6 +45,9 @@ Q_LOGGING_CATEGORY(LOG_JXRPLUGIN, "kf.imageformats.plugins.jxr", QtWarningMsg)
  * NOTE: Float images have values greater than 1 so they need an additional in place conversion.
  */
 // #define JXR_DENY_FLOAT_IMAGE
+#if QT_VERSION < QT_VERSION_CHECK(6, 2, 0)
+#define JXR_DENY_FLOAT_IMAGE
+#endif
 
 /*!
  * Remove the neeeds of additional memory by disabling the conversion between
@@ -498,8 +501,8 @@ public:
             if (cs.isValid() && cs.transferFunction() != QColorSpace::TransferFunction::Linear) {
                 qi = qi.convertedToColorSpace(QColorSpace(QColorSpace::SRgbLinear));
             }
-        }
 #endif // JXR_DENY_FLOAT_IMAGE
+        }
 
         return qi;
     }
@@ -838,11 +841,13 @@ bool JXRHandler::read(QImage *outImage)
         } else { // additional buffer needed
             qint64 convStrideSize = (img.width() * d->pDecoder->WMP.wmiI.cBitsPerUnit + 7) / 8;
             qint64 buffSize = convStrideSize * img.height();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
             qint64 limit = QImageReader::allocationLimit();
             if (limit && (buffSize + img.sizeInBytes()) > limit * 1024 * 1024) {
                 qCWarning(LOG_JXRPLUGIN) << "JXRHandler::read() unable to covert due to allocation limit set:" << limit << "MiB";
                 return false;
             }
+#endif
             QVector<quint8> ba(buffSize);
             if (auto err = pConverter->Copy(pConverter, &rect, ba.data(), convStrideSize)) {
                 PKFormatConverter_Release(&pConverter);
@@ -850,7 +855,7 @@ bool JXRHandler::read(QImage *outImage)
                 return false;
             }
             for (qint32 y = 0, h = img.height(); y < h; ++y) {
-                std::memcpy(img.scanLine(y), ba.data() + convStrideSize * y, (std::min)(convStrideSize, img.bytesPerLine()));
+                std::memcpy(img.scanLine(y), ba.data() + convStrideSize * y, (std::min<size_t>)(convStrideSize, img.bytesPerLine()));
             }
         }
         PKFormatConverter_Release(&pConverter);
@@ -914,11 +919,19 @@ bool JXRHandler::write(const QImage &image)
 #ifndef JXR_DISABLE_BGRA_HACK
     if (IsEqualGUID(jxlfmt, GUID_PKPixelFormat32bppRGBA)) {
         jxlfmt = GUID_PKPixelFormat32bppBGRA;
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+        qi = qi.rgbSwapped();
+#else
         qi.rgbSwap();
+#endif
     }
     if (IsEqualGUID(jxlfmt, GUID_PKPixelFormat32bppPRGBA)) {
         jxlfmt = GUID_PKPixelFormat32bppPBGRA;
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+        qi = qi.rgbSwapped();
+#else
         qi.rgbSwap();
+#endif
     }
 #endif
 
diff --git a/src/imageformats/pfm.cpp b/src/imageformats/pfm.cpp
index 09aa806..c6968d2 100644
--- a/src/imageformats/pfm.cpp
+++ b/src/imageformats/pfm.cpp
@@ -112,7 +112,11 @@ public:
     QImage::Format format() const
     {
         if (isValid()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
             return QImage::Format_RGBX32FPx4;
+#else
+            return QImage::Format_RGB32;
+#endif
         }
         return QImage::Format_Invalid;
     }
@@ -219,6 +223,7 @@ bool PFMHandler::read(QImage *image)
 
     for (auto y = 0, h = img.height(); y < h; ++y) {
         auto bw = header.isBlackAndWhite();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
         auto line = reinterpret_cast<float *>(img.scanLine(header.isPhotoshop() ? y : h - y - 1));
         for (auto x = 0, n = img.width() * 4; x < n; x += 4) {
             line[x + 3] = float(1);
@@ -230,6 +235,23 @@ bool PFMHandler::read(QImage *image)
                 s >> line[x + 1];
                 s >> line[x + 2];
             }
+#else
+        auto line = reinterpret_cast<QRgb *>(img.scanLine(header.isPhotoshop() ? y : h - y - 1));
+        for (auto x = 0, n = img.width(); x < n; ++x) {
+            int r, g, b;
+            float f;
+            s >> f;
+            r = std::clamp(int(f * 255.0f), int(0), int(255));
+            if (bw) {
+                g = b = r;
+            } else {
+                s >> f;
+                g = std::clamp(int(f * 255.0f), int(0), int(255));
+                s >> f;
+                b = std::clamp(int(f * 255.0f), int(0), int(255));
+            }
+            line[x] = qRgb(r, g, b);
+#endif
             if (s.status() != QDataStream::Ok) {
                 qCWarning(LOG_PFMPLUGIN) << "PFMHandler::read() detected corrupted data";
                 return false;
@@ -251,9 +273,11 @@ bool PFMHandler::supportsOption(ImageOption option) const
     if (option == QImageIOHandler::ImageFormat) {
         return true;
     }
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     if (option == QImageIOHandler::Endianness) {
         return true;
     }
+#endif
     return false;
 }
 
@@ -283,6 +307,7 @@ QVariant PFMHandler::option(ImageOption option) const
         }
     }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     if (option == QImageIOHandler::Endianness) {
         auto&& h = d->m_header;
         if (h.isValid()) {
@@ -293,6 +318,7 @@ QVariant PFMHandler::option(ImageOption option) const
             }
         }
     }
+#endif
 
     return v;
 }
diff --git a/src/imageformats/psd.cpp b/src/imageformats/psd.cpp
index 21bd30d..97cea83 100644
--- a/src/imageformats/psd.cpp
+++ b/src/imageformats/psd.cpp
@@ -42,6 +42,10 @@
 #include <QImage>
 #include <QColorSpace>
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#include <QVector>
+#endif
+
 #include <cmath>
 #include <cstring>
 
@@ -146,7 +150,11 @@ struct PSDDuotoneOptions {
  */
 struct PSDColorModeDataSection {
     PSDDuotoneOptions duotone;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<QRgb> palette;
+#else
+    QVector<QRgb> palette;
+#endif
 };
 
 using PSDImageResourceSection = QHash<quint16, PSDImageResourceBlock>;
@@ -478,7 +486,11 @@ PSDColorModeDataSection readColorModeDataSection(QDataStream &s, bool *ok = null
     }
     else {              // read the palette (768 bytes)
         auto&& palette = cms.palette;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
         QList<quint8> vect(size);
+#else
+        QVector<quint8> vect(size);
+#endif
         for (auto&& v : vect)
             s >> v;
         for (qsizetype i = 0, n = vect.size()/3; i < n; ++i)
@@ -753,9 +765,13 @@ static QImage::Format imageFormat(const PSDHeader &header, bool alpha)
     auto format = QImage::Format_Invalid;
     switch(header.color_mode) {
     case CM_RGB:
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
         if (header.depth == 32)
             format = header.channel_count < 4 || !alpha ? QImage::Format_RGBX32FPx4 : QImage::Format_RGBA32FPx4_Premultiplied;
         else if (header.depth == 16)
+#else
+        if (header.depth == 16 || header.depth == 32)
+#endif
             format = header.channel_count < 4 || !alpha ? QImage::Format_RGBX64 : QImage::Format_RGBA64_Premultiplied;
         else
             format = header.channel_count < 4 || !alpha ? QImage::Format_RGB888 : QImage::Format_RGBA8888_Premultiplied;
@@ -1168,7 +1184,11 @@ static bool LoadPSD(QDataStream &stream, const PSDHeader &header, QImage &img)
         return false;
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<quint32> strides(header.height * header.channel_count, raw_count);
+#else
+    QVector<quint32> strides(header.height * header.channel_count, raw_count);
+#endif
     // Read the compressed stride sizes
     if (compression) {
         for (auto&& v : strides) {
@@ -1183,7 +1203,11 @@ static bool LoadPSD(QDataStream &stream, const PSDHeader &header, QImage &img)
     }
     // calculate the absolute file positions of each stride (required when a colorspace conversion should be done)
     auto device = stream.device();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<quint64> stridePositions(strides.size());
+#else
+    QVector<quint64> stridePositions(strides.size());
+#endif
     if (!stridePositions.isEmpty()) {
         stridePositions[0] = device->pos();
     }
@@ -1240,7 +1264,11 @@ static bool LoadPSD(QDataStream &stream, const PSDHeader &header, QImage &img)
                     planarToChunchy<quint16>(scanLine, rawStride.data(), header.width, c, header.channel_count);
                 }
                 else if (header.depth == 32) {
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
                     planarToChunchy<float>(scanLine, rawStride.data(), header.width, c, header.channel_count);
+#else
+                    planarToChunchyFloatToUInt16<float>(scanLine, rawStride.data(), header.width, c, header.channel_count);
+#endif
                 }
             }
 
@@ -1265,7 +1293,11 @@ static bool LoadPSD(QDataStream &stream, const PSDHeader &header, QImage &img)
                     else if (header.depth == 16)
                         premulConversion<quint16>(scanLine, header.width, 3, header.channel_count, PremulConversion::PS2P);
                     else if (header.depth == 32)
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
                         premulConversion<float>(scanLine, header.width, 3, header.channel_count, PremulConversion::PS2P);
+#else
+                        premulConversion<quint16>(scanLine, header.width, 3, header.channel_count, PremulConversion::PS2P);
+#endif
                 }
             }
 
@@ -1304,7 +1336,11 @@ static bool LoadPSD(QDataStream &stream, const PSDHeader &header, QImage &img)
                 else if (header.depth == 16)
                     rawChannelsCopy<quint16>(img.scanLine(y), imgChannels, psdScanline.data(), header.channel_count, header.width);
                 else if (header.depth == 32)
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
                     rawChannelsCopy<float>(img.scanLine(y), imgChannels, psdScanline.data(), header.channel_count, header.width);
+#else
+                    rawChannelsCopy<quint16>(img.scanLine(y), imgChannels, psdScanline.data(), header.channel_count, header.width);
+#endif
             }
         }
     }
@@ -1335,7 +1371,11 @@ static bool LoadPSD(QDataStream &stream, const PSDHeader &header, QImage &img)
                         planarToChunchy<quint16>(scanLine, rawStride.data(), header.width, c, imgChannels);
                 }
                 else if (header.depth == 32 && header.color_mode == CM_RGB) { // 32-bits float images: RGB/RGBA
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
                     planarToChunchy<float>(scanLine, rawStride.data(), header.width, c, imgChannels);
+#else
+                    planarToChunchyFloatToUInt16<float>(scanLine, rawStride.data(), header.width, c, imgChannels);
+#endif
                 }
                 else if (header.depth == 32 && header.color_mode == CM_GRAYSCALE) { // 32-bits float images: Grayscale (coverted to equivalent integer 16-bits)
                     planarToChunchyFloatToUInt16<float>(scanLine, rawStride.data(), header.width, c, imgChannels);
diff --git a/src/imageformats/pxr.cpp b/src/imageformats/pxr.cpp
index 668c7d2..6a80d8f 100644
--- a/src/imageformats/pxr.cpp
+++ b/src/imageformats/pxr.cpp
@@ -197,7 +197,7 @@ bool PXRHandler::read(QImage *image)
         return false;
     }
 
-    auto size = std::min(img.bytesPerLine(), header.strideSize());
+    auto size = std::min<qint64>(img.bytesPerLine(), header.strideSize());
     for (auto y = 0, h = img.height(); y < h; ++y) {
         auto line = reinterpret_cast<char*>(img.scanLine(y));
         if (d->read(line, size) != size) {
diff --git a/src/imageformats/ras.cpp b/src/imageformats/ras.cpp
index 33acf4a..49bdae0 100644
--- a/src/imageformats/ras.cpp
+++ b/src/imageformats/ras.cpp
@@ -15,6 +15,13 @@
 #include <QDebug>
 #include <QImage>
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#include <QVector>
+#endif
+
+#include <algorithm>
+#include <cstring>
+
 namespace // Private.
 {
 // format info from http://www.fileformat.info/format/sunraster/egff.htm
@@ -223,14 +230,22 @@ static bool LoadRAS(QDataStream &s, const RasHeader &ras, QImage &img)
         if (ras.ColorMapLength > 768) {
             return false;
         }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
         QList<quint8> palette(ras.ColorMapLength);
+#else
+        QVector<quint8> palette(ras.ColorMapLength);
+#endif
         for (quint32 i = 0; i < ras.ColorMapLength; ++i) {
             s >> palette[i];
             if (s.status() != QDataStream::Ok) {
                 return false;
             }
         }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
         QList<QRgb> colorTable;
+#else
+        QVector<QRgb> colorTable;
+#endif
         for (quint32 i = 0, n = ras.ColorMapLength / 3; i < n; ++i) {
             colorTable << qRgb(palette.at(i), palette.at(i + n), palette.at(i + 2 * n));
         }
@@ -241,7 +256,7 @@ static bool LoadRAS(QDataStream &s, const RasHeader &ras, QImage &img)
     }
 
     LineDecoder dec(s.device(), ras);
-    auto bytesPerLine = std::min(img.bytesPerLine(), qsizetype(rasLineSize));
+    auto bytesPerLine = std::min(qsizetype(img.bytesPerLine()), qsizetype(rasLineSize));
     for (quint32 y = 0; y < ras.Height; ++y) {
         auto rasLine = dec.readLine(rasLineSize);
         if (rasLine.size() != rasLineSize) {
diff --git a/src/imageformats/rgb.cpp b/src/imageformats/rgb.cpp
index 33367f2..8d96414 100644
--- a/src/imageformats/rgb.cpp
+++ b/src/imageformats/rgb.cpp
@@ -30,7 +30,15 @@
 #include <QDebug>
 #include <QImage>
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#include <QVector>
+#endif
+
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 class RLEData : public QList<uchar>
+#else
+class RLEData : public QVector<uchar>
+#endif
 {
 public:
     RLEData()
@@ -63,7 +71,11 @@ public:
     {
     }
     uint insert(const uchar *d, uint l);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<const RLEData *> vector();
+#else
+    QVector<const RLEData *> vector();
+#endif
     void setBaseOffset(uint o)
     {
         _offset = o;
@@ -122,7 +134,11 @@ private:
     QByteArray _data;
     QByteArray::Iterator _pos;
     RLEMap _rlemap;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<const RLEData *> _rlevector;
+#else
+    QVector<const RLEData *> _rlevector;
+#endif
     uint _numrows;
 
     bool readData(QImage &);
@@ -387,9 +403,17 @@ uint RLEMap::insert(const uchar *d, uint l)
     return QMap<RLEData, uint>::insert(data, _counter++).value();
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 QList<const RLEData *> RLEMap::vector()
+#else
+QVector<const RLEData *> RLEMap::vector()
+#endif
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<const RLEData *> v(size());
+#else
+    QVector<const RLEData *> v(size());
+#endif
     for (Iterator it = begin(); it != end(); ++it) {
         v.replace(it.value(), &it.key());
     }
diff --git a/src/imageformats/util_p.h b/src/imageformats/util_p.h
index 2291c88..7a2207b 100644
--- a/src/imageformats/util_p.h
+++ b/src/imageformats/util_p.h
@@ -11,7 +11,10 @@
 #include <limits>
 
 #include <QImage>
+
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 #include <QImageIOHandler>
+#endif
 
 // Image metadata keys to use in plugins (so they are consistent)
 #define META_KEY_ALTITUDE "Altitude"
@@ -48,9 +51,13 @@ static const int kMaxQVectorSize = std::numeric_limits<int>::max() - 32;
 inline QImage imageAlloc(const QSize &size, const QImage::Format &format)
 {
     QImage img;
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+    img = QImage(size, format);
+#else
     if (!QImageIOHandler::allocateImage(size, format, &img)) {
         img = QImage(); // paranoia
     }
+#endif
     return img;
 }
 
diff --git a/src/imageformats/xcf.cpp b/src/imageformats/xcf.cpp
index 00a1636..4b969df 100644
--- a/src/imageformats/xcf.cpp
+++ b/src/imageformats/xcf.cpp
@@ -9,21 +9,32 @@
 #include "util_p.h"
 #include "xcf_p.h"
 
-#include <QColorSpace>
 #include <QDebug>
 #include <QIODevice>
 #include <QImage>
-#include <QImageReader>
 #include <QList>
 #include <QLoggingCategory>
 #include <QPainter>
 #include <QStack>
 #include <QtEndian>
+#include <QColorSpace>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#include <QImageReader>
+#endif
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#include <QVector>
+#endif
+
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#define XCF_QT5_SUPPORT
+#endif
 
 #ifndef XCF_QT5_SUPPORT
 // Float images are not supported by Qt 5 and can be disabled in QT 6 to reduce memory usage.
 // Unfortunately enabling/disabling this define results in slightly different images, so leave the default if possible.
+#if QT_VERSION >= QT_VERSION_CHECK(6, 2, 0)
 #define USE_FLOAT_IMAGES // default uncommented
+#endif
 
 // Let's set a "reasonable" maximum size
 #define MAX_IMAGE_WIDTH 300000
@@ -110,7 +121,11 @@ struct RandomTable {
  * parallel processing on a tile-by-tile basis. Here, though,
  * we just read them in en-masse and store them in a matrix.
  */
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 typedef QList<QList<QImage>> Tiles;
+#else
+typedef QVector<QVector<QImage>> Tiles;
+#endif
 
 class XCFImageFormat
 {
@@ -492,7 +507,11 @@ public:
         qint32 tattoo; //!< (unique identifier?)
         quint32 unit; //!< Units of The GIMP (inch, mm, pica, etc...)
         qint32 num_colors = 0; //!< number of colors in an indexed image
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
         QList<QRgb> palette; //!< indexed image color palette
+#else
+        QVector<QRgb> palette; //!< indexed image color palette
+#endif
 
         int num_layers; //!< number of layers
         Layer layer; //!< most recently read layer
@@ -545,7 +564,11 @@ private:
     //! This table is used as a shared grayscale ramp to be set on grayscale
     //! images. This is because Qt does not differentiate between indexed and
     //! grayscale images.
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     static QList<QRgb> grayTable;
+#else
+    static QVector<QRgb> grayTable;
+#endif
 
     //! This table provides the add_pixel saturation values (i.e. 250 + 250 = 255).
     // static int add_lut[256][256]; - this is so lame waste of 256k of memory
@@ -646,7 +669,11 @@ bool XCFImageFormat::random_table_initialized;
 
 const RandomTable XCFImageFormat::randomTable{};
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 QList<QRgb> XCFImageFormat::grayTable;
+#else
+QVector<QRgb> XCFImageFormat::grayTable;
+#endif
 
 bool XCFImageFormat::modeAffectsSourceAlpha(const quint32 type)
 {
@@ -997,7 +1024,11 @@ bool XCFImageFormat::loadImageProperties(QDataStream &xcf_io, XCFImage &xcf_imag
                 return false;
             }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
             xcf_image.palette = QList<QRgb>();
+#else
+            xcf_image.palette = QVector<QRgb>();
+#endif
             xcf_image.palette.reserve(xcf_image.num_colors);
 
             for (int i = 0; i < xcf_image.num_colors; i++) {
@@ -1385,11 +1416,13 @@ bool XCFImageFormat::composeTiles(XCFImage &xcf_image)
     // tiles of 64x64 pixels. The required memory to build the image is at least doubled because tiles are loaded
     // and then the final image is created by copying the tiles inside it.
     // NOTE: on Windows to open a 10GiB image the plugin uses 28GiB of RAM
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     qint64 channels = 1 + (layer.type == RGB_GIMAGE ? 2 : 0) + (layer.type == RGBA_GIMAGE ? 3 : 0);
     if (qint64(layer.width) * qint64(layer.height) * channels * 2ll / 1024ll / 1024ll > QImageReader::allocationLimit()) {
         qCDebug(XCFPLUGIN) << "Rejecting image as it exceeds the current allocation limit of" << QImageReader::allocationLimit() << "megabytes";
         return false;
     }
+#endif
 #endif
 
     layer.image_tiles.resize(layer.nrows);
@@ -2029,7 +2062,11 @@ bool XCFImageFormat::loadLevel(QDataStream &xcf_io, Layer &layer, qint32 bpp, co
 
     const uint blockSize = TILE_WIDTH * TILE_HEIGHT * bpp * 1.5;
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QList<uchar> buffer;
+#else
+    QVector<uchar> buffer;
+#endif
     if (needConvert) {
         buffer.resize(blockSize * (bpp == 2 ? 2 : 1));
     }
-- 
2.47.0

