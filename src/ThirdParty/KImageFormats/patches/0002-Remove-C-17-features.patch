From bb1ccf8f9c3421bab2a4f4dd97adb675d602e2cf Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Mon, 25 Apr 2022 01:45:25 +0700
Subject: [PATCH 2/8] Remove C++17 features

---
 src/imageformats/jp2.cpp  |  4 ++--
 src/imageformats/jxr.cpp  |  4 ++--
 src/imageformats/kra.cpp  |  4 ++--
 src/imageformats/ora.cpp  |  4 ++--
 src/imageformats/pic.cpp  |  4 ++--
 src/imageformats/util_p.h |  2 +-
 src/imageformats/xcf.cpp  | 10 +++++-----
 7 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/imageformats/jp2.cpp b/src/imageformats/jp2.cpp
index 180e0ed..d796845 100644
--- a/src/imageformats/jp2.cpp
+++ b/src/imageformats/jp2.cpp
@@ -267,7 +267,7 @@ public:
                         qint32 v = jc.data[y * w + x] / divisor;
                         if (jc.sgnd) // never seen
                             v -= std::numeric_limits<typename std::make_signed<T>::type>::min();
-                        *(ptr + x * cs + c) = std::clamp(v, qint32(std::numeric_limits<T>::lowest()), qint32(std::numeric_limits<T>::max()));
+                        *(ptr + x * cs + c) = qBound(qint32(std::numeric_limits<T>::lowest()), v, qint32(std::numeric_limits<T>::max()));
                     }
                 }
             } else { // float
@@ -473,7 +473,7 @@ public:
     }
     void setQuality(qint32 quality)
     {
-        m_quality = std::clamp(quality, -1, 100);
+        m_quality = qBound(qint32(-1), quality, qint32(100));
     }
 
     /*!
diff --git a/src/imageformats/jxr.cpp b/src/imageformats/jxr.cpp
index 90f7524..a01aadf 100644
--- a/src/imageformats/jxr.cpp
+++ b/src/imageformats/jxr.cpp
@@ -1043,11 +1043,11 @@ bool JXRHandler::read(QImage *outImage)
             if (img.depth() == 64) {
                 auto line = reinterpret_cast<qfloat16 *>(img.scanLine(y));
                 for (int x = 0, w = img.width() * 4; x < w; x += 4)
-                    line[x + 3] = hasAlpha ? std::clamp(line[x + 3], qfloat16(0), qfloat16(1)) : qfloat16(1);
+                    line[x + 3] = hasAlpha ? qBound(qfloat16(0), line[x + 3], qfloat16(1)) : qfloat16(1);
             } else {
                 auto line = reinterpret_cast<float *>(img.scanLine(y));
                 for (int x = 0, w = img.width() * 4; x < w; x += 4)
-                    line[x + 3] = hasAlpha ? std::clamp(line[x + 3], float(0), float(1)) : float(1);
+                    line[x + 3] = hasAlpha ? qBound(float(0), line[x + 3], float(1)) : float(1);
             }
         }
         if (!img.colorSpace().isValid()) {
diff --git a/src/imageformats/kra.cpp b/src/imageformats/kra.cpp
index ef587d7..310f49f 100644
--- a/src/imageformats/kra.cpp
+++ b/src/imageformats/kra.cpp
@@ -16,8 +16,8 @@
 #include <QIODevice>
 #include <QImage>
 
-static constexpr char s_magic[] = "application/x-krita";
-static constexpr int s_magic_size = sizeof(s_magic) - 1; // -1 to remove the last \0
+static const char s_magic[] = "application/x-krita";
+static const int s_magic_size = sizeof(s_magic) - 1; // -1 to remove the last \0
 
 KraHandler::KraHandler()
 {
diff --git a/src/imageformats/ora.cpp b/src/imageformats/ora.cpp
index 0b785b4..1af4518 100644
--- a/src/imageformats/ora.cpp
+++ b/src/imageformats/ora.cpp
@@ -15,8 +15,8 @@
 
 #include <kzip.h>
 
-static constexpr char s_magic[] = "image/openraster";
-static constexpr int s_magic_size = sizeof(s_magic) - 1; // -1 to remove the last \0
+static const char s_magic[] = "image/openraster";
+static const int s_magic_size = sizeof(s_magic) - 1; // -1 to remove the last \0
 
 OraHandler::OraHandler()
 {
diff --git a/src/imageformats/pic.cpp b/src/imageformats/pic.cpp
index 03d5915..3ae1d7d 100644
--- a/src/imageformats/pic.cpp
+++ b/src/imageformats/pic.cpp
@@ -229,7 +229,7 @@ bool SoftimagePICHandler::read(QImage *image)
     }
 
     QImage::Format fmt = QImage::Format_RGB32;
-    for (const PicChannel &channel : std::as_const(m_channels)) {
+    for (const PicChannel &channel : qAsConst(m_channels)) {
         if (channel.size != 8) {
             // we cannot read images that do not come in bytes
             qDebug() << "Channel size was" << channel.size;
@@ -421,7 +421,7 @@ QVariant SoftimagePICHandler::option(ImageOption option) const
         return QString();
     case ImageFormat:
         if (const_cast<SoftimagePICHandler *>(this)->readChannels()) {
-            for (const PicChannel &channel : std::as_const(m_channels)) {
+            for (const PicChannel &channel : qAsConst(m_channels)) {
                 if (channel.code & ALPHA) {
                     return QImage::Format_ARGB32;
                 }
diff --git a/src/imageformats/util_p.h b/src/imageformats/util_p.h
index 1fbc775..075f148 100644
--- a/src/imageformats/util_p.h
+++ b/src/imageformats/util_p.h
@@ -48,7 +48,7 @@
 #define META_KEY_LENS_SERIALNUMBER "LensSerialNumber"
 
 // QList uses some extra space for stuff, hence the 32 here suggested by Thiago Macieira
-static constexpr int kMaxQVectorSize = std::numeric_limits<int>::max() - 32;
+static const int kMaxQVectorSize = std::numeric_limits<int>::max() - 32;
 
 // On Qt 6 to make the plugins fail to allocate if the image size is greater than QImageReader::allocationLimit()
 // it is necessary to allocate the image with QImageIOHandler::allocateImage().
diff --git a/src/imageformats/xcf.cpp b/src/imageformats/xcf.cpp
index bfc9b76..1c1df25 100644
--- a/src/imageformats/xcf.cpp
+++ b/src/imageformats/xcf.cpp
@@ -61,7 +61,7 @@ namespace
 {
 struct RandomTable {
     // From glibc
-    static constexpr int rand_r(unsigned int *seed)
+    static int rand_r(unsigned int *seed)
     {
         unsigned int next = *seed;
         int result = 0;
@@ -85,7 +85,7 @@ struct RandomTable {
         return result;
     }
 
-    constexpr RandomTable()
+    RandomTable()
         : values{}
     {
         unsigned int next = RANDOM_SEED;
@@ -544,7 +544,7 @@ private:
     static int random_table[RANDOM_TABLE_SIZE];
     static bool random_table_initialized;
 
-    static constexpr RandomTable randomTable{};
+    static const RandomTable randomTable;
 
     //! This table is used as a shared grayscale ramp to be set on grayscale
     //! images. This is because Qt does not differentiate between indexed and
@@ -648,7 +648,7 @@ public:
 int XCFImageFormat::random_table[RANDOM_TABLE_SIZE];
 bool XCFImageFormat::random_table_initialized;
 
-constexpr RandomTable XCFImageFormat::randomTable;
+const RandomTable XCFImageFormat::randomTable{};
 
 QList<QRgb> XCFImageFormat::grayTable;
 
@@ -1574,7 +1574,7 @@ void XCFImageFormat::setImageParasites(const XCFImage &xcf_image, QImage &image)
 {
     auto&& p = xcf_image.parasites;
     auto keys = p.keys();
-    for (auto &&key : std::as_const(keys)) {
+    for (auto &&key : qAsConst(keys)) {
         auto value = p.value(key);
         if (value.isEmpty())
             continue;
-- 
2.51.0

