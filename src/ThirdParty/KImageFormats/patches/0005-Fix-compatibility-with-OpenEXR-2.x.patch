From 7ba59523fd4bafdc3f6dc330274b0482b2889de0 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Sat, 11 Nov 2023 22:42:48 +0700
Subject: [PATCH 5/8] Fix compatibility with OpenEXR 2.x

---
 src/imageformats/exr.cpp | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/imageformats/exr.cpp b/src/imageformats/exr.cpp
index 45a755a..34cf6e7 100644
--- a/src/imageformats/exr.cpp
+++ b/src/imageformats/exr.cpp
@@ -178,7 +178,7 @@ void K_OStream::write(const char c[], int n)
 #if OPENEXR_VERSION_MAJOR > 2
 uint64_t K_OStream::tellp()
 #else
-Imf::Int64 K_OStream::tellg()
+Imf::Int64 K_OStream::tellp()
 #endif
 {
     return m_dev->pos();
@@ -187,7 +187,7 @@ Imf::Int64 K_OStream::tellg()
 #if OPENEXR_VERSION_MAJOR > 2
 void K_OStream::seekp(uint64_t pos)
 #else
-void K_OStream::seekg(Imf::Int64 pos)
+void K_OStream::seekp(Imf::Int64 pos)
 #endif
 {
     m_dev->seek(pos);
@@ -564,12 +564,14 @@ bool EXRHandler::write(const QImage &image)
         if (m_compressionRatio >= qint32(Imf::Compression::NO_COMPRESSION) && m_compressionRatio < qint32(Imf::Compression::NUM_COMPRESSION_METHODS)) {
             header.compression() = Imf::Compression(m_compressionRatio);
         }
+#if OPENEXR_VERSION_MAJOR > 2
         // set the DCT quality (used by DCT compressions only)
         if (m_quality > -1 && m_quality <= 100) {
             header.dwaCompressionLevel() = float(m_quality);
         }
         // make ZIP compression fast (used by ZIP compressions)
         header.zipCompressionLevel() = 1;
+#endif
 
         // set preview (don't set it for small images)
         if (width > 1024 || height > 1024) {
-- 
2.39.5

