From b2b14d4eb9b00821688896cd2731c966db9b73d6 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Mon, 7 Jan 2019 21:11:00 +0700
Subject: [PATCH 5/8] Dont use modern options with old Qt verson

---
 src/plugins/imageformats/dds/qddshandler.cpp  |   7 +-
 .../imageformats/icns/qicnshandler.cpp        |  12 ++
 src/plugins/imageformats/jp2/qjp2handler.cpp  |  21 ++++
 src/plugins/imageformats/mng/qmnghandler.cpp  |   4 +
 src/plugins/imageformats/tga/qtgafile.cpp     |   5 +
 .../imageformats/tiff/qtiffhandler.cpp        | 110 ++++++++++++++++++
 .../imageformats/tiff/qtiffhandler_p.h        |   4 +
 .../imageformats/wbmp/qwbmphandler.cpp        |   4 +
 .../imageformats/webp/qwebphandler.cpp        |  32 +++++
 9 files changed, 198 insertions(+), 1 deletion(-)

diff --git a/src/plugins/imageformats/dds/qddshandler.cpp b/src/plugins/imageformats/dds/qddshandler.cpp
index 673718f..0196096 100644
--- a/src/plugins/imageformats/dds/qddshandler.cpp
+++ b/src/plugins/imageformats/dds/qddshandler.cpp
@@ -1448,8 +1448,10 @@ QVariant QDDSHandler::option(QImageIOHandler::ImageOption option) const
         return QSize(m_header.width, m_header.height);
     case QImageIOHandler::SubType:
         return formatName(m_format);
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
     case QImageIOHandler::SupportedSubTypes:
         return QVariant::fromValue(QList<QByteArray>() << formatName(FormatA8R8G8B8));
+#endif
     default:
         break;
     }
@@ -1471,7 +1473,10 @@ bool QDDSHandler::supportsOption(QImageIOHandler::ImageOption option) const
 {
     return (option == QImageIOHandler::Size)
             || (option == QImageIOHandler::SubType)
-            || (option == QImageIOHandler::SupportedSubTypes);
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
+            || (option == QImageIOHandler::SupportedSubTypes)
+#endif
+            ;
 }
 
 int QDDSHandler::imageCount() const
diff --git a/src/plugins/imageformats/icns/qicnshandler.cpp b/src/plugins/imageformats/icns/qicnshandler.cpp
index 572193d..24f6863 100644
--- a/src/plugins/imageformats/icns/qicnshandler.cpp
+++ b/src/plugins/imageformats/icns/qicnshandler.cpp
@@ -509,9 +509,13 @@ static QImage readMask(const ICNSEntry &mask, QDataStream &stream)
     const qint64 oldPos = stream.device()->pos();
     if (!stream.device()->seek(pos))
         return QImage();
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage img;
     if (!QImageIOHandler::allocateImage(QSize(mask.width, mask.height), QImage::Format_RGB32, &img))
         return QImage();
+#else
+    QImage img(mask.width, mask.height, QImage::Format_RGB32);
+#endif
     quint8 byte = 0;
     quint32 pixel = 0;
     for (quint32 y = 0; y < mask.height; y++) {
@@ -541,9 +545,13 @@ static QImage readLowDepthIcon(const ICNSEntry &icon, QDataStream &stream)
     const QList<QRgb> colortable = getColorTable(depth);
     if (colortable.isEmpty())
         return QImage();
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage img;
     if (!QImageIOHandler::allocateImage(QSize(icon.width, icon.height), format, &img))
         return QImage();
+#else
+    QImage img(icon.width, icon.height, format);
+#endif
     img.setColorTable(colortable);
     quint32 pixel = 0;
     quint8 byte = 0;
@@ -574,9 +582,13 @@ static QImage readLowDepthIcon(const ICNSEntry &icon, QDataStream &stream)
 
 static QImage read32bitIcon(const ICNSEntry &icon, QDataStream &stream)
 {
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage img;
     if (!QImageIOHandler::allocateImage(QSize(icon.width, icon.height), QImage::Format_RGB32, &img))
         return QImage();
+#else
+    QImage img = QImage(icon.width, icon.height, QImage::Format_RGB32);
+#endif
     if (icon.dataFormat != ICNSEntry::RLE24) {
         for (quint32 y = 0; y < icon.height; y++) {
             QRgb *line = reinterpret_cast<QRgb *>(img.scanLine(y));
diff --git a/src/plugins/imageformats/jp2/qjp2handler.cpp b/src/plugins/imageformats/jp2/qjp2handler.cpp
index fe08995..0dd1a61 100644
--- a/src/plugins/imageformats/jp2/qjp2handler.cpp
+++ b/src/plugins/imageformats/jp2/qjp2handler.cpp
@@ -568,6 +568,7 @@ bool Jpeg2000JasperReader::read(QImage *pImage)
     }
 
     // Create a QImage of the correct type
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage::Format qtFormat = QImage::Format_Invalid;
     if (jasperColorspaceFamily == JAS_CLRSPC_FAM_RGB)
         qtFormat = hasAlpha ? QImage::Format_ARGB32 : QImage::Format_RGB32;
@@ -575,6 +576,26 @@ bool Jpeg2000JasperReader::read(QImage *pImage)
         qtFormat = hasAlpha ? QImage::Format_ARGB32 : QImage::Format_Grayscale8;
     if (!QImageIOHandler::allocateImage(QSize(qtWidth, qtHeight), qtFormat, &qtImage))
         return false;
+#else
+    if (jasperColorspaceFamily == JAS_CLRSPC_FAM_RGB) {
+        qtImage = QImage(qtWidth, qtHeight, hasAlpha
+                                                ? QImage::Format_ARGB32
+                                                : QImage::Format_RGB32);
+    } else if (jasperColorspaceFamily == JAS_CLRSPC_FAM_GRAY) {
+        if (hasAlpha) {
+            qtImage = QImage(qtWidth, qtHeight, QImage::Format_ARGB32);
+        } else {
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
+            qtImage = QImage(qtWidth, qtHeight, QImage::Format_Grayscale8);
+#else
+            qtImage = QImage(qtWidth, qtHeight, QImage::Format_Indexed8);
+            qtImage.setColorCount(256);
+            for (int c = 0; c < 256; ++c)
+                qtImage.setColor(c, qRgb(c,c,c));
+#endif
+        }
+    }
+#endif
 
     // Copy data
     if (oddComponentSubsampling) {
diff --git a/src/plugins/imageformats/mng/qmnghandler.cpp b/src/plugins/imageformats/mng/qmnghandler.cpp
index 47c4edd..8cdb755 100644
--- a/src/plugins/imageformats/mng/qmnghandler.cpp
+++ b/src/plugins/imageformats/mng/qmnghandler.cpp
@@ -211,8 +211,12 @@ mng_bool QMngHandlerPrivate::processHeader(mng_uint32 iWidth, mng_uint32 iHeight
 {
     if (mng_set_canvasstyle(hMNG, iStyle) != MNG_NOERROR)
         return MNG_FALSE;
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     if (!QImageIOHandler::allocateImage(QSize(iWidth, iHeight), QImage::Format_ARGB32, &image))
         return MNG_FALSE;
+#else
+    image = QImage(iWidth, iHeight, QImage::Format_ARGB32);
+#endif
     image.fill(0);
     return MNG_TRUE;
 }
diff --git a/src/plugins/imageformats/tga/qtgafile.cpp b/src/plugins/imageformats/tga/qtgafile.cpp
index b5926aa..850f453 100644
--- a/src/plugins/imageformats/tga/qtgafile.cpp
+++ b/src/plugins/imageformats/tga/qtgafile.cpp
@@ -203,8 +203,13 @@ QImage QTgaFile::readImage()
     //unsigned char xCorner = desc & 0x10; // 0 = left, 1 = right
     unsigned char yCorner = desc & 0x20; // 0 = lower, 1 = upper
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage im;
     if (!QImageIOHandler::allocateImage(QSize(imageWidth, imageHeight), QImage::Format_ARGB32, &im))
+#else
+    QImage im(imageWidth, imageHeight, QImage::Format_ARGB32);
+    if (im.isNull())
+#endif
         return QImage();
     TgaReader *reader = 0;
     if (bitsPerPixel == 16)
diff --git a/src/plugins/imageformats/tiff/qtiffhandler.cpp b/src/plugins/imageformats/tiff/qtiffhandler.cpp
index 1ee96e5..c5f5cab 100644
--- a/src/plugins/imageformats/tiff/qtiffhandler.cpp
+++ b/src/plugins/imageformats/tiff/qtiffhandler.cpp
@@ -5,7 +5,9 @@
 
 #include <qcolorspace.h>
 #include <qdebug.h>
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
 #include <qfloat16.h>
+#endif
 #include <qimage.h>
 #include <qvariant.h>
 #include <qvarlengtharray.h>
@@ -239,10 +241,14 @@ bool QTiffHandlerPrivate::readHeaders(QIODevice *device)
     uint16_t samplesPerPixel; // they may be e.g. grayscale with 2 samples per pixel
     if (!TIFFGetField(tiff, TIFFTAG_SAMPLESPERPIXEL, &samplesPerPixel))
         samplesPerPixel = 1;
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
     uint16_t sampleFormat;
     if (!TIFFGetField(tiff, TIFFTAG_SAMPLEFORMAT, &sampleFormat))
         sampleFormat = SAMPLEFORMAT_VOID;
     floatingPoint = (sampleFormat == SAMPLEFORMAT_IEEEFP);
+#else
+    floatingPoint = false;
+#endif
 
     grayscale = photometric == PHOTOMETRIC_MINISBLACK || photometric == PHOTOMETRIC_MINISWHITE;
 
@@ -250,16 +256,24 @@ bool QTiffHandlerPrivate::readHeaders(QIODevice *device)
         format = QImage::Format_Mono;
     else if (photometric == PHOTOMETRIC_MINISBLACK && bitPerSample == 8 && samplesPerPixel == 1)
         format = QImage::Format_Grayscale8;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 13, 0))
     else if (photometric == PHOTOMETRIC_MINISBLACK && bitPerSample == 16 && samplesPerPixel == 1 && !floatingPoint)
         format = QImage::Format_Grayscale16;
+#endif
     else if ((grayscale || photometric == PHOTOMETRIC_PALETTE) && bitPerSample == 8 && samplesPerPixel == 1)
         format = QImage::Format_Indexed8;
     else if (samplesPerPixel < 4)
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
         if (bitPerSample == 16 && photometric == PHOTOMETRIC_RGB)
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
             format = floatingPoint ? QImage::Format_RGBX16FPx4 : QImage::Format_RGBX64;
         else if (bitPerSample == 32 && floatingPoint && photometric == PHOTOMETRIC_RGB)
             format = QImage::Format_RGBX32FPx4;
+#else
+            format = QImage::Format_RGBX64;
+#endif
         else
+#endif
             format = QImage::Format_RGB32;
     else {
         uint16_t count;
@@ -273,10 +287,12 @@ bool QTiffHandlerPrivate::readHeaders(QIODevice *device)
         if (!gotField || !count || extrasamples[0] == EXTRASAMPLE_UNSPECIFIED)
             premultiplied = false;
 
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
         if (bitPerSample == 16 && photometric == PHOTOMETRIC_RGB) {
             // We read 64-bit raw, so unassoc remains unpremultiplied.
             if (gotField && count && extrasamples[0] == EXTRASAMPLE_UNASSALPHA)
                 premultiplied = false;
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
             if (premultiplied)
                 format = floatingPoint ? QImage::Format_RGBA16FPx4_Premultiplied : QImage::Format_RGBA64_Premultiplied;
             else
@@ -288,7 +304,16 @@ bool QTiffHandlerPrivate::readHeaders(QIODevice *device)
                 format = QImage::Format_RGBA32FPx4_Premultiplied;
             else
                 format = QImage::Format_RGBA32FPx4;
+#else
+            if (premultiplied)
+                format = QImage::Format_RGBA64_Premultiplied;
+            else
+                format = QImage::Format_RGBA64;
+#endif
         } else {
+#else
+        if (true) {
+#endif
             if (premultiplied)
                 format = QImage::Format_ARGB32_Premultiplied;
             else
@@ -330,19 +355,44 @@ bool QTiffHandler::read(QImage *image)
 
     QImage::Format format = d->format;
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     if (!QImageIOHandler::allocateImage(d->size, format, image)) {
+#else
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
+    if (image->size() == d->size && image->format() != format)
+        image->reinterpretAsFormat(format);
+#else
+    if (format == QImage::Format_RGB32 &&
+            (image->format() == QImage::Format_ARGB32 ||
+             image->format() == QImage::Format_ARGB32_Premultiplied))
+        format = image->format();
+#endif
+
+    if (image->size() != d->size || image->format() != format)
+        *image = QImage(d->size, format);
+
+    if (image->isNull()) {
+#endif
         d->close();
         return false;
     }
 
     TIFF *const tiff = d->tiff;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
     if (TIFFIsTiled(tiff) && TIFFTileSize64(tiff) > uint64_t(image->sizeInBytes())) // Corrupt image
+#else
+    if (TIFFIsTiled(tiff) && TIFFTileSize64(tiff) > uint64_t(image->byteCount())) // Corrupt image
+#endif
         return false;
     const quint32 width = d->size.width();
     const quint32 height = d->size.height();
 
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
     // Setup color tables
     if (format == QImage::Format_Mono || format == QImage::Format_Indexed8) {
+#else
+   if (format == QImage::Format_Mono || format == QImage::Format_Indexed8 || format == QImage::Format_Grayscale8) {
+#endif
         if (format == QImage::Format_Mono) {
             QList<QRgb> colortable(2);
             if (d->photometric == PHOTOMETRIC_MINISBLACK) {
@@ -386,20 +436,39 @@ bool QTiffHandler::read(QImage *image)
             image->setColorTable(qtColorTable);
             // free redTable, greenTable and greenTable done by libtiff
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
     }
     bool format8bit = (format == QImage::Format_Mono || format == QImage::Format_Indexed8 || format == QImage::Format_Grayscale8);
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 13, 0))
     bool format16bit = (format == QImage::Format_Grayscale16);
+#else
+    bool format16bit = false;
+#endif
     bool format64bit = (format == QImage::Format_RGBX64 || format == QImage::Format_RGBA64 || format == QImage::Format_RGBA64_Premultiplied);
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
     bool format64fp = (format == QImage::Format_RGBX16FPx4 || format == QImage::Format_RGBA16FPx4 || format == QImage::Format_RGBA16FPx4_Premultiplied);
     bool format128fp = (format == QImage::Format_RGBX32FPx4 || format == QImage::Format_RGBA32FPx4 || format == QImage::Format_RGBA32FPx4_Premultiplied);
+#else
+    bool format64fp = false;
+    bool format128fp = false;
+#endif
 
     // Formats we read directly, instead of over RGBA32:
     if (format8bit || format16bit || format64bit || format64fp || format128fp) {
         int bytesPerPixel = image->depth() / 8;
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
         if (format == QImage::Format_RGBX64 || format == QImage::Format_RGBX16FPx4)
+#else
+        if (format == QImage::Format_RGBX64)
+#endif
             bytesPerPixel = 6;
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
         else if (format == QImage::Format_RGBX32FPx4)
             bytesPerPixel = 12;
+#endif
+#else
+        int bytesPerPixel = 1; // 8bit
+#endif
         if (TIFFIsTiled(tiff)) {
             quint32 tileWidth, tileLength;
             TIFFGetField(tiff, TIFFTAG_TILEWIDTH, &tileWidth);
@@ -411,7 +480,11 @@ bool QTiffHandler::read(QImage *image)
             quint32 byteWidth = (format == QImage::Format_Mono) ? (width + 7)/8 : (width * bytesPerPixel);
             quint32 byteTileWidth = (format == QImage::Format_Mono) ? tileWidth/8 : (tileWidth * bytesPerPixel);
             tmsize_t byteTileSize = TIFFTileSize(tiff);
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
             if (byteTileSize > image->sizeInBytes() || byteTileSize / tileLength < byteTileWidth) {
+#else
+            if (byteTileSize > image->byteCount() || byteTileSize / tileLength < byteTileWidth) {
+#endif
                 d->close();
                 return false;
             }
@@ -448,10 +521,15 @@ bool QTiffHandler::read(QImage *image)
                 }
             }
         }
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
         if (format == QImage::Format_RGBX64 || format == QImage::Format_RGBX16FPx4)
             rgb48fixup(image, d->floatingPoint);
         else if (format == QImage::Format_RGBX32FPx4)
             rgb96fixup(image);
+#elif (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
+        if (format == QImage::Format_RGBX64)
+            rgb48fixup(image, d->floatingPoint);
+#endif
     } else {
         const int stopOnError = 1;
         if (TIFFReadRGBAImageOriented(tiff, width, height, reinterpret_cast<uint32_t *>(image->bits()), qt2Exif(d->transformation), stopOnError)) {
@@ -528,7 +606,9 @@ static QList<QRgb> effectiveColorTable(const QImage &image)
             colors[i] = qRgba(0, 0, 0, i);
         break;
     case QImage::Format_Grayscale8:
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 13, 0))
     case QImage::Format_Grayscale16:
+#endif
         colors.resize(256);
         for (int i = 0; i < 256; ++i)
             colors[i] = qRgb(i, i, i);
@@ -625,7 +705,11 @@ bool QTiffHandler::write(const QImage &image)
         }
 
         // try to do the conversion in chunks no greater than 16 MB
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
         const int chunks = int(image.sizeInBytes() / (1024 * 1024 * 16)) + 1;
+#else
+        const int chunks = int(image.byteCount() / (1024 * 1024 * 16)) + 1;
+#endif
         const int chunkHeight = qMax(height / chunks, 1);
 
         int y = 0;
@@ -645,7 +729,9 @@ bool QTiffHandler::write(const QImage &image)
         TIFFClose(tiff);
     } else if (format == QImage::Format_Indexed8
                || format == QImage::Format_Grayscale8
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 13, 0))
                || format == QImage::Format_Grayscale16
+#endif
                || format == QImage::Format_Alpha8) {
         QList<QRgb> colorTable = effectiveColorTable(image);
         bool isGrayscale = checkGrayscale(colorTable);
@@ -701,7 +787,12 @@ bool QTiffHandler::write(const QImage &image)
             }
         }
         TIFFClose(tiff);
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
     } else if (format == QImage::Format_RGBX64 || format == QImage::Format_RGBX16FPx4) {
+#else
+    } else if (format == QImage::Format_RGBX64) {
+#endif
         if (!TIFFSetField(tiff, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB)
             || !TIFFSetField(tiff, TIFFTAG_COMPRESSION, compression == NoCompression ? COMPRESSION_NONE : COMPRESSION_LZW)
             || !TIFFSetField(tiff, TIFFTAG_SAMPLESPERPIXEL, 3)
@@ -750,6 +841,7 @@ bool QTiffHandler::write(const QImage &image)
             }
         }
         TIFFClose(tiff);
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
     } else if (format == QImage::Format_RGBX32FPx4) {
         if (!TIFFSetField(tiff, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB)
             || !TIFFSetField(tiff, TIFFTAG_COMPRESSION, compression == NoCompression ? COMPRESSION_NONE : COMPRESSION_LZW)
@@ -797,6 +889,7 @@ bool QTiffHandler::write(const QImage &image)
             }
         }
         TIFFClose(tiff);
+#endif
     } else if (!image.hasAlphaChannel()) {
         if (!TIFFSetField(tiff, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB)
             || !TIFFSetField(tiff, TIFFTAG_COMPRESSION, compression == NoCompression ? COMPRESSION_NONE : COMPRESSION_LZW)
@@ -807,7 +900,11 @@ bool QTiffHandler::write(const QImage &image)
             return false;
         }
         // try to do the RGB888 conversion in chunks no greater than 16 MB
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
         const int chunks = int(image.sizeInBytes() / (1024 * 1024 * 16)) + 1;
+#else
+        const int chunks = int(image.byteCount() / (1024 * 1024 * 16)) + 1;
+#endif
         const int chunkHeight = qMax(height / chunks, 1);
 
         int y = 0;
@@ -825,6 +922,7 @@ bool QTiffHandler::write(const QImage &image)
             }
         }
         TIFFClose(tiff);
+#endif
     } else {
         const bool premultiplied = image.format() != QImage::Format_ARGB32
                                 && image.format() != QImage::Format_RGBA8888;
@@ -839,7 +937,11 @@ bool QTiffHandler::write(const QImage &image)
             return false;
         }
         // try to do the RGBA8888 conversion in chunks no greater than 16 MB
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
         const int chunks = int(image.sizeInBytes() / (1024 * 1024 * 16)) + 1;
+#else
+        const int chunks = int(image.byteCount() / (1024 * 1024 * 16)) + 1;
+#endif
         const int chunkHeight = qMax(height / chunks, 1);
 
         const QImage::Format format = premultiplied ? QImage::Format_RGBA8888_Premultiplied
@@ -883,7 +985,11 @@ QVariant QTiffHandler::option(ImageOption option) const
 
 void QTiffHandler::setOption(ImageOption option, const QVariant &value)
 {
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     if (option == CompressionRatio && value.metaType().id() == QMetaType::Int)
+#else
+    if (option == CompressionRatio && value.type() == QVariant::Int)
+#endif
         d->compression = qBound(0, value.toInt(), 1);
     if (option == ImageTransformation) {
         int transformation = value.toInt();
@@ -952,6 +1058,7 @@ void QTiffHandler::convert32BitOrder(void *buffer, int width)
     }
 }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
 void QTiffHandler::rgb48fixup(QImage *image, bool floatingPoint)
 {
     Q_ASSERT(image->depth() == 64);
@@ -974,7 +1081,9 @@ void QTiffHandler::rgb48fixup(QImage *image, bool floatingPoint)
         scanline += bpl;
     }
 }
+#endif
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
 void QTiffHandler::rgb96fixup(QImage *image)
 {
     Q_ASSERT(image->depth() == 128);
@@ -993,6 +1102,7 @@ void QTiffHandler::rgb96fixup(QImage *image)
         scanline += bpl;
     }
 }
+#endif
 
 bool QTiffHandler::ensureHaveDirectoryCount() const
 {
diff --git a/src/plugins/imageformats/tiff/qtiffhandler_p.h b/src/plugins/imageformats/tiff/qtiffhandler_p.h
index 8a6115b..49c08df 100644
--- a/src/plugins/imageformats/tiff/qtiffhandler_p.h
+++ b/src/plugins/imageformats/tiff/qtiffhandler_p.h
@@ -36,8 +36,12 @@ public:
     };
 private:
     void convert32BitOrder(void *buffer, int width);
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 12, 0))
     void rgb48fixup(QImage *image, bool floatingPoint);
+#endif
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 2, 0))
     void rgb96fixup(QImage *image);
+#endif
     const QScopedPointer<QTiffHandlerPrivate> d;
     bool ensureHaveDirectoryCount() const;
 };
diff --git a/src/plugins/imageformats/wbmp/qwbmphandler.cpp b/src/plugins/imageformats/wbmp/qwbmphandler.cpp
index 581984d..d41ff93 100644
--- a/src/plugins/imageformats/wbmp/qwbmphandler.cpp
+++ b/src/plugins/imageformats/wbmp/qwbmphandler.cpp
@@ -161,9 +161,13 @@ QImage WBMPReader::readImage()
     if (!readWBMPHeader(iodev, &hdr))
         return QImage();
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage image;
     if (!QImageIOHandler::allocateImage(QSize(hdr.width, hdr.height), QImage::Format_Mono, &image))
         return QImage();
+#else
+    QImage image(hdr.width, hdr.height, QImage::Format_Mono);
+#endif
     if (!readWBMPData(iodev, image))
         return QImage();
 
diff --git a/src/plugins/imageformats/webp/qwebphandler.cpp b/src/plugins/imageformats/webp/qwebphandler.cpp
index 922868c..55603ad 100644
--- a/src/plugins/imageformats/webp/qwebphandler.cpp
+++ b/src/plugins/imageformats/webp/qwebphandler.cpp
@@ -76,7 +76,11 @@ bool QWebpHandler::ensureScanned() const
     // We do no random access during decoding, just a readAll() of the whole image file. So if
     // if it is all available already, we can accept a sequential device. The riff header contains
     // the file size minus 8 bytes header
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
     qint64 byteSize = qFromLittleEndian<quint32>(header.constData() + 4);
+#else
+    qint64 byteSize = qFromLittleEndian<quint32>(reinterpret_cast<const uchar *>(header.constData() + 4));
+#endif
     if (device()->isSequential() && device()->bytesAvailable() < byteSize + 8) {
         qWarning() << "QWebpHandler: Insufficient data available in sequential device";
         return false;
@@ -89,10 +93,14 @@ bool QWebpHandler::ensureScanned() const
                 that->m_frameCount = WebPDemuxGetI(m_demuxer, WEBP_FF_FRAME_COUNT);
                 that->m_bgColor = QColor::fromRgba(QRgb(WebPDemuxGetI(m_demuxer, WEBP_FF_BACKGROUND_COLOR)));
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
                 QSize sz(that->m_features.width, that->m_features.height);
                 that->m_composited = new QImage;
                 if (!QImageIOHandler::allocateImage(sz, QImage::Format_ARGB32, that->m_composited))
                     return false;
+#else
+                that->m_composited = new QImage(that->m_features.width, that->m_features.height, QImage::Format_ARGB32);
+#endif
                 if (that->m_features.has_alpha)
                     that->m_composited->fill(Qt::transparent);
 
@@ -161,11 +169,19 @@ bool QWebpHandler::read(QImage *image)
         return false;
 
     QImage::Format format = m_features.has_alpha ? QImage::Format_ARGB32 : QImage::Format_RGB32;
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     QImage frame;
     if (!QImageIOHandler::allocateImage(QSize(m_iter.width, m_iter.height), format, &frame))
         return false;
+#else
+    QImage frame(m_iter.width, m_iter.height, format);
+#endif
     uint8_t *output = frame.bits();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
     size_t output_size = frame.sizeInBytes();
+#else
+    size_t output_size = frame.byteCount();
+#endif
 #if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
     if (!WebPDecodeBGRAInto(
         reinterpret_cast<const uint8_t*>(m_iter.fragment.bytes), m_iter.fragment.size,
@@ -215,7 +231,11 @@ bool QWebpHandler::write(const QImage &image)
 
     QImage srcImage = image;
     bool alpha = srcImage.hasAlphaChannel();
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
     QImage::Format newFormat = alpha ? QImage::Format_RGBA8888 : QImage::Format_RGB888;
+#else
+    QImage::Format newFormat = alpha ? QImage::Format_ARGB32 : QImage::Format_RGB32;
+#endif
     if (srcImage.format() != newFormat)
         srcImage = srcImage.convertToFormat(newFormat);
 
@@ -231,10 +251,22 @@ bool QWebpHandler::write(const QImage &image)
     picture.height = srcImage.height();
     picture.use_argb = 1;
     bool failed = false;
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
     if (alpha)
         failed = !WebPPictureImportRGBA(&picture, srcImage.bits(), srcImage.bytesPerLine());
     else
         failed = !WebPPictureImportRGB(&picture, srcImage.bits(), srcImage.bytesPerLine());
+#else
+# if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
+    if (alpha)
+        failed = !WebPPictureImportBGRA(&picture, srcImage.bits(), srcImage.bytesPerLine());
+    else
+        failed = !WebPPictureImportBGRX(&picture, srcImage.bits(), srcImage.bytesPerLine());
+# else /* Q_BIG_ENDIAN */
+    qWarning() << "QWebpHandler::write is not implemented for big endian systems with Qt < 5.2";
+    failed = true;
+# endif
+#endif
 
     if (failed) {
         qWarning() << "failed to import image data to webp picture.";
-- 
2.30.2

