From 19f3666f4eafb7e0a059301f6b8fb51d0089f8ea Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Sun, 28 Nov 2021 20:18:16 +0700
Subject: [PATCH 2/3] Fix build with MinGW 3.4.2

---
 src/decoders/crx.cpp       | 4 +++-
 src/utils/utils_libraw.cpp | 9 +++++++++
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/decoders/crx.cpp b/src/decoders/crx.cpp
index 30a70205..63c23589 100644
--- a/src/decoders/crx.cpp
+++ b/src/decoders/crx.cpp
@@ -39,7 +39,9 @@ it under the terms of the one of two licenses as you choose:
 #define CRX_BUF_SIZE 0x10000
 #if !defined(_WIN32) || (defined(__GNUC__) && !defined(__INTRINSIC_SPECIAL__BitScanReverse))
 /* __INTRINSIC_SPECIAL__BitScanReverse found in MinGW32-W64 v7.30 headers, may be there is a better solution? */
+#if !defined(_WIN32)
 typedef uint32_t DWORD;
+#endif
 libraw_inline void _BitScanReverse(DWORD *Index, unsigned long Mask)
 {
   *Index = sizeof(unsigned long) * 8 - 1 - __builtin_clzl(Mask);
@@ -47,7 +49,7 @@ libraw_inline void _BitScanReverse(DWORD *Index, unsigned long Mask)
 #if LibRawBigEndian
 #define _byteswap_ulong(x) (x)
 #else
-#define _byteswap_ulong(x) __builtin_bswap32(x)
+#define _byteswap_ulong(x) ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >>  8) | (((x) & 0x0000ff00) <<  8) | (((x) & 0x000000ff) << 24))
 #endif
 #endif
 
diff --git a/src/utils/utils_libraw.cpp b/src/utils/utils_libraw.cpp
index 15a7b655..f608af04 100644
--- a/src/utils/utils_libraw.cpp
+++ b/src/utils/utils_libraw.cpp
@@ -290,6 +290,8 @@ void LibRaw::clearCancelFlag()
 {
 #ifdef _MSC_VER
   InterlockedExchange(&_exitflag, 0);
+#elif defined (__GNUC__) && (__GNUC__ < 4) && defined (LIBRAW_NOTHREADS)
+  _exitflag = 0;
 #else
   __sync_fetch_and_and(&_exitflag, 0);
 #endif
@@ -307,6 +309,8 @@ void LibRaw::setCancelFlag()
 {
 #ifdef _MSC_VER
   InterlockedExchange(&_exitflag, 1);
+#elif defined (__GNUC__) && (__GNUC__ < 4) && defined (LIBRAW_NOTHREADS)
+  ++_exitflag;
 #else
   __sync_fetch_and_add(&_exitflag, 1);
 #endif
@@ -325,6 +329,11 @@ void LibRaw::checkCancel()
 #ifdef _MSC_VER
   if (InterlockedExchange(&_exitflag, 0))
     throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;
+#elif defined (__GNUC__) && (__GNUC__ < 4) && defined (LIBRAW_NOTHREADS)
+  long exitflag = 0;
+  std::swap(exitflag, _exitflag);
+  if (exitflag)
+    throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;
 #else
   if (__sync_fetch_and_and(&_exitflag, 0))
     throw LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK;
-- 
2.30.2

