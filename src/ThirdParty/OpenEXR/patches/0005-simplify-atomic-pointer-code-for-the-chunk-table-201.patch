From 069e272b9c700aaedc5f578842974ad81b7c7e42 Mon Sep 17 00:00:00 2001
From: Kimball Thurston <kdt3rd@gmail.com>
Date: Wed, 2 Apr 2025 03:44:25 +1300
Subject: [PATCH 5/5] simplify atomic pointer code for the chunk table (#2013)

* simplify atomic pointer code for the chunk table

Signed-off-by: Kimball Thurston <kdt3rd@gmail.com>

* remove out-dated comment

Signed-off-by: Kimball Thurston <kdt3rd@gmail.com>

---------

Signed-off-by: Kimball Thurston <kdt3rd@gmail.com>
(cherry picked from commit 5a675d69d3dcac4b0dc680221fb05b7835f5788c)
---
 src/lib/OpenEXRCore/chunk.c            | 40 ++------------------------
 src/lib/OpenEXRCore/internal_structs.h | 32 +++++++++++++++++++--
 2 files changed, 31 insertions(+), 41 deletions(-)

diff --git a/src/lib/OpenEXRCore/chunk.c b/src/lib/OpenEXRCore/chunk.c
index ec3ed777..41d46efd 100644
--- a/src/lib/OpenEXRCore/chunk.c
+++ b/src/lib/OpenEXRCore/chunk.c
@@ -16,42 +16,6 @@
 
 /**************************************/
 
-/* for testing, we include a bunch of internal stuff into the unit tests which are in c++ */
-/* see internal_structs.h for details on the msvc guard. */
-#if !defined(_MSC_VER)
-#    if defined __has_include
-#        if __has_include(<stdatomic.h>)
-#            define EXR_HAS_STD_ATOMICS 1
-#        endif
-#    endif
-#endif
-
-#ifdef EXR_HAS_STD_ATOMICS
-#    include <stdatomic.h>
-#elif defined(_MSC_VER)
-
-/* msvc w/ c11 support is only very new, until we know what the preprocessor checks are, provide defaults */
-#    include <windows.h>
-
-#    define atomic_load(object) InterlockedOr64 ((int64_t volatile*) object, 0)
-
-static inline int
-atomic_compare_exchange_strong (
-    uint64_t volatile* object, uint64_t* expected, uint64_t desired)
-{
-    uint64_t prev =
-        (uint64_t) InterlockedCompareExchange64 (object, desired, *expected);
-    if (prev == *expected) return 1;
-    *expected = prev;
-    return 0;
-}
-
-#else
-#    error OS unimplemented support for atomics
-#endif
-
-/**************************************/
-
 exr_result_t extract_chunk_table (
     exr_const_context_t   ctxt,
     exr_const_priv_part_t part,
@@ -565,7 +529,7 @@ extract_chunk_table (
     if (ctable == NULL)
     {
         int64_t      nread = 0;
-        uint64_t     eptr = 0, nptr = 0;
+        uintptr_t    eptr = 0, nptr = 0;
         int          complete = 1;
         uint64_t     maxoff   = ((uint64_t) -1);
         exr_result_t rv;
@@ -639,7 +603,7 @@ extract_chunk_table (
         }
         else { priv_to_native64 (ctable, part->chunk_count); }
 
-        nptr = (uint64_t) ctable;
+        nptr = (uintptr_t) ctable;
         // see if we win or not
         if (!atomic_compare_exchange_strong (
                 EXR_CONST_CAST (atomic_uintptr_t*, &(part->chunk_table)),
diff --git a/src/lib/OpenEXRCore/internal_structs.h b/src/lib/OpenEXRCore/internal_structs.h
index f26fe741..888aadba 100644
--- a/src/lib/OpenEXRCore/internal_structs.h
+++ b/src/lib/OpenEXRCore/internal_structs.h
@@ -53,10 +53,36 @@ using atomic_uintptr_t = std::atomic_uintptr_t;
 #        include <stdatomic.h>
 #    elif defined(_MSC_VER)
 /* msvc w/ c11 support is only very new, until we know what the preprocessor checks are, provide defaults */
+#        include <stdint.h>
 #        include <windows.h>
-/* yeah, yeah, might be a 32-bit pointer, but if we make it the same, we
- * can write less since we know support is coming (eventually) */
-typedef uint64_t atomic_uintptr_t;
+typedef uintptr_t volatile atomic_uintptr_t;
+
+static inline uintptr_t
+atomic_load (
+    uintptr_t volatile* object)
+{
+#        if UINTPTR_MAX == 0xFFFFFFFF
+    return (uintptr_t) InterlockedOr (object, 0);
+#        else
+    return (uintptr_t) InterlockedOr64 (object, 0);
+#        endif
+}
+
+static inline int
+atomic_compare_exchange_strong (
+    uintptr_t volatile* object, uintptr_t* expected, uintptr_t desired)
+{
+#        if UINTPTR_MAX == 0xFFFFFFFF
+    uintptr_t prev =
+        (uintptr_t) InterlockedCompareExchange (object, desired, *expected);
+#        else
+    uintptr_t prev =
+        (uintptr_t) InterlockedCompareExchange64 (object, desired, *expected);
+#        endif
+    if (prev == *expected) return 1;
+    *expected = prev;
+    return 0;
+}
 #    else
 #        error OS unimplemented support for atomics
 #    endif
-- 
2.49.0

