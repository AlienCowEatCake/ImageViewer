'\" t
.\" SPDX-License-Identifier: 0BSD
.\"
.\" Authors: Lasse Collin
.\"          Jia Tan
.\"
.\" Serbian translation of xz-man.
.\" Мирослав Николић <miroslavnikolic@rocketmail.com>, 2025.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH XZ 1 2025\-03\-08 Tukaani "XZ Utils"
.
.SH НАЗИВ
xz, unxz, xzcat, lzma, unlzma, lzcat – Запакује или распакује „.xz“ и „.lzma
датотеке
.
.SH САЖЕТАК
\fBxz\fP [\fIопција...\fP] [\fIдатотека...\fP]
.
.SH "АЛИЈАСИ НАРЕДБЕ"
\fBunxz\fP је исто као и \fBxz \-\-decompress\fP.
.br
\fBxzcat\fP је исто као и \fBxz \-\-decompress \-\-stdout\fP.
.br
\fBlzma\fP је исто као и \fBxz \-\-format=lzma\fP.
.br
\fBunlzma\fP је исто као и \fBxz \-\-format=lzma \-\-decompress\fP.
.br
\fBlzcat\fP је исто као и \fBxz \-\-format=lzma \-\-decompress \-\-stdout\fP.
.PP
Приликом писања скрипти које треба да распакују датотеке, препоручује се да
се увек користи назив \fBxz\fP са одговарајућим аргументима (\fBxz \-d\fP или \fBxz \-dc\fP) уместо назива \fBunxz\fP и \fBxzcat\fP.
.
.SH ОПИС
\fBxz\fP је алат опште употребе за запакивање података са синтаксом линије
наредби сличан као \fBgzip\fP(1)  и \fBbzip2\fP(1).  Изворни формат датотеке је
\&\fB.xz\fP формат, али стари \fB.lzma\fP формат који користи LZMA Utils и сирови
запаковани токови без заглавља формата су такође подржани.  Уз то,
распакивање \fB.lz\fP формата који користи \fBlzip\fP је подржано.
.PP
\fBxz\fP запакује или распакује сваку \fIдатотеку\fP у складу са изабраним режимом
рада.  Ако није дата ни једна \fIдатотека\fP или је датотека \fIfile\fP \fB\-\fP,
\fBxz\fP чита са стандардног улаза и записује обрађене податке на стандардни
излаз.  \fBxz\fP ће одбити (приказаће грешку и прескочити \fIдатотеку\fP) да пише
запаковане податке на стандардни излаз ако је то терминал.  Слично, \fBxz\fP ће
одбити да чита запаковане податке са стандардног улаза ако је то терминал.
.PP
Осим ако није наведено \fB\-\-stdout\fP, \fIдатотеке\fP које нису \fB\-\fP се пишу у
нову датотеку чији назив је проистекао из назива изворне \fIдатотеке\fP:
.IP \(bu 3
Приликом запакивања, суфикс формата циљне датотеке (\fB.xz\fP или \fB.lzma\fP) се
додаје на назив изворне датотеке да би се добио назив циљне датотеке.
.IP \(bu 3
Приликом распакивања, суфикс \fB.xz\fP, \fB.lzma\fP или \fB.lz\fP се уклања из назива
датотеке да би се добио назив циљне датотеке.  \fBxz\fP такође препознаје
суфиксе \fB.txz\fP и \fB.tlz\fP и замењује их суфиксом \fB.tar\fP.
.PP
Ако циљна датотека већ пстоји, приказује се грешка а \fIдатотека\fP се
прескаче.
.PP
Осим ако не пише на стандардни излаз, \fBxz\fP ће приказати упозорење и
прескочити \fIдатотеку\fP ако се нешто од следећег примењује:
.IP \(bu 3
\fIДатотека\fP није обична датотека.  Симболичке везе се не прате, и стога се
не сматра да су обичне датотеке.
.IP \(bu 3
\fIДатотека\fP има више од једне чврсте везе.
.IP \(bu 3
\fIДатотека\fP има постављен „setuid, setgid“ или лепљиви бит.
.IP \(bu 3
Режим рада је постављен на запакивање а \fIдатотека\fP већ има суфикс формата
циљне датотеке (\fB.xz\fP или \fB.txz\fP приликом запакивања у \fB.xz\fP формат, а
\&\fB.lzma\fP или \fB.tlz\fP приликом запакивања у \fB.lzma\fP формат).
.IP \(bu 3
Режим радње је постављен за распакивање а \fIдатотека\fP нема суфикс ни једног
од подржаних формата датотеке (\fB.xz\fP, \fB.txz\fP, \fB.lzma\fP, \fB.tlz\fP или
\&\fB.lz\fP).
.PP
Након успешног сажимања или распакивања \fIдатотеке\fP, \fBxz\fP умножава
власника, групу, дозволе, време приступа и време измене из изворне
\fIдатотеке\fP у циљну датотеку.  Ако умножавање групе не успе, дозволе су
измењене тако да циљна датотека не постане доступна корисницима који нису
имали дозволу за приступ изворној \fIдатотеци\fP. \fBxz\fP не подржава умножавање
других метаподатака попут списка контрола приступа или проширених атрибута.
.PP
Једном када је циљна датотека успешно затворена, изворна \fIдатотека\fP се
уклања осим ако се \fB\-keep\fP не наведе. Изворна \fIдатотека\fP се никада не
уклања ако се излаз пише на стандардни излаз или ако дође до грешке.
.PP
Слање \fBSIGINFO\fP или \fBSIGUSR1\fP ка \fBxz\fP процесу чини да испише информације
напредовања на стандардну грешку.  Ово има ограничено коришћење све док
стандардна грешка јесте терминал, коришћење \fB\-\-verbose\fP приказаће
аутоматски указивач напретка освежавања.
.
.SS "Коришћење меморије"
Коришћење меморије \fBxz\fP се мења од неколико стотина килобајта до неколико
гигабајта у зависности од поставки запакивања.  Поставке коришћене приликом
запакивања датотеке одређују захтеве меморије распакивача.  Обично
распакивачу треба 5\ % до 20\ % количине меморије која је потребна
запакивачу приликом прављења датотеке.  На пример, распакивање датотеке
направљене са \fBxz \-9\fP тренутно захтева 65\ MiB меморије.  Још увек, могуће
је имати \fB.xz\fP датотеке које захтевају неколико гигабајта меморије за
распакивање.
.PP
Нарочито корисници старијих система могу наћи досадном могућност коришћења
врло велике меморије.  Да би се спречила нежељена изненађења, \fBxz\fP има
уграђен ограничавач коришћења меморије, који је искључен по основи.  Док
неки оперативни системи пружају начин за ограничавање коришћење меморије за
процесе, ослањање на то сматра се да није довољно прилагодљиво (на пример,
коришћење \fBulimit\fP(1) за ограничавање виртуелне меморије тежи да обогаљи
\fBmmap\fP(2)).
.PP
.\" TRANSLATORS: Don't translate the uppercase XZ_DEFAULTS.
.\" It's a name of an environment variable.
Ограничавач коришћења меморије се може укључити опцијом линије наредби
\fB\-\-memlimit=\fP\fIограничење\fP.  Често је најпогодније укључити ограничавач по
основи постављањем променљиве окружења \fBXZ_DEFAULTS\fP, на пример,
\fBXZ_DEFAULTS=\-\-memlimit=150MiB\fP.  Могуће је поставити ограничења засебно за
запакивање и распакивање коришћењем \fB\-\-memlimit\-compress=\fP\fIограничење\fP и
\fB\-\-memlimit\-decompress=\fP\fIограничење\fP.  Коришћење ове две опције ван
\fBXZ_DEFAULTS\fP је ретко корисно јер једно покретање \fBxz\fP не може да ради и
запакивање и распакивање а \fB\-\-memlimit=\fP\fIограничење\fP (или \fB\-M\fP
\fIограничење\fP) је краће за куцање на линији наредби.
.PP
Ако је прекорачено наведено ограничење коришћења меморије, \fBxz\fP ће
приказати грешку а распакивање датотеке неће успети.  Ако је ограничење
прекорачено приликом запакивања, \fBxz\fP ће покушати да умањи поставке тако да
се ограничење више не прекорачује (оси када се користи \fB\-\-format=raw\fP или
\fB\-\-no\-adjust\fP).  На тај начин радња неће бити неуспешна осим ако је
ограничење врло мало.  Смањење поставке се ради у корацима који се не
подударају са предподешеностима нивоа запакивања, на пример, ако је
ограничење само незнатно мање од износа потребног за \fBxz \-9\fP, поставке ће
бити смањене само мало, а не све до \fBxz \-8\fP.
.
.SS "Надовезивање и попуњавање са „.xz“ датотекама"
Могуће је додати \fB.xz\fP датотеке као то.  \fBxz\fP ће распаковати такве
датотеке као да су биле једна \fB.xz\fP датотека.
.PP
Могуће је уметнути попуњавање између придодатих делова или након последњег
дела.  Попуњавање мора да се састоји од празних бајтова а величина
попуњавања мора бити умножак четири бајта.  Ово може бити корисно, на
пример, ако је \fB.xz\fP датотека смештена на медијуму који мери величине
датотека у блоковима од 512 бајтова.
.PP
Надовезивање и попуњавање нису дозвољени са \fB.lzma\fP датотекама или сировим
токовима.
.
.SH ОПЦИЈЕ
.
.SS "Суфикси целог броја и специјалне вредности"
На већини места где се очекује аргумент целог броја, опционални суфикс је
подржан да би се лако назначили велики цели бројеви. Не сме бити размака
између целог броја и суфикса.
.TP 
\fBKiB\fP
Множи цео број са 1.024 (2^10).  \fBKi\fP, \fBk\fP, \fBkB\fP, \fBK\fP, и \fBKB\fP се
прихватају као синоними за \fBKiB\fP.
.TP 
\fBMiB\fP
Множи цео број са 1.048.576 (2^20).  \fBMi\fP, \fBm\fP, \fBM\fP, и \fBMB\fP се
прихватају као синоними за \fBMiB\fP.
.TP 
\fBGiB\fP
Множи цео број са 1.073.741.824 (2^30).  \fBGi\fP, \fBg\fP, \fBG\fP, и \fBGB\fP се
прихватају као синоними за \fBGiB\fP.
.PP
Посебна вредност \fBmax\fP се може користити да укаже на највећу вредност целог
броја подржану опцијом.
.
.SS "Режим рада"
Ако је дато више опција режима рада, последња има дејства.
.TP 
\fB\-z\fP, \fB\-\-compress\fP
Запакује.  Ово је основни режим радње када није наведена опција режима радње
и ниједан други режим радње се не подразумева са линије радње (на пример,
\fBunxz\fP подразумева \fB\-\-decompress\fP).
.IP ""
.\" The DESCRIPTION section already says this but it's good to repeat it
.\" here because the default behavior is a bit dangerous and new users
.\" in a hurry may skip reading the DESCRIPTION section.
Након успешног запакивања, изворна датотека се уклања осим ако се не пише на
стандардни излаз или је наведено \fB\-\-keep\fP.
.TP 
\fB\-d\fP, \fB\-\-decompress\fP, \fB\-\-uncompress\fP
.\" The DESCRIPTION section already says this but it's good to repeat it
.\" here because the default behavior is a bit dangerous and new users
.\" in a hurry may skip reading the DESCRIPTION section.
Распакује.  Након успешног распакивања, изворна датотека се уклања осим ако
се не пише на стандардни излаз или је наведено \fB\-\-keep\fP.
.TP 
\fB\-t\fP, \fB\-\-test\fP
Тестира целовитост запакованих \fIдатотека\fP.  Ова опција је исто што и
\fB\-\-decompress \-\-stdout\fP осим тога што се распаковани подаци одбацују уместо
да се пишу на стандардни излаз.  Датотеке се не праве нити уклањају.
.TP 
\fB\-l\fP, \fB\-\-list\fP
Исписује информације о запакованим \fIдатотекама\fP.  Никакав незапакован излаз
се не добија, а ниједна датотека није направљена или уклоњена.  У режиму
списка, програм не може читати запаковане податке са стандардног улаза или
из других нетраживих извора.
.IP ""
Основни списак приказује основне информације о \fIдатотекама\fP, једна датотека
у једном реду.  Да добијете подробније информације, користите такође опцију
\fB\-\-verbose\fP.  За чак и више информација, користите \fB\-\-verbose\fP два пуа,
али знајте да то може бити споро, јер да би се добиле све додатне
информације потребно је много тражења.  Ширина опширног излаза премашује 80
знакова, тако да преспајање излаза на, на пример, \fBless\ \-S\fP може бити
прикладно ако терминал није довољно широк.
.IP ""
Тачан излаз може варирати између \fBxz\fP издања и различитих језика.  За излаз
читљив машинама треба да користите \fB\-\-robot \-\-list\fP.
.
.SS "Измењивачи рада"
.TP 
\fB\-k\fP, \fB\-\-keep\fP
Не брише улазне датотеке.
.IP ""
Од \fBxz\fP 5.2.6, ова опција такође чини да \fBxz\fP запакује или распакује чак и
ако је улаз симболичка веза ка обичној датотеци, има више од једне чврсте
везе или има постављен „setuid“, „setgid“ или лепљиви бит.  „setuid“,
„setgid“ и лепљиви битови се не умножавају у циљну датотеку.  У ранијим
издањима ово се могло урадити само са \fB\-\-force\fP.
.TP 
\fB\-f\fP, \fB\-\-force\fP
Ова опција има неколико дејстава:
.RS
.IP \(bu 3
Ако циљна датотека већ постоји, брише је пре запакивања или распакивања.
.IP \(bu 3
Запакује или распакује чак и ако је улаз симболичка веза ка обичној
датотеци, има више од једне чврсте везе или има постављен „setgid“, „setgid“
или лепљиви бит.  „setgid“, „setgid“ или лепљиви бит се не умножавају у
циљну датотеку.
.IP \(bu 3
Када се користи са \fB\-\-decompress\fP \fB\-\-stdout\fP и \fBxz\fP не може да препозна
врсту изворне датотеке, умножава изворну датотеку као такву на стандардни
излаз.  Ово омогућава да се \fBxzcat\fP \fB\-\-force\fP користи као \fBcat\fP(1) за
датотекекоје нису запаковане са \fBxz\fP.  Знајте да ће у будућности, \fBxz\fP
моћи да подржава нове формате запаковане датотеке, који могу учинити да
\fBxz\fP распакује још врста датотека уместо да их умножи какве јесу на
стандардни излаз.  \fB\-\-format=\fP\fIформат\fP се може користити да ограничи \fBxz\fP
да распакује само формат једне датотеке.
.RE
.TP 
\fB\-c\fP, \fB\-\-stdout\fP, \fB\-\-to\-stdout\fP
Пише запаковане или распаковане податке на стандардни излаз уместо у
датотеку,  Ово подразумева \fB\-\-keep\fP.
.TP 
\fB\-\-single\-stream\fP
Распакује само први \fB.xz\fP ток, и тихо занемарује могуће преостале улазне
податке који следе ток.  Нормално такво пратеће смеће чини да \fBxz\fP прикаже
грешку.
.IP ""
\fBxz\fP никада не распакује више од једног тока из \fB.lzma\fP датотека или
сирових токова, али ова опција чини да \fBxz\fP још увек занемари могуће
пратеће податке након \fB.lzma\fP датотеке или сировог тока.
.IP ""
Ова опција нема дејства ако режим рада није \fB\-\-decompress\fP или \fB\-\-test\fP.
.IP ""
Од \fBxz\fP 5.7.1alpha, \fB\-\-single\-stream\fP подразумева \fB\-\-keep\fP.
.TP 
\fB\-\-no\-sparse\fP
Искључује стварање развучених датотека. По основи, ако распакује у обичну
датотеку, \fBxz\fP покушава да учини датотеку развученом ако распаковани подаци
садрже дуге низове бинарних нула.  Такође ради приликом писања на стандардни
излаз све док је стандардни излаз повезан са обичном датотеком а одређени
додатни услови су испуњени да је учине безбедном.  Стварање развучених
датотека може уштедети простор на диску и убрзати распакивање смањењем
количине У/И диска.
.TP 
\fB\-S\fP \fI.suf\fP, \fB\-\-suffix=\fP\fI.suf\fP
Приликом запакивања, користите \fI.suf\fP као суфикс за циљну датотеку уместо
\&\fB.xz\fP или \fB.lzma\fP.  Ако се не пише на стандардни излаз а изворна датотека
већ има суфикс \fI.suf\fP, приказује се упозорење и датотека се прескаче.
.IP ""
Приликом распакивања, препознаје датотеке са суфиксом \fI.suf\fP поред датотека
са суфиксом \fB.xz\fP, \fB.txz\fP, \fB.lzma\fP, \fB.tlz\fP, or \fB.lz\fP.  Ако изворна
датотека има суфикс \fI.suf\fP, суфикс се уклања да би се добио назив циљне
датотеке.
.IP ""
Приликом запакивања или распакивања сирових токова (\fB\-\-format=raw\fP), суфикс
мора увек бити наведен осим ако се не пише на стандардни излаз, јер не
постоји основни суфикс за сирове токове.
.TP 
\fB\-\-files\fP[\fB=\fP\fIдатотека\fP]
Чита називе датотека за обраду из \fIдатотеке\fP; ако се \fIдатотека\fP изостави,
називи датотека се читају са стандардног улаза. Називи датотека се морају
завршавати знаком новог реда. Цртица (\fB\-\fP) се узима као редован назив
датотеке; а не стандардни улаз.  Ако су називи датотека дати такође као
аргументи линије наредби, обрађују се пре него што се називи датотека
прочитају из \fIдатотеке\fP.
.TP 
\fB\-\-files0\fP[\fB=\fP\fIдатотека\fP]
Ово је исто као и \fB\-\-files\fP[\fB=\fP\fIдатотека\fP] изузев тога што сваки назив
датотеке мора да се завршава „null“ знаком.
.
.SS "Основни формат датотеке и опције запакивања"
.TP 
\fB\-F\fP \fIформат\fP, \fB\-\-format=\fP\fIформат\fP
Наводи \fIформат\fP датотеке за запакивање или распакивање:
.RS
.TP 
.\" TRANSLATORS: Don't translate bold string B<auto>.
\fBauto\fP
Ово је основно.  Приликом запакивања, \fBauto\fP је исто што и \fBxz\fP.  Приликом
распакивања, формат улазне датотеке се аутоматски препознаје.  Знајте да
сирови токови (направљени са \fB\-\-format=raw\fP) не могу бити аутоматски
препознати.
.TP 
\fBxz\fP
Пакује у \fB.xz\fP формат датотеке, или прихвата само \fB.xz\fP датотеке приликом
распакивања.
.TP 
\fBlzma\fP, \fBalone\fP
Пакује у стари \fB.lzma\fP формат датотеке, или прихвата само \fB.lzma\fP датотеке
приликом распакивања.  Алтернативни назив \fBalone\fP се доставља зарад
повратне сагласности са LZMA помагалима.
.TP 
\fBlzip\fP
Прихвата само \fB.lz\fP датотеке приликом распакивања.  Запакивање није
подржано.
.IP ""
Формат \fB.lz\fP издање 0 и непроширено издање 1 су подржани.  Датотеке издања
0 су настале са \fBlzip\fP 1.3 и старијим.  Такве датотеке нису уобичајене али
се могу наћи у архивама датотека јер је неколико пакета извора издато у овом
формату.  Такође можда неко има старе личне датотеке у овом формату.
Подршка распакивања за формат издања 0 је уклоњена у \fBlzip\fP 1.18.
.IP ""
\fBlzip\fP 1.4 и новији праве датотеке у формату издања 1.  Проширење
означавача испирања усклађивања за формат издања 1 додато је у \fBlzip\fP 1.6.
Ово проширење се ретко користи и не подржава га \fBxz\fP (препознаје се као
оштећени улаз).
.TP 
\fBraw\fP
Запакује или распакује сирови ток (без заглавља).  Ово је замишљено само за
напредне кориснике.  Да дешифрујете сирове токове, треба да користите
\fB\-\-format=raw\fP и да изричито наведете ланац филтера, што би обично требало
да буде смештено у заглављима контејнера.
.RE
.TP 
\fB\-C\fP \fIпровера\fP, \fB\-\-check=\fP\fIпровера\fP
Наводи врсту провере целовитости.  Провера се израчунава из незапакованих
података и смештених у \fB.xz\fP датотеци.  Ова опција има дејства само
приликом запакивања у \fB.xz\fP формат; \fB.lzma\fP формат не подржава провере
целовитости.  Провера целовитости (ако је има) се проверава када је \fB.xz\fP
датотека распакована.
.IP ""
Подржане врсте \fIпровере\fP:
.RS
.TP 
.\" TRANSLATORS: Don't translate the bold strings B<none>, B<crc32>,
.\" B<crc64>, and B<sha256>. The command line option --check accepts
.\" only the untranslated strings.
\fBnone\fP
Уопште не израчунава проверу целовитости.  Ово је обично лоша идеја.  Ово
може бити корисно када се целовитост података ипак проверава на друге
начине.
.TP 
\fBcrc32\fP
Израчунава CRC32 користећи полином из IEEE\-802.3 (Етернет).
.TP 
\fBcrc64\fP
Израчунава CRC64 користећи полином из ECMA\-182.  Ово је основно, јер је
незнатно боље од CRC32 у откривању оштећених датотека а разлика брзине је
занемарљива.
.TP 
\fBsha256\fP
Израчунава SHA\-256.  Ово је нешто спорије од CRC32 и CRC64.
.RE
.IP ""
Целовитост \fB.xz\fP заглавља се увек проверава са CRC32.  Не може се изменити
нити искључити.
.TP 
\fB\-\-ignore\-check\fP
Не проверава проверу целовитости запакованих података приликом распакивања.
CRC32 вредности у \fB.xz\fP заглављима биће још увек нормално проверене.
.IP ""
\fBНемојте користити ову опцију осим ако стварно знате шта радите.\fP Могући
разлози за коришћење ове опције:
.RS
.IP \(bu 3
Покушава да опорави податке из оштећене „.xz“ датотеке.
.IP \(bu 3
Убрзава распакивање.  Ово има значаја углавном са SHA\-256 или са датотекама
које су запаковане стварно добро.  Препоручује се да не користите ову опцију
за ову сврху осим ако је целовитост датотеке проверена споља на неки други
начин.
.RE
.TP 
\fB\-0\fP ... \fB\-9\fP
Бира ниво преподешености запакивања.  Подразумевано је \fB\-6\fP. Ако је
наведено више нивоа преподешености, последња има дејства.  Ако је произвољни
ланац филтера већ наведен, постављање нивоа преподешености запакивања уклања
произвољни ланац филтера.
.IP ""
Разлике између предподешености су још значајније него са \fBgzip\fP(1) и
\fBbzip2\fP(1).  Изабране поставке запакивања одређују захтеве меморије
распакивача, стога коришћење превисоког нивоа предподешености може отежати
распакивање датотеле на старом систему са мало RAM\-а.  Нарочито, \fBније добра замисао слепо користити \-9 за било шта\fP као што је често са \fBgzip\fP(1)
и \fBbzip2\fP(1).
.RS
.TP 
\fB\-0\fP ... \fB\-3\fP
Ово су некако брзе предподешености.  \fB\-0\fP је понекад брже од \fBgzip \-9\fP док
запакује много боље.  Оне више често имају брзину упоредиву са \fBbzip2\fP(1)
са упоредивом или бољом стопом запакивања, иако резултати зависе много од
врсте података који се запакују.
.TP 
\fB\-4\fP ... \fB\-6\fP
Добро до врло добро запакивање које одржава коришћење меморије распакивача
разумним чак и за старе системе.  \fB\-6\fP је основно, што је обично добар
избор за расподелу датотека које треба да могу да се распакују чак и на
системима са само 16\ MiB RAM\-а.  (\fB\-5e\fP или \fB\-6e\fP може бити вредно
узимања у обзир.  Видите \fB\-\-extreme\fP.)
.TP 
\fB\-7 ... \-9\fP
Као \fB\-6\fP али са већим захтевима меморије запакивача и распакивача.  Корисне
су само приликом запакивања датотека већих од 8\ MiB, 16\ MiB и 32\ MiB.
.RE
.IP ""
На истом хардверу, брзина распакивања је приближно сталан број бајтова
запакованих података у секунди.  Другим речима, биће боље запакивање, брже
распакивање.  То такође значи да количина незапакованог излаза произведеног
у секунди може много да се разликује.
.IP ""
Следећа табела резимира функције предподешености:
.RS
.RS
.PP
.TS
tab(;);
c c c c c
n n n n n.
Преподешеност;ВлчРчнка;ЗапакЦПЈ;ЗапакМем;РаспМем
\-0;256 KiB;0;3 MiB;1 MiB
\-1;1 MiB;1;9 MiB;2 MiB
\-2;2 MiB;2;17 MiB;3 MiB
\-3;4 MiB;3;32 MiB;5 MiB
\-4;4 MiB;4;48 MiB;5 MiB
\-5;8 MiB;5;94 MiB;9 MiB
\-6;8 MiB;6;94 MiB;9 MiB
\-7;16 MiB;6;186 MiB;17 MiB
\-8;32 MiB;6;370 MiB;33 MiB
\-9;64 MiB;6;674 MiB;65 MiB
.TE
.RE
.RE
.IP ""
Описи колона:
.RS
.IP \(bu 3
ВлчРчнка је величина LZMA2 речника.  Коришћење речника већег од величине
незапаковане датотеке је губитак меморије.  Зато је добро избегавати
коришћење предподешености \fB\-7\fP ... \fB\-9\fP када за њима нема стварне
потребе.  Са \fB\-6\fP и нижим, количина изгубљене меморије је обично довољно
ниска да нема значаја.
.IP \(bu 3
ЗапакЦПЈ је поједностављено представљање LZMA2 поставки које утичу на брзину
запакивања.  Величина речника такође утиче на брзину, тако док је ЗапакЦПЈ
исто за нивое \fB\-6\fP ... \fB\-9\fP, виши нивои још увек теже да буду спорији.  Да
добијете још спорије и самим тим можда боље запакивање, видите \fB\-\-extreme\fP.
.IP \(bu 3
ЗапакМем садржи захтеве меморије запакивача у режиму једне нити.  Може
незнатно да се разликује између \fBxz\fP издања.
.IP \(bu 3
РаспМем садржи захтеве меморије распакивача.  Тако је, поставке запакивања
одређују захтеве меморије распакивача.  Тачно коришћење меморије распакивача
је незнатно веће од величине LZMA2 речника, али су вредности у табели
заокружене на следећи цео MiB.
.RE
.IP ""
Захтеви меморије режима са више нити су значајно већи него ли режима једне
нити.  Са основном вредношћу \fB\-\-block\-size\fP, свакој нити треба 3*3*ВлчРчнка
плус ЗапакМем или РаспМем.  На пример, за четири нити са предподешавањем
\fB\-6\fP потребно је 660\(en670\ MiB меморије.
.TP 
\fB\-e\fP, \fB\-\-extreme\fP
Користите спорију варијанту изабраног нивоа предподешености запакивања
(\fB\-0\fP ... \fB\-9\fP) у нади да ћете добити мало бољу стопу запакивања, али уз
лошу срећу ово је може учинити гором.  Не утиче на коришћење меморије
распакивача, али се коришћење меморије запакивача мало повећава на нивоима
предподешености \fB\-0\fP ... \fB\-3\fP.
.IP ""
Како постоје две предподешености са величинама речника од 4\ MiB и 8\ MiB,
предподешености \fB\-3e\fP и \fB\-5e\fP користе незнатно брже поставке (ниже
CompCPU) него \fB\-4e\fP и \fB\-6e\fP.  На тај начин нема две истоветне
предподешености.
.RS
.RS
.PP
.TS
tab(;);
c c c c c
n n n n n.
Преподешеност;ВлчРчнка;ЗапакЦПЈ;ЗапакМем;РаспМем
\-0e;256 KiB;8;4 MiB;1 MiB
\-1e;1 MiB;8;13 MiB;2 MiB
\-2e;2 MiB;8;25 MiB;3 MiB
\-3e;4 MiB;7;48 MiB;5 MiB
\-4e;4 MiB;8;48 MiB;5 MiB
\-5e;8 MiB;7;94 MiB;9 MiB
\-6e;8 MiB;8;94 MiB;9 MiB
\-7e;16 MiB;8;186 MiB;17 MiB
\-8e;32 MiB;8;370 MiB;33 MiB
\-9e;64 MiB;8;674 MiB;65 MiB
.TE
.RE
.RE
.IP ""
На пример, има укупно четири предподешавања која користе 8\ MiB речник, чији
поредак од најбржег до најспоријег је \fB\-5\fP, \fB\-6\fP, \fB\-5e\fP и \fB\-6e\fP.
.TP 
\fB\-\-fast\fP
.PD 0
.TP 
\fB\-\-best\fP
.PD
Ово су помало погрешни алијаси за \fB\-0\fP и \fB\-9\fP.  Достављени су само зарад
повратне сагласности са LZMA Utils\-ом.  Избегавајте коришћење ових опција.
.TP 
\fB\-\-block\-size=\fP\fIвеличина\fP
Приликом запакивања у \fB.xz\fP формат, дели улазне податке на блокове
\fIвеличина\fP бајта.  Блокови се запакују независно један од другог, што
помаже у раду са више нити и чини ограничено распакивање насумичног приступа
могућим.  Ова опција се обично користи да се препише основна величина блока
у режиму са више нити, али се ова опција може такође користити и у режиму
једне нити.
.IP ""
У режиму више нити око три пута \fIвеличина\fP бајтова биће додељено у свакој
нити за међумеморисање улаза и излаза.  Основна \fIвеличина\fP је три пута
величине LZMA2 речника или 1 MiB, шта год да је више.  Обично добра вредност
је 2\(en4 пута величина LZMA2 речника или барем 1 MiB.  Коришћење
\fIвеличине\fP мање од величине LZMA2 речника је трошење RAM\-а јер тада
међумеморија LZMA2 речника никада неће бити потпуно коришћена.  У режиму
више нити, величине блокова се чувају у заглављима блока.  Ова информација
величине је потребна за распакивање са више нити.
.IP ""
У режиму једне нити никаква подела блока се не ради по основи.  Постављање
ове опције не утиче на коришћење меморије.  Никакве информације о величини
се не чувају у заглављима блока, стога датотеке направљене у режиму једне
нити неће бити исте као датотеке направљене у режиму више нити.  Недостатак
информација о величини такође значи да \fBxz\fP неће моћи да распакује датотеке
у режиму више нити.
.TP 
\fB\-\-block\-list=\fP\fIставке\fP
Приликом запакивања у \fB.xz\fP формат, почиње нови блок са изборним
произвољним ланцем филтера након датих интервала незапакованих података.
.IP ""
\fIСтавке\fP су списак одвојен зарезом.  Свака ставка се састоји од изборног
броја ланца филтера између 0 и 9 за којим следи двотачка (\fB:\fP) и захтевана
величина незапакованих података .  Изостављање неке ставке (два или више
узастопна зареза) је пречица за коришћење величине и филтера претходне
ставке.
.IP ""
Ако је улазна датотека већа од збира величина у \fIставкама\fP, последња ставка
се понавља све до краја датотеке.  Специјална вредност \fB0\fP може се
користити као последња величина да назначи да остатак датотеке треба да буде
шифрован као један блок.
.IP ""
Алтернативни ланац филтера за сваки блок се може навести у комбинацији са
опцијама \fB\-\-filters1=\fP\fIфилтера\fP \&...\& \fB\-\-filters9=\fP\fIфилтери\fP.  Ове
опције дефинишу ланце филтера са одредником између 1\(en9.  Ланац филтера 0
се може користити да упућује на основно ланац филтера, који је исти јер се
ланац филтера не наводи.  Одредник ланца филтера се може користити пре
незапаковане величине, за којим следи двотачка (\fB:\fP).  На пример, ако
наведемо \fB\-\-block\-list=1:2MiB,3:2MiB,2:4MiB,,2MiB,0:4MiB\fP тада ће се за
прављење блокова користити:
.RS
.IP \(bu 3
Ланац филтера наведен са \fB\-\-filters1\fP и 2 MiB улазом
.IP \(bu 3
Ланац филтера наведен са \fB\-\-filters3\fP и 2 MiB улазом
.IP \(bu 3
Ланац филтера наведен са \fB\-\-filters2\fP и 4 MiB улазом
.IP \(bu 3
Ланац филтера наведен са \fB\-\-filters2\fP и 4 MiB улазом
.IP \(bu 3
Основни ланац филтера и 2 MiB улаз
.IP \(bu 3
Основни ланац филтера и 4 MiB улаз за сваки блок до краја улаза.
.RE
.IP ""
Ако наведемо величину која премашује величину блока шифрера (било основну
вредност у режиму нити или вредност наведену са
\fB\-\-block\-size=\fP\fIвеличина\fP), шифрер ће направити додатне блокове док ће
задржати границе наведене у \fIставкама\fP.  На пример, ако наведемо
\fB\-\-block\-size=10MiB\fP \fB\-\-block\-list=5MiB,10MiB,8MiB,12MiB,24MiB\fP а улазна
датотека је 80 MiB, добићемо 11 блокова: 5, 10, 8, 10, 2, 10, 10, 4, 10, 10
и 1 MiB.
.IP ""
У режиму са више нити величине блокова се чувају у заглављима блока.  Ово се
не ради у режиму једне нити, тако да шифровани излаз неће бити истоветан
ономе у режиму са више нити.
.TP 
\fB\-\-flush\-timeout=\fP\fIистек_времена\fP
Приликом запакивања, ако је више од \fIвреме_истека\fP милисекунди (позитиван
цео број) прошло од претходног испирања и читање више улаза ће блокирати,
сви заказани улазни подаци се испирају из шифрера и чине доступним у
излазном току.  Ово може бити корисно ако је \fBxz\fP коришћен за запакивање
података који су слати преко мреже.  Мала вредност \fIвременског_истека\fP чини
податке доступним на пријемни крај са малим закашњењем, али велика вредност
\fIвремена_истека\fP даје бољу стопу запакивања.
.IP ""
Ова функција је искључена по основи.  Ако је ова опција наведена више пута,
последња има дејства.  Нарочита вредност \fIвременског истека\fP \fB0\fP може се
користити за изричито искључивање ове функције.
.IP ""
Ова функција је доступна само на POSIX системима.
.IP ""
.\" FIXME
\fBОва функција је још увек експериментална.\fP Тренутно \fBxz\fP није погодан за
распакивање тока у реалном времену због начина на који \fBxz\fP ради
међумеморисање.
.TP 
\fB\-\-no\-sync\fP
Не усклађује циљну датотеку и њену фасциклу на смештајном уређају пре
уклањања изворне датотеке.  Ово може побољшати учинковитост ако се запакује
или распакује много малих датотека.  Међутим, ако се систем уруши одмах
након брисања, може бити да циљна датотека не буде уписана на смештајном
уређају али радња брисања јесте.  У том случају неће бити доступна ни
оригинална изворна ни циљна датотека.
.IP ""
Ова опција има дејство само када се \fBxz\fP спрема да уклони изворну
датотеку.  У осталим случајевима усклађивање се не ради никада.
.IP ""
Синхронизација и \fB\-\-no\-sync\fP су додате у \fBxz\fP 5.7.1alpha.
.TP 
\fB\-\-memlimit\-compress=\fP\fIограничење\fP
Поставља ограничење коришћења меморије запакивања.  Ако је ова опција
наведена више пута, последња ступа у дејство.
.IP ""
Ако поставке запакивања премаше \fIограничење\fP, \fBxz\fP ће покушати да врати
назад поставке тако да ограничење више није прекорачено и приказаће
обавештење да је урађено аутоматско дотеривање.  Дотеривања се раде следећим
редом: смањење броја нити, пребацивање на режим једне нити ако чак и једна
нит у режиму више нити премаши \fIограничење\fP и на крају смањење величине
LZMA2 речника.
.IP ""
Приликом запакивања са \fB\-\-format=raw\fP или ако је наведено \fB\-\-no\-adjust\fP,
само број нити може бити умањен јер може да се уради а да се не делује на
излаз запакованог.
.IP ""
Ако \fIограничење\fP не може бити задовољено чак и са поравнањима описаним
изнад, приказује се грешка и \fBxz\fP ће изаћи са излазним стањем 1.
.IP ""
\fIОграничење\fP се може навести на више начина:
.RS
.IP \(bu 3
\fIОграничење\fP може бити апсолутна величина у бајтима.  Коришћење суфикса
целог броја као \fBMiB\fP може бити корисно.  Пример:
\fB\-\-memlimit\-compress=80MiB\fP
.IP \(bu 3
\fIОграничење\fP се може навести као проценат укупне физичке меморије (RAM).
Ово може бити корисно нарочито приликом постављања променљиве окружења
\fBXZ_DEFAULTS\fP у скрпти покретања конзоле која се дели између различитих
рачунара.  На тај начин ограничење је аутоматски веће на системима са више
меморије.  Пример: \fB\-\-memlimit\-compress=70%\fP
.IP \(bu 3
\fIОграничење\fP се може вратити на своју основну вредност његовим постављањем
на \fB0\fP.  Ово је тренутно исто што и постављање \fIограничења\fP на \fBmax\fP (без
ограничења коришћења меморије).
.RE
.IP ""
За \fBxz\fP 32\-бита имамо посебан случај: ако \fIограничење\fP треба да буде преко
\fB4020\ MiB\fP, \fIограничење\fP се поставља на \fB4020\ MiB\fP.  Али на MIPS32
користи се \fB2000\ MiB\fP.  (На вредности \fB0\fP и \fBmax\fP ово не утиче.  Слична
функција не постоји за распакивање.)  Ово може бити од помоћи када извршна
од 32\-бита има приступ адресном простору од 4\ GiB (2 GiB на MIPS32) док
срећом не чини ништа лоше у осталим приликама.
.IP ""
Видите такође одељак \fBКоришћење меморије\fP.
.TP 
\fB\-\-memlimit\-decompress=\fP\fIограничење\fP
Поставља ограничење коришћења меморије за распакивање.  Ово такође утиче на
\fB\-\-list\fP режим.  Ако радња није могућа а да се не премаши \fIограничење\fP,
\fBxz\fP ће приказати грешку а распакивање датотеке неће успети.  Видите
\fB\-\-memlimit\-compress=\fP\fIограничење\fP за могуће начине о навођењу
\fIограничења\fP.
.TP 
\fB\-\-memlimit\-mt\-decompress=\fP\fIограничење\fP
Поставља ограничење коришћења меморије за распакивање са више нити.  Ово
може утицати само на број нити; ово никада неће учинити да \fBxz\fP одбије да
распакује датотеке.  Ако је \fIограничење\fP превише ниско да омогући било који
рад са више нити, \fIограничење\fP се занемарује а \fBxz\fP ће наставити у режиму
једне нити.  Знајте да ако се такође користи \fB\-\-memlimit\-decompress\fP, увек
ће се применити и на режим једне и на режим више нити, и тако да стварно
\fIограничење\fP за више нити никада неће бити више од ограничења постављеног
са \fB\-\-memlimit\-decompress\fP.
.IP ""
У супротности са другим опцијама ограничења коришћења меморије,
\fB\-\-memlimit\-mt\-decompress=\fP\fIограничење\fP има систему специфично основно
\fIограничење\fP.  \fBxz \-\-info\-memory\fP се може користити да видите тренутну
вредност.
.IP ""
Ова опција и њена основна вредност постоје јер без икаквог ограничења нитни
распакивач ће завршити са додељивањем неразумног износа меморије са неким
улазним датотекама.  Ако је основно \fIограничење\fP превише ниско на вашем
систему, слободно повећајте \fIограничење\fP али га никада не постављајте на
вредност већу од износа употребљивог RAM\-а јер са одговарајућим улазним
датотекама \fBxz\fP ће покушати да користи тај износ меморије чак и са малим
бројем нити.  Остајући без меморије или разменом неће се побољшати
учинковитост распакивања.
.IP ""
Видите \fB\-\-memlimit\-compress=\fP\fIограничење\fP за могуће начине за навођење
\fIограничења\fP.  Постављање \fIограничења\fP на \fB0\fP враћа \fIограничење\fP на
систему специфичну основну вредност.
.TP 
\fB\-M\fP \fIограничење\fP, \fB\-\-memlimit=\fP\fIограничење\fP, \fB\-\-memory=\fP\fIограничење\fP
Ово је исто као и навођење \fB\-\-memlimit\-compress=\fP\fIограничење\fP
\fB\-\-memlimit\-decompress=\fP\fIограничење\fP
\fB\-\-memlimit\-mt\-decompress=\fP\fIограничење\fP.
.TP 
\fB\-\-no\-adjust\fP
Приказује грешку и излази ако ограничење коришћења меморије не може бити
задовољено без дотеривања поставки које утичу на запаковани излаз.  Тако је,
ово спречава \fBxz\fP да промени шифрера из режима више нити у режим једне нити
и да смањи величину LZMA2 речника.  Чак и када се ова опција користи број
нити се може смањити да задовољи ограничење коришћења меморије јер то неће
утицати на запаковани излаз.
.IP ""
Аутоматско дотеривање је увек искључено приликом стварања сирових токова
(\fB\-\-format=raw\fP).
.TP 
\fB\-T\fP \fIнити\fP, \fB\-\-threads=\fP\fIнити\fP
Наводи број нити радника за коришћење.  Постављање \fIнити\fP на посебну
вредност \fB0\fP чини да \fBxz\fP користи онолико нити колико процесор на систему
подржава.  Стварни број нити може бити мањи од \fIнити\fP ако улазна датотека
није довољно велика за нитисање са датим поставкама или ако ће коришћење
више нити премашити ограничење коришћења меморије.
.IP ""
Запакивачи једне нити и више нити дају различите излазе.  запакивач једне
нити даће мању величину датотеке али само излаз из запакивача више нити може
бити распакован коришћењем више нити. Постављање \fIнити\fP на \fB1\fP користиће
режим једне нити.  Постављање \fIнити\fP на неку другу вредност, укључујући
\fB0\fP, користиће запакивач више нити чак и ако систем подржава само једну нит
хардвера.  (\fBxz\fP 5.2.x је користио режим једне нити у овој прилици.)
.IP ""
Да користите вишенитни режим са само једном нити, поставите \fIнити\fP на
\fB+1\fP.  Префикс \fB+\fP нема дејства са вредностима које нису \fB1\fP.  Ограничење
коришћења меморије може још увек учинити да се \fBxz\fP пребаци на режим једне
нити осим ако се не користи \fB\-\-no\-adjust\fP.  Подршка за префикс \fB+\fP је
додата у \fBxz\fP 5.4.0.
.IP ""
Ако је затражен аутоматски број нити и није наведено ограничење коришћења
меморије, тада ће се користити основно меко ограничење специфично за систем
за могуће ограничење броја нити.  То је меко ограничење у смислу да се
занемарује ако број нити постане један, дакле меко ограничење никада неће
зауставити \fBxz\fP од запакивања или распакивања. Ово основно меко ограничење
неће учинити да се \fBxz\fP пребаци из режима више нити у режим једне нити.
Активно ограничење се може видети са
 \fBxz \-\-info\-memory\fP.
.IP ""
Тренутно једина метода нитисања је да се подели улаз на блокове и да се
запакују независно један од другог.  Основна величина блока зависи од нивоа
запакивања и може се преписати опцијом \fB\-\-block\-size=\fP\fIвеличина\fP.
.IP ""
Нитно распакивање ради само на датотекама које садрже више блокова са
информацијом величине у заглављима блока.  Све довољно велике датотеке
запаковане у вишенитном режиму задовољавају овај услов, али датотеке
запаковане у једнонитном режиму не чак и ако је коришћено
\fB\-\-block\-size=\fP\fIвеличина\fP.
.IP ""
Основна вредност за \fIнити\fP је \fB0\fP.  У \fBxz\fP 5.4.x и старијим основно је
\fB1\fP.
.
.SS "Произвољни ланци филтера запакивача"
Произвољни ланац филтера омогућава детаљно одређивање подешавања сажимања
уместо да се ослања на подешавања повезана са предподешавањима. Када је
произвољни ланац филтера наведен, опције предподешавања (\fB\-0\fP \&...\& \fB\-9\fP
и \fB\-extreme\fP) раније на линији наредби се заборављају. Ако је опција
предподешавања наведена након једне или више опција произвољног ланца
филтера, ново предподешавање ступа на снагу а раније наведене опције
произвољног ланца филтера се заборављају.
.PP
Ланац филтера је упоредив са спојкама на линији наредби. Приликом сажимања,
несажети улаз иде на први филтер, чији излаз иде на следећи филтер (ако фа
има). Излаз последњег филтера бива записан у сажету датотеку. Највећи број
филтера у ланцу је четири, али обично ланац филтера има само један или два
филтера.
.PP
Многи филтери имају ограничења о томе где могу бити у ланцу филтера: неки
филтери могу радити само као последњи филтер у ланцу, неки само као
не\-последњи филтер, а неки раде на било ком месту у ланцу.  Овисно о
филтеру, ово ограничење је или својствено дизајну филтера или постоји како
би се спречили проблеми безбедности.
.PP
Произвољни ланац филтера се може навести на два различита начина.  Опције
\fB\-\-filters=\fP\fIфилтери\fP и \fB\-\-filters1=\fP\fIфилтери\fP \&...\&
\fB\-\-filters9=\fP\fIфилтери\fP омогућавају навођење читавог ланца опција у једној
опцији коришћењем синтаксу ниске „liblzma“ филтера.  Другачије, ланац
филтера се може навести коришћењем једне или више појединачних опција
филтера редом како се траже у ланцу филтера.  То је то, редослед
појединачних опција филтера је важан! Приликом дешифровања сирових токова
(\fB\-\-format=raw\fP), ланац филтера мора бити наведен истим редом као када је
био наведен приликом сажимања.  Било који појединачни филтер или опције
предподешавања наведене пре опције читавог ланца (\fB\-\-filters=\fP\fIфилтери\fP)
биће заборављене.  Појединачни филтери наведени после опције читавог ланца
ће поништити поставку ланца филтера.
.PP
Обе опције и пуног и појединачног филтера узимају филтеру специфичне
\fIопције\fP као зарезом раздвојен списак.  Додатни зарези у \fIопцијама\fP се
занемарују.  Свака опција има основну вредност, тако да треба да наведете
оне које желите да измените.
.PP
Да видите читав ланац филтера и \fIопције\fP, користите \fBxz \-vv\fP (тако је,
користите \fB\-\-verbose\fP два пута).  Ово ради такође за преглед опција ланца
филтера коришћених од стране предподешености.
.TP 
\fB\-\-filters=\fP\fIфилтери\fP
Наводи цео ланац филтера или предподешеност у једној опцији.  Сваки филтер
се може одвојити размацима или са две цртице (\fB\-\-\fP).  \fIФилтери\fP можда
треба да буду под наводницима на линији наредби конзоле тако да се
прослеђују као једна опција.  Да означите \fIопције\fP, користите \fB:\fP или
\fB=\fP.  Предподешености се може додати префикс \fB\-\fP и може га пратити нула
или још заставица.  Једина подржана заставица је \fBe\fP за примену истих
опција као \fB\-\-extreme\fP.
.TP 
\fB\-\-filters1\fP=\fIфилтери\fP ... \fB\-\-filters9\fP=\fIфилтери\fP
Наводи до девет додатних ланаца филтера који се могу користити са
\fB\-\-block\-list\fP.
.IP ""
На пример, приликом запакивања архиве са извршним датотекама за којима следе
текстуалне датотеке, извршни део треба да користи ланац филтера са BCJ
филтером а текстуални део само LZMA2 филтер.
.TP 
\fB\-\-filters\-help\fP
Приказује поруку помоћи описујући како се наводе предподешавања и произвољни
ланци филтера у опцијама \fB\-\-filters\fP и \fB\-\-filters1=\fP\fIфилтери\fP \&...\&
\fB\-\-filters9=\fP\fIфилтери\fP, и успешно излази.
.TP 
\fB\-\-lzma1\fP[\fB=\fP\fIопције\fP]
.PD 0
.TP 
\fB\-\-lzma2\fP[\fB=\fP\fIопције\fP]
.PD
Додаје LZMA1 или LZMA2 филтер у ланац филтера.  Ови филтери се могу
користити само као последњи филтер у ланцу.
.IP ""
LZMA1 је стари филтер, који је подржан углавном само због старог формата
\&\fB.lzma\fP датотеке, који подржава само LZMA1.  LZMA2 је освежено издање LZMA1
које поправља неке практичне проблеме LZMA1.  \fB.xz\fP формат користи LZMA2 и
не подржава LZMA1 уопште.  Брзина запакивања и односи LZMA1 и LZMA2 су
практично исти.
.IP ""
LZMA1 и LZMA2 деле исти скуп \fIопција\fP:
.RS
.TP 
.\" TRANSLATORS: Don't translate bold strings like B<preset>, B<dict>,
.\" B<mode>, B<nice>, B<fast>, or B<normal> because those are command line
.\" options. On the other hand, do translate the italic strings like
.\" I<preset>, I<size>, and I<mode>, because such italic strings are
.\" placeholders which a user replaces with an actual value.
\fBpreset=\fP\fIпредподешавање\fP
Враћа све LZMA1 или LZMA2 \fIопције\fP на \fIпредподешеност\fP.  \fIПредпдешеност\fP
се састоји од целог броја, за којим може да следи једнословни измењивач
предподешености.  Цео број може бити од \fB0\fP до \fB9\fP, поклапајући опције
линије наредби \fB\-0\fP \&...\& \fB\-9\fP.  Једини тренутно подржани измењивач је
\fBe\fP, који се поклапа са \fB\-\-extreme\fP.  Ако \fBпредподешеност\fP није наведена,
основне вредности LZMA1 или LZMA2 \fIопција\fP се узимају из предподешености
\fB6\fP.
.TP 
\fBdict=\fP\fIвеличина\fP
\fIВеличина\fP речника (међумеморија историјата) указује на то колико је
бајтова недавно обрађених нераспакованих података задржано у меморији.
Алгоритам покушава да нађе понављајуће низове бајтова (поклапања) у
нераспакованим подацима, и да их замени са упутама ка подацима који су
тренутно у речнику.  Што је већи речник, већа је вероватноћа за налажење
поклапања.  Стога, повећање \fIвеличине \fP речника обично побољшава стопу
запакивања, али речник већи од незапаковане датотеке јесте утрошак меморије.
.IP ""
Уобичајена \fIвеличина\fP речника је од 64\ KiB до 64\ MiB.  Најмање је 4\ KiB.  Највише за запакивање тренутно је 1.5\ GiB (1536\ MiB).  Распакивач
већ подржава речнике до једног бајта мање од 4\ GiB, што је максимум за
формате LZMA1 и LZMA2 тока.
.IP ""
\fIВеличина\fP речника и налазач поклапања (\fImf\fP) заједно одређују коришћење
меморије за LZMA1 или LZMA2 шифрере.  Иста (или већа) \fIвеличина\fP речника је
потребна за распакивање као она која је коришћена за запаквање, стога се
коришћење меморије дешифрера одређује према величини речника коришћеног за
запакивање.  \fB.xz\fP заглавља чувају \fIвеличину\fP речника или као 2^\fIn\fP или
2^\fIn\fP + 2^(\fIn\fP\-1), тако да су те \fIвеличине\fP некако пожељније за
запакивање.  Друге \fIвеличине\fP биће заокружене приликом чувања у \fB.xz\fP
заглављима.
.TP 
\fBlc=\fP\fIlc\fP
Наводи број битова контекста литерала.  Најмање је 0 а највише је 4; основно
је 3.  Као додатак, збир \fIlc\fP и \fIlp\fP не сме да премаши 4.
.IP ""
Сви бајтови који се не могу шифровати јер су поклапања шифрована као
литерали. То је то, литерали су једноставно 8\-битни бајтови који су
шифровани један по један.
.IP ""
Кодирање литерала врши претпоставку да највећи \fIlc\fP битови претходног
незапакованог бајта су у узајамној вези са следећим бајтом.  На пример, у
уобичајеном енглеском тексту, за великим словом често следи мало слово, а за
малим словом обично следи још једно мало слово.  У скупу US\-ASCII знакова,
највиша три бита су 010 за велика слова и 011 за мала слова.  Када је \fIlc\fP
барем 3, кодирање литерала може имати предност овог својства у незапакованим
подацима.
.IP ""
Основна вредност (3) је обично добра.  Ако желите највеће запакивање,
испробајте \fBlc=4\fP.  Некад то мало помогне а некад чини запакивање горим.
Ако га учини горим, испробајте такође \fBlc=2\fP.
.TP 
\fBlp=\fP\fIlp\fP
Наводи број битова положаја литерала.  Најмање је 0 а највише је 4; основно
је 0.
.IP ""
\fILp\fP утиче на то која врста поравнања у незапакованим подацима се
подразумева приликом шифровања литерала.  Видите \fIpb\fP испод за више
информација о поравнању.
.TP 
\fBpb=\fP\fIpb\fP
Наводи број битова положаја.  Најмање је 0 а највише је 4; основно је 2.
.IP ""
\fIPb\fP утиче на то која врста поравнања у незапакованим подацима се
подразумева у опште.  Основно значи четворобајтно поравнање (2^\fIpb\fP=2^2=4),
што је често добар избор када нема бољег решења.
.IP ""
Када је поравнање познато, постављање одговарајућег \fIpb\fP може мало да смањи
величину датотеке.  На пример, са датотекама текста које имају поравнање
једног бајта (US\-ASCII, ISO\-8859\-*, UTF\-8), постављање \fBpb=0\fP може незнатно
да побољша запакивање.  За UTF\-16 текст, \fBpb=1\fP је добар избор.  Ако је
поравнање непаран број као 3 бајта, \fBpb=0\fP може бити најбољи избор.
.IP ""
Иако се претпостављено поравнање може подесити са \fIpb\fP и \fIlp\fP, LZMA1 и
LZMA2 и даље незнатно фаворизују 16\-бајтно поравнање.  То би могло бити
вредно узети у обзир приликом дизајнирања формата датотека које ће вероватно
бити често запаковане са LZMA1 или LZMA2.
.TP 
\fBmf=\fP\fImf\fP
Налазач поклапања има главни утицај на брзину шифрера, коришћење меморије и
стопу запакивања.  Обично Hash Chain налазачи поклапања су бржи од Binary
Tree налазача поклапања.  Основност зависи од \fIпредподешености\fP: 0 користи
\fBhc3\fP, 1\(en3 користи \fBhc4\fP, а остало користи \fBbt4\fP.
.IP ""
Следећи налазачи поклапања су подржани.  Формуле коришћења меморије испод су
грубе апроксимације које су ближе стварности када је \fIречник\fP степен
двојке.
.RS
.TP 
\fBhc3\fP
Ланац хеша са хеширањем 2\- и 3\-бајта
.br
Најмања вредност за \fIфино\fP: 3
.br
Коришћење меморије:
.br
\fIречник\fP * 7.5 (ако је \fIречник\fP <= 16 MiB);
.br
\fIречник\fP * 5.5 + 64 MiB (if \fIречник\fP > 16 MiB)
.TP 
\fBhc4\fP
Ланац хеша са хеширањем 2\-, 3\- и 4\-бајта
.br
Најмања вредност за \fIфино\fP: 4
.br
Коришћење меморије:
.br
\fIречник\fP * 7.5 (ако је \fIречник\fP <= 32 MiB);
.br
\fIречник\fP * 6.5 (ако је \fIречник\fP > 32 MiB)
.TP 
\fBbt2\fP
Бинарно стабло са 2\-бајта хеширања
.br
Најмања вредност за \fIфино\fP: 2
.br
Коришћење меморије: \fIречник\fP * 9.5
.TP 
\fBbt3\fP
Бинарно стабло са 2\- и 3\-бајта хеширања
.br
Најмања вредност за \fIфино\fP: 3
.br
Коришћење меморије:
.br
\fIречник\fP * 11.5 (if \fIречник\fP <= 16 MiB);
.br
\fIречник\fP * 9.5 + 64 MiB (ако је \fIречник\fP > 16 MiB)
.TP 
\fBbt4\fP
Бинарно стабло са 2\-, 3\-, и 4\-бајта хеширања
.br
Најмања вредност за \fIфино\fP: 4
.br
Коришћење меморије:
.br
\fIречник\fP * 11.5 (if \fIречник\fP <= 32 MiB);
.br
\fIречник\fP * 10.5 (if \fIречник\fP > 32 MiB)
.RE
.TP 
\fBmode=\fP\fIрежим\fP
\fIРежим\fP запакивања наводи методу за анализу података које произведе налазач
поклапања.  Подржани \fIрежими\fP су \fBfast\fP и \fBnormal\fP.  Подразумева се
\fBfast\fP за \fIпредподешавања\fP 0\(en3 и \fBnormal\fP за \fIпредподешавања\fP 4\(en9.
.IP ""
Обично се \fBfast\fP користи са налазачима Hash Chain поклапања а \fBnormal\fP са
налазачима Binary Tree поклапања.  Ово је исто што раде и
\fIпредподешености\fP.
.TP 
\fBnice=\fP\fIфино\fP
Наводи оно што се сматра да је фина дужина за поклапање.  Када се поклапање
од барем \fInice\fP бајтова нађе, алгоритам зауставља тражење могућих бољих
поклапања.
.IP ""
\fIФино\fP може бити 2\(en273 бајта.  Веће вредности теже да дају бољу стопу
запакивања на уштрб брзине.  Основно зависи од \fIпредподешавања\fP.
.TP 
\fBdepth=\fP\fIдубина\fP
Наводи највећу дубину претраге у налазачу поклапања.  Основно је посебна
вредност 0, која чини да запакивач одреди разумљиву \fIдубину\fP из \fImf\fP и
\fInice\fP.
.IP ""
Разумљива \fIдубина\fP за ланце хеша је 4\(en100 и 16\(en1000 за стабло
извршних.  Коришћење врло великих вредности за \fIдубину\fP може учинити шифрер
врло спорим са неким датотекама.  Избегавајте постављање \fIдубине\fP преко
1000 осим ако нисте спремни да прекинете запакивање у случају да потраје
превише дуго.
.RE
.IP ""
Приликом дешифровања сирових токова (\fB\-\-format=raw\fP), LZMA2 треба само
\fIвеличина\fP речника.  LZMA1 треба такође \fIlc\fP, \fIlp\fP и \fIpb\fP.
.TP 
\fB\-\-x86\fP[\fB=\fP\fIопције\fP]
.PD 0
.TP 
\fB\-\-arm\fP[\fB=\fP\fIопције\fP]
.TP 
\fB\-\-armthumb\fP[\fB=\fP\fIопције\fP]
.TP 
\fB\-\-arm64\fP[\fB=\fP\fIопције\fP]
.TP 
\fB\-\-powerpc\fP[\fB=\fP\fIопције\fP]
.TP 
\fB\-\-ia64\fP[\fB=\fP\fIопције\fP]
.TP 
\fB\-\-sparc\fP[\fB=\fP\fIопције\fP]
.TP 
\fB\-\-riscv\fP[\fB=\fP\fIопције\fP]
.PD
Додаје „branch/call/jump“ (BCJ) филтер ланцу филтера.  Ови филтери могу се
користити само ако нису последњи филтер у ланцу филтера.
.IP ""
BCJ филтер претвара релативне адресе у машинском коду на њихове апсолутне
двојнике. Ово не мења величину података, али повећава сувишност, што може
помоћи LZMA2 да произведе 0\(en15\% мању \fB.xz\fP датотеку. BCJ филтери су
увек реверзибилни, стога коришћење BCJ филтера за погрешну врсту података не
доводи ни до каквог губитка података, мада може да учини степен сажимања
нешто лошијим. BCJ филтери су врло брзи и користе безначајну количину
меморије.
.IP ""
Ови BCJ филтери имају познате проблеме везане за стопу запакивања:
.RS
.IP \(bu 3
Неке врсте датотека које садрже извршни код (на пример, објектне датотеке,
статичке библиотеке и модули Линукс кернела) имају адресе у упутствима
испуњеним вредностима попуњавача. Ови BCJ филтери и даље ће радити
претварање адресе, што ће запакивање учинити горим са овим датотекама.
.IP \(bu 3
Ако се BCJ филтер примени на архиву, могуће је да ће учинити стопу
запакивања лошијим него кад се не би користио.  На пример, ако постоје
сличне или чак истоветне извршне тада ће филтрирање вероватно учинити
датотеке мање сличним и стога је запакивање лошије.  Садржај не\-извршних
датотека у истој архиви је такође важан.  У пракси се мора покушати са и без
BCJ филтера да би се видело шта је боље у којој прилици.
.RE
.IP ""
Различити скупови упутстава имају различита поравнања: извршна датотека мора
бити поравната на множилац ове вредности у улазним подацима како би филтер
радио.
.RS
.RS
.PP
.TS
tab(;);
l n l
l n l.
Филтер;Поравнање;Напомене
x86;1;32\-бита или 64\-бита x86
ARM;4;
ARM\-Thumb;2;
ARM64;4;4096\-бита поравнање је најбоље
PowerPC;4;Само велика крајност
IA\-64;16;Itanium
SPARC;4;
RISC\-V;2;
.TE
.RE
.RE
.IP ""
Како су BCJ\-филтрирани подаци обично запаковани са LZMA2, стопа запакивања
може бити незнатно побољшана ако су LZMA2 опције постављене да поклопе
поравнање изабраног BCJ филтера.  Примери:
.RS
.IP \(bu 3
IA\-64 филтер има поравнање 16\-бајта тако да је \fBpb=4,lp=4,lc=0\fP добро са
LZMA2 (2^4=16).
.IP \(bu 3
RISC\-V код има поравнање од 2 или 4 бајта у зависности од тога да ли
датотека садржи запаковане инструкције од 16 бита (проширење C).  Када се
користе инструкције од 16 бита, \fBpb=2,lp=1,lc=3\fP или \fBpb=1,lp=1,lc=3\fP је
добро.  Када нема инструкција од 16 бита, \fBpb=2,lp=2,lc=2\fP је најбоље.
\fBreadelf \-h\fP се може користити да се провери да ли се „RVC“ јавља у реду
„Заставице“.
.IP \(bu 3
ARM64 је увек 4\-бајта поравнат тако да је \fBpb=2,lp=2,lc=2\fP најбоље.
.IP \(bu 3
Филтер x86 је изузетак.  Обично је добро придржавати се LZMA2 основности
(\fBpb=2,lp=0,lc=3\fP) приликом запакивања x86 извршних.
.RE
.IP ""
Сви BCJ филтери подржавају исте \fIопције\fP:
.RS
.TP 
\fBstart=\fP\fIпомерај\fP
Наводи \fIпомерај\fP почетка који се користи приликом претварања између
релативних и апсолутних адреса.  \fIПомерај\fP мора бити производ поравнања
филтера (видите табелу изнад).  Основно је нула.  У пракси, основност је
добра; навођење произвољног \fIпомераја\fP скоро никада није од користи.
.RE
.TP 
\fB\-\-delta\fP[\fB=\fP\fIопције\fP]
Додаје Delta филтер у ланац филтера.  Делта филтер може се користити само
ако није последњи филтер у ланцу филтера.
.IP ""
Тренутно је подржан само једноставан делта прорачун једног по једног бита.
Може бити користан приликом запакивања, на пример, незапакованих битмап
слика или незапакованог PCM звука.  Међутим, алгоритми посебне намене могу
дати знатно боље резултате него Delta + LZMA2. Ово је тачно, посебно са
звуком, који се запакује брже и боље, на пример, са \fBflac\fP(1).
.IP ""
Подржане \fIопције\fP:
.RS
.TP 
\fBdist=\fP\fIрастојање\fP
Наводи \fIрастојање\fP делта прорачуна у бајтима.  \fIРастојање\fP мора бити
1\(en256.  Основно је 1.
.IP ""
На пример, са \fBdist=2\fP и осмобајтним улазом A1 B1 A2 B3 A3 B5 A4 B7, излаз
ће бити A1 B1 01 02 01 02 01 02.
.RE
.
.SS "Остале опције"
.TP 
\fB\-q\fP, \fB\-\-quiet\fP
Потискује упозорења и обавештења.  Наведите ово два пута да потиснете и
грешке.  Ова опција нема утицаја на стање излаза.  Тако је, чак и ако је
упозорење потиснуто, стање излаза које указује на упозорење се и даље
користи.
.TP 
\fB\-v\fP, \fB\-\-verbose\fP
Бива опширан.  Ако је стандардна грешка повезана са терминалом, \fBxz\fP ће
приказати указивач напретка.  Навођењем \fB\-\-verbose\fP два пута добија се још
опширнији излаз.
.IP ""
Указивач напредовања показује следеће информације:
.RS
.IP \(bu 3
Проценат довршености се показује ако је величина улазне датотеке позната.
Тако је, проценат се не може приказати у спојкама.
.IP \(bu 3
Количина запакованих података проистеклих (запакивање) или утрошених
(распакивање).
.IP \(bu 3
Количина распакованих података утрошених (запакивање) или проистеклих
(распакивање).
.IP \(bu 3
Размера паковања, која се израчунава дељењем количине запакованих података
обрађених до сада количином незапакованих података до сада обрађених.
.IP \(bu 3
Брзина запакивања или распакивања.  Ово се мери као количина незапакованих
података утрошених (запакивање) или добијених (распакивање) у секунди.
Приказује се након неколико секунде након што \fBxz\fP започне обраду датотеке.
.IP \(bu 3
Протекло време у формату М:СС или Ч:ММ:СС.
.IP \(bu 3
Процењено преостало време се приказује само када је величина улазне датотеке
позната и неколико секунди је већ протекло од кад је \fBxz\fP започео обраду
датотеке.  Време се приказује у мање тачном формату које никада нема
двотачке, на пример, 2 мин 30 сек.
.RE
.IP ""
Када стандардна грешка није терминал, \fB\-\-verbose\fP ће учинити да \fBxz\fP
испише назив датотеке, запаковану величину, незапаковану величину, стопу
запакивања и по могућству такође брзину и протекло време на једном реду на
стандардну грешку након запакивања или распакивања датотеке.  Брзина и
протекло време су укључени само када радња потраје барем неколико секунде.
Ако се радња не заврши, на пример, услед што корисник прекине, такође се
исписује проценат завршености ако је величина улазне датотеке позната.
.TP 
\fB\-Q\fP, \fB\-\-no\-warn\fP
Не поставља стање излаза на 2 чак и ако је услов вредан упозорења откривен.
Ова опција не утиче на ниво опширности, стога и \fB\-\-quiet\fP и \fB\-\-no\-warn\fP
треба да се користе да се не приказују упозорења и да се не измени стање
излаза.
.TP 
\fB\-\-robot\fP
Исписује поруке у формату обрадивом машинама.  Ово је замишљено да олакша
писање челника који желе да користе \fBxz\fP уместо „liblzma“, што може бити
случај са разним скриптама.  Излаз са овом опцијом укљученом је замишљен да
буде стабилан кроз \fBxz\fP издања.  Видите одељак \fBРЕЖИМ РОБОТА\fP за више о
томе.
.TP 
\fB\-\-info\-memory\fP
Приказује, у формату читљивом људима, колико физичке меморије (RAM) и колико
нити процесора \fBxz\fP мисли да систем има и ограничења коришћења меморије за
запакивање и распакивање и излази успешно.
.TP 
\fB\-h\fP, \fB\-\-help\fP
Приказује поруку помоћи описујући најчешће коришћених опција, и успешно
излази.
.TP 
\fB\-H\fP, \fB\-\-long\-help\fP
Приказује поруку помоћи описујући све функције \fBxz\fP, и успешно излази
.TP 
\fB\-V\fP, \fB\-\-version\fP
Приказује број издања за \fBxz\fP и „liblzma“ у формату читљивом људима.  Да
добијете излаз машинама обрадив, наведите \fB\-\-robot\fP пре \fB\-\-version\fP.
.
.SH "РЕЖИМ РОБОТА"
Режим робота се покреће опцијом \fB\-\-robot\fP.  Чини да излаз \fBxz\fP буде лакши
за обраду другим програмима.  Тренутно \fB\-\-robot\fP је подржано само заједно
са \fB\-\-list\fP, \fB\-\-filters\-help\fP, \fB\-\-info\-memory\fP, и \fB\-\-version\fP.  Биће
подржан за запакивање и распакивање у будућности.
.
.SS "Режим списка"
\fBxz \-\-robot \-\-list\fP користи излаз раздвојен табулатором.  Прва колона
сваког реда садржи ниску која указује на врсту информације која се налази у
том реду:
.TP 
.\" TRANSLATORS: The bold strings B<name>, B<file>, B<stream>, B<block>,
.\" B<summary>, and B<totals> are produced by the xz tool for scripts to
.\" parse, thus the untranslated strings must be included in the translated
.\" man page. It may be useful to provide a translated string in parenthesis
.\" without bold, for example: "B<name> (nimi)"
\fBname\fP (назив)
Ово је увек први ред приликом почетка листања датотеке.  Друга колона у реду
је назив датотеке.
.TP 
\fBfile\fP (датотека)
Овај ред садржи свеукупне информације о \fB.xz\fP датотеци.  Овај ред се увек
исписује после реда \fBназив\fP.
.TP 
\fBstream\fP (ток)
Ова врста реда се користи само када је \fB\-\-verbose\fP наведено.  Има толико
редова \fBтока\fP колико има токова у \fB.xz\fP даатотеци.
.TP 
\fBblock\fP (блок)
Ова врста реда се користи само када је \fB\-\-verbose\fP наведено.  Има онолико
редова \fBблока\fP колико има блокова у \fB.xz\fP датотеци.  Редови \fBблока\fP се
приказују након свих редова \fBтока\fP; различите врсте реда се не преплићу.
.TP 
\fBsummary\fP (сажетак)
Ова врста реда се користи само када је \fB\-\-verbose\fP наведено два пута.  Овај
ред се исписује након свих редова \fBблока\fP.  Као ред \fBдатотека\fP, ред
\fBсажетка\fP садржи преглед информација о \fB.xz\fP датотеци.
.TP 
\fBtotals\fP (укупност)
Овај ред је увек последњи ред на списку излаза.  Показује укупне збирове и
величине.
.PP
Колоне редова \fBдатотеке\fP:
.PD 0
.RS
.IP 2. 4
Број токова у датотеци
.IP 3. 4
Укупан број блокова у току(овима)
.IP 4. 4
Величина запаковане датотеке
.IP 5. 4
Величина незапаковане датотеке
.IP 6. 4
Размера паковања, на пример, \fB0.123\fP.  Ако је размера преко 9.999, три
цртице (\fB\-\-\-\fP)  се приказују уместо размере.
.IP 7. 4
.\" TRANSLATORS: Don't translate the bold strings B<None>, B<CRC32>,
.\" B<CRC64>, B<SHA-256>, or B<Unknown-> here. In robot mode, xz produces
.\" them in untranslated form for scripts to parse.
Зарезом раздвојен списак назива провера целовитости.  Следеће ниске се
користе за познате врсте провера: \fBNone\fP, \fBCRC32\fP, \fBCRC64\fP и \fBSHA\-256\fP.
За непознате врсте провера, користи се \fBUnknown\-\fP\fIN\fP, где је \fIN\fP ИД
провере као децимални број (једна или две цифре).
.IP 8. 4
Укупна величина попуњавања тока у датотеци
.RE
.PD
.PP
Колоне редова \fBтока\fP:
.PD 0
.RS
.IP 2. 4
Број тока (први ток је 1)
.IP 3. 4
Број блокова у току
.IP 4. 4
Померај почетка запакованог
.IP 5. 4
Померај почетка незапаковане
.IP 6. 4
Величина запакованог (не укључује попуну тока)
.IP 7. 4
Величина незапаковане
.IP 8. 4
Размера паковања
.IP 9. 4
Назив провере целовитости
.IP 10. 4
Величина попуне тока
.RE
.PD
.PP
Колоне редова \fBблока\fP:
.PD 0
.RS
.IP 2. 4
Број тока који садржи овај блок
.IP 3. 4
Број блока релативан на почетак тока (први блок је 1)
.IP 4. 4
Број блока релативан на почетак датотеке
.IP 5. 4
Померај почетка запакованог односан на почетак датотеке
.IP 6. 4
Померај почетка незапаковане односан на почетак датотеке
.IP 7. 4
Укупна запакована величина блока (заједно са заглављима)
.IP 8. 4
Величина незапаковане
.IP 9. 4
Размера паковања
.IP 10. 4
Назив провере целовитости
.RE
.PD
.PP
Ако је \fB\-\-verbose\fP наведено два пута, додатне колоне су укључене у редовима
\fBблока\fP.  Они се не приказују са једним \fB\-\-verbose\fP, јер добијање ове
информације захтева много тражења и стога може бити споро:
.PD 0
.RS
.IP 11. 4
Вредност провере целовитости у хексадецималном облику
.IP 12. 4
Величина заглавља блока
.IP 13. 4
Заставице блока: \fBc\fP указује да је величина запакованог присутна, а \fBu\fP
указује да је величина нераспакованог присутна.  Ако заставица није
постављена, цртица (\fB\-\fP) се приказује уместо да се настави са поправком
дужине ниске.  У будућности нове заставице могу бити додате на крај ниске.
.IP 14. 4
Величина стварних запакованих података у блоку (ово искључује заглавље
блока, попуњавање блока и поља провере)
.IP 15. 4
Количина меморије (у бајтовима) потребна за распакивање овог блока са овим
\fBxz\fP издањем
.IP 16. 4
Ланац филтера.  Знајте да већина опција коришћених за време запакивања не
може бити познато, јер се само опције које су потребне за распакивање чувају
у \fB.xz\fP заглављима.
.RE
.PD
.PP
Колоне редова \fBсажетка\fP:
.PD 0
.RS
.IP 2. 4
Количина меморије (у бајтовима) потребна за распакивање ове датотеке са овим
\fBxz\fP издањем
.IP 3. 4
\fByes\fP или \fBno\fP указује да ли сва заглавља блока имају и величину
запакованог и величину незапакованог сачуване у њима
.PP
\fIОд\fP \fBxz\fP \fI5.1.2alpha:\fP
.IP 4. 4
Потребно је најмање \fBxz\fP издање за распакивање датотеке
.RE
.PD
.PP
Колоне редова \fBукупности\fP:
.PD 0
.RS
.IP 2. 4
Број токова
.IP 3. 4
Број блокова
.IP 4. 4
Величина запакованог
.IP 5. 4
Величина незапаковане
.IP 6. 4
Просечан степен запакивања
.IP 7. 4
Списак зарезом раздвојених назива провере целовитости која су била присутна
у датотекама
.IP 8. 4
Величина попуњавања тока
.IP 9. 4
Број датотека. Ту се држи поредак ранијих колона исто као у редовима
\fBдатотеке\fP.
.PD
.RE
.PP
Ако је \fB\-\-verbose\fP наведено два пута, додатне колоне су укључене у реду
\fBукупности\fP:
.PD 0
.RS
.IP 10. 4
Највећа количина меморије (у бајтима) потребна за распакивање датотеке са
овим \fBxz\fP издањем
.IP 11. 4
\fByes\fP или \fBno\fP указује да ли сва заглавља блока имају и величину
запакованог и величину незапакованог сачуване у њима
.PP
\fIОд\fP \fBxz\fP \fI5.1.2alpha:\fP
.IP 12. 4
Потребно је најмање \fBxz\fP издање за распакивање датотеке
.RE
.PD
.PP
Будућа издања могу додати нове врсте реда и нове колоне се могу додати
постојећим врстама реда, али постојеће колоне се неће променити.
.
.SS "Помоћ филтера"
\fBxz \-\-robot \-\-filters\-help\fP исписује подржане филтере у следећем формату:
.PP
\fIфилтер\fP\fB:\fP\fIопција\fP\fB=<\fP\fIвредност\fP\fB>,\fP\fIопција\fP\fB=<\fP\fIвредност\fP\fB>\fP...
.TP 
\fIфилтер\fP
Назив филтера
.TP 
\fIопција\fP
Назив филтера специфичне опције
.TP 
\fIвредност\fP
Опсези бројевних \fIвредности\fP се јављају као
\fB<\fP\fImin\fP\fB\-\fP\fImax\fP\fB>\fP.  \fIВредност\fP ниске избора се приказују
унутар \fB< >\fP и раздвојене су знаком \fB|\fP.
.PP
Сваки филтер се исписује на свом сопственом реду.
.
.SS "Информације о ограничењу меморије"
\fBxz \-\-robot \-\-info\-memory\fP исписује један ред са више колона раздвојених
табулатором:
.IP 1. 4
Укупна количина физичке меморије (RAM) у бајтима.
.IP 2. 4
Ограничење коришћења меморије за запакивање у бајтима
(\fB\-\-memlimit\-compress\fP).  Специјална вредност \fB0\fP означава основно
подешавање које је за режим једне нити исто као без ограничења.
.IP 3. 4
Ограничење коришћења меморије за распакивање у бајтима
(\fB\-\-memlimit\-decompress\fP).  Специјална вредност \fB0\fP означава основно
подешавање које је за режим једне нити исто као без ограничења.
.IP 4. 4
Од \fBxz\fP 5.3.4alpha: Коришћење меморије за распакивање са више нити у
бајтима (\fB\-\-memlimit\-mt\-decompress\fP).  Ово никада није нула јер систему
специфична основна вредност приказана у колони 5 се користи ако ограничење
није изричито наведено.  Такође никада није веће од вредности у колони 3 чак
и ако је наведена већа вредност са \fB\-\-memlimit\-mt\-decompress\fP.
.IP 5. 4
Од \fBxz\fP 5.3.4alpha: Систему специфично основно ограничење коришћења
меморије које се користи за ограничавање броја нити приликом запакивања са
аутоматским бројем нити (\fB\-\-threads=0\fP) и без наведеног ограничења
коришћења меморије (\fB\-\-memlimit\-compress\fP).  Ово се такође користи као
основна вредност за \fB\-\-memlimit\-mt\-decompress\fP.
.IP 6. 4
Од \fBxz\fP 5.3.4alpha: Број доступних нити обрађивача.
.PP
У будуће, излаз \fBxz \-\-robot \-\-info\-memory\fP може имати више колона, али
никада више од једног реда.
.
.SS Издање
\fBxz \-\-robot \-\-version\fP исписује број издања за \fBxz\fP и „liblzma“ у следећем
формату:
.PP
.\" TRANSLATORS: Don't translate the uppercase XZ_VERSION or LIBLZMA_VERSION.
\fBXZ_VERSION=\fP\fIXYYYZZZS\fP
.br
\fBLIBLZMA_VERSION=\fP\fIXYYYZZZS\fP
.TP 
\fIX\fP
Главно издање.
.TP 
\fIYYY\fP
Споредно издање. Парни бројеви су стабилна а непарни су алфа или бета
издања.
.TP 
\fIZZZ\fP
Ниво закрпе за стабилна издања или само бројач за развојна издања.
.TP 
\fIS\fP
Стабилност.  0 је алфа, 1 је бета, а 2 је стабилно.  \fIS\fP треба увек да буде
2 када је \fIYYY\fP парно.
.PP
\fIXYYYZZZS\fP су исти у оба реда ако су \fBxz\fP и „liblzma“ из истог издања XZ
Utils\-а.
.PP
Примери: 4.999.9beta је \fB49990091\fP и 5.0.0 је \fB50000002\fP.
.
.SH "СТАЊЕ ИЗЛАЗА"
.TP 
\fB0\fP
Све је у реду.
.TP 
\fB1\fP
Дошло је до грешке.
.TP 
\fB2\fP
Десило се нешто вредно упозорења, али није дошло до стварних грешака.
.PP
Обавештења (без упозорења или грешака) исписано на стандардној грешци не
утичу на стање излаза.
.
.SH ОКРУЖЕЊЕ
.\" TRANSLATORS: Don't translate the uppercase XZ_DEFAULTS or XZ_OPT.
.\" They are names of environment variables.
\fBxz\fP обрађује размаком одвојени списак опција из променљивих окружења
\fBXZ_DEFAULTS\fP и \fBXZ_OPT\fP, тим редом, пре обраде опција са линије наредби.
Знајте да се обрађују само опције из променљивих окружења; све што нису
опције се тихо занемарује.  Обрада се ради са \fBgetopt_long\fP(3) која се
користи такође за аргументе линије наредби.
.PP
\fBWarning:\fP By setting these environment variables, one is effectively
modifying programs and scripts that run \fBxz\fP.  Most of the time it is safe
to set memory usage limits, number of threads, and compression options via
the environment variables.  However, some options can break scripts.  An
obvious example is \fB\-\-help\fP which makes \fBxz\fP show the help text instead of
compressing or decompressing a file.  More subtle examples are \fB\-\-quiet\fP
and \fB\-\-verbose\fP.  In many cases it works well to enable the progress
indicator using \fB\-\-verbose\fP, but in some situations the extra messages
create problems.  The verbosity level also affects the behavior of
\fB\-\-list\fP.
.TP 
\fBXZ_DEFAULTS\fP
User\-specific or system\-wide default options.  Typically this is set in a
shell initialization script to enable \fBxz\fP's memory usage limiter by
default or set the default number of threads.  Excluding shell
initialization scripts and similar special cases, scripts should never set
or unset \fBXZ_DEFAULTS\fP.
.TP 
\fBXZ_OPT\fP
Ово је за прослеђивање опција ка \fBxz\fP када није могуће поставити опције
директно на \fBxz\fP линији наредби.  Ово је случај када је \fBxz\fP покренут
скриптом или алатом, на пример, са Гну \fBtar\fP(1):
.RS
.RS
.PP
.nf
\f(CRXZ_OPT=\-2v tar caf foo.tar.xz foo\fR
.fi
.RE
.RE
.IP ""
Скрипте могу да користе \fBXZ_OPT\fP, на пример, за постављање основних опција
запакивања специфичних скрипти.  Још увек се препоручује омогућавање
корисницима да пишу преко \fBXZ_OPT\fP ако је то разумљиво.  На пример, у
\fBsh\fP(1) скриптама неко може користити нешто као ово:
.RS
.RS
.PP
.nf
\f(CRXZ_OPT=${XZ_OPT\-"\-7e"}
export XZ_OPT\fR
.fi
.RE
.RE
.
.SH "LZMA UTILS САДЕЈСТВЕНОСТ"
Синтакса линије наредби \fBxz\fP је практично супер скуп \fBlzma\fP, \fBunlzma\fP и
\fBlzcat\fP као што се налази у LZMA Utils 4.32.x.  У већини случајева, могуће
је заменити LZMA Utils са XZ Utils без оштећења постојећих скрипти.  Има
неких несагласности такође, које понекад могу довести до проблема.
.
.SS "Нивои предподешавања запакивања"
Набрајање предподешености нивоа запакивања није исто у \fBxz\fP и LZMA Utils.
Најважнија разлика је у томе како се величине речника мапирају у различитим
предподешеностима.  Величина речника је отприлике иста као и коришћење
меморије распакивача.
.RS
.PP
.TS
tab(;);
c c c
c n n.
Ниво;xz;LZMA Utils
\-0;256 KiB;Н/Д
\-1;1 MiB;64 KiB
\-2;2 MiB;1 MiB
\-3;4 MiB;512 KiB
\-4;4 MiB;1 MiB
\-5;8 MiB;2 MiB
\-6;8 MiB;4 MiB
\-7;16 MiB;8 MiB
\-8;32 MiB;16 MiB
\-9;64 MiB;32 MiB
.TE
.RE
.PP
Разлике величине речника делују такође на коришћење меморије запакивање, али
постоје још неке разлике између LZMA Utils и XZ Utils, што чини разлике још
већим:
.RS
.PP
.TS
tab(;);
c c c
c n n.
Ниво;xz;LZMA Utils 4.32.x
\-0;3 MiB;Н/Д
\-1;9 MiB;2 MiB
\-2;17 MiB;12 MiB
\-3;32 MiB;12 MiB
\-4;48 MiB;16 MiB
\-5;94 MiB;26 MiB
\-6;94 MiB;45 MiB
\-7;186 MiB;83 MiB
\-8;370 MiB;159 MiB
\-9;674 MiB;311 MiB
.TE
.RE
.PP
Основни ниво предподешености у LZMA Utils је \fB\-7\fP док у XZ Utils је \fB\-6\fP,
тако да оба користе 8 MiB речник по основи.
.
.SS "Токовне наспрам не\-токовних „.lzma“ датотеке"
Незапакована величина датотеке се може чувати у \fB.lzma\fP заглављу.  LZMA
Utils то ради приликом запакивања обичних датотека.  Алтернатива је да се
означи та незапакована величина као непозната и да се користи означавач
краја утовара да назначи где распакивач треба да стане.  LZMA Utils користи
ову методу када незапакована величина није позната, што је случај, на
пример, у спојкама.
.PP
\fBxz\fP подржава распакивање \fB.lzma\fP датотека са или без означавача краја
утовара, али ће све \fB.lzma\fP датотеке направљене са \fBxz\fP користити
означавач краја утовара и означити незапаковану величину непознатом у
\&\fB.lzma\fP заглављу.  Ово може бити проблем у неким неуобичајеним
ситуацијама.  На пример, \fB.lzma\fP распакивач у угнежденом уређају може
радити само са датотекама које имају незапаковану величину.  Ако наиђете на
тај проблем, треба да користите LZMA Utils или LZMA SDK да направите
\&\fB.lzma\fP датотеке са познатом незапакованом величином.
.
.SS "Неподржане „.lzma“ датотеке"
Формат \fB.lzma\fP омогућава \fIlc\fP вредности све до 8, а \fIlp\fP вредности све до
4.  LZMA Utils може да распакује датотеке са било којим \fIlc\fP и \fIlp\fP, али
увек прави датотеке са \fBlc=3\fP и \fBlp=0\fP.  Прављење датотека са другим \fIlc\fP
и \fIlp\fP је мгуће са \fBxz\fP и са LZMA SDK.
.PP
Примена филтера LZMA1 у „liblzma“ захтева да збир \fIlc\fP и \fIlp\fP не сме да
премаши 4.  Стога, \fB.lzma\fP датотеке, које премаше ово ограничење, не могу
да се распакују са \fBxz\fP.
.PP
LZMA Utils прави само \fB.lzma\fP датотеке које имају величину речника од
2^\fIn\fP (степен 2) али прихвата датотеке са било којом величином речника.
„liblzma“ прихвата само \fB.lzma\fP датотеке које имају величину речника од
2^\fIn\fP или 2^\fIn\fP + 2^(\fIn\fP\-1).  Ово је да се смање лажни позитивни
резултати приликом откривања \fB.lzma\fP датотека.
.PP
Ова ограничења не би требало да буду проблем у пракси, јер су практично све
\&\fB.lzma\fP датотеке запаковане са поставкама које ће „liblzma“ прихватити.
.
.SS "Пратеће смеће"
Приликом распакивања, LZMA Utils тихо занемарује све после првог \fB.lzma\fP
тока.  У већини прилика, ово је грешка.  Ово такође значи да LZMA Utils не
подржава распакивање надовезаних \fB.lzma\fP датотека.
.PP
Ако су остали подаци након првог \fB.lzma\fP тока, \fBxz\fP сматра да је датотека
оштећена осим ако је коришћено \fB\-\-single\-stream\fP.  Ово може прекинути
нејасне скрипте које су претпоставиле да је пратеће смеће занемарено.
.
.SH НАПОМЕНЕ
.
.SS "Излаз запакованог може бити променљив"
Тачан запаковани излаз добијен из исте незапаковане улазне датотеке може се
разликовати између XZ Utils издања чак и ако су опције запакивања
истоветне.  Ово је због тога што шифрер може бити побољшан (брже и боље
запакивање) а да не утиче на формат датотеке.  Излаз се може разликовати
између различитих изградњи истог XZ Utils издања, ако су коришћене другачије
опције изградње.
.PP
Ово изнад значи да када се \fB\-\-rsyncable\fP једном примени, резултирајућа
датотека неће неопходно бити r\-ускладива осим ако и стара и нова датотека
нису запаковане истим xz издањем.  Овај проблем може бити поправљен ако је
део примене шифрера замрзнут да држи r\-ускладив излаз стабилним кроз xz
издања.
.
.SS "Угнеждени „.xz“ распакивачи"
Примена угнежденог \fB.xz\fP распакивача као што је XZ Embedded неопходно не
подржава датотеке направљене врстама \fIпровере\fP целовитости осим \fBnone\fP и
\fBcrc32\fP.  Како је основно \fB\-\-check=crc64\fP, морате да користите
\fB\-\-check=none\fP или \fB\-\-check=crc32\fP када правите датотеке за угнеждене
системе.
.PP
Споља уграђени системи, сви распакивачи \fB.xz\fP формата подржавају све врсте
\fIпровере\fP, или барем могу да распакују датотеку без испитивања провере
целовитости ако одређена \fIпровера\fP није подржана.
.PP
XZ Embedded подржава BCJ филтере, али само са основним померајем почетка.
.
.SH ПРИМЕРИ
.
.SS Основно
Запакује датотеку \fIfoo\fP у \fIfoo.xz\fP користећи основни ниво запакивања
(\fB\-6\fP), и уклања \fIfoo\fP ако је запакивање успешно:
.RS
.PP
.nf
\f(CRxz foo\fR
.fi
.RE
.PP
Распакује \fIbar.xz\fP у \fIbar\fP и не уклања \fIbar.xz\fP чак и када је распакивање
успешно:
.RS
.PP
.nf
\f(CRxz \-dk bar.xz\fR
.fi
.RE
.PP
Ствара \fIbaz.tar.xz\fP са предподешавањем \fB\-4e\fP (\fB\-4 \-\-extreme\fP), које је
спорије него основно \fB\-6\fP, али захтева мање меморије за запакивање и
распакивање (48\ MiB и 5\ MiB):
.RS
.PP
.nf
\f(CRtar cf \- baz | xz \-4e > baz.tar.xz\fR
.fi
.RE
.PP
Мешавина сажетих и несажетих датотека се може распаковати на стандардни
излаз једном наредбом:
.RS
.PP
.nf
\f(CRxz \-dcf a.txt b.txt.xz c.txt d.txt.lzma > abcd.txt\fR
.fi
.RE
.
.SS "Паралелно запакивање више датотека"
На GNU и *BSD, \fBfind\fP(1) и \fBxargs\fP(1) се могу користити за паралелно
запакивање више датотека:
.RS
.PP
.nf
\f(CRfind . \-type f \e! \-name '*.xz' \-print0 \e
    | xargs \-0r \-P4 \-n16 xz \-T1\fR
.fi
.RE
.PP
Опција \fB\-P\fP за \fBxargs\fP(1) поставља број паралелних \fBxz\fP процеса.  Најбоља
вредност за опцију \fB\-n\fP зависи од тога колико датотека има за запакивање.
Ако има само неколико датотека, вредност би  вероватно требала да буде 1; са
више хиљада датотека, 100 или чак и више може бити одговарајуће за смањење
броја \fBxz\fP процеса које би \fBxargs\fP(1) евентуално направио.
.PP
Опција \fB\-T1\fP за \fBxz\fP је ту да га примора на једнонитни режим, јер се
\fBxargs\fP(1) користи за контролу количине паралелизације.
.
.SS "Режим робота"
Израчунава колико је бајтова укупно сачувано након запакивања више датотека:
.RS
.PP
.nf
\f(CRxz \-\-robot \-\-list *.xz | awk '/^totals/{print $5\-$4}'\fR
.fi
.RE
.PP
Скрипта може желети да зна да користи најновији \fBxz\fP.  Следећа скрипта
\fBsh\fP(1)  проверава да ли је број издања \fBxz\fP алата барем 5.0.0.  Ова
метода је сагласна са старим бета издањима која не подржавају \fB\-\-robot\fP
опцију:
.RS
.PP
.nf
\f(CRif ! eval "$(xz \-\-robot \-\-version 2> /dev/null)" ||
        [ "$XZ_VERSION" \-lt 50000002 ]; then
    echo "Ваш „xz“ је превише стар."
fi
unset XZ_VERSION LIBLZMA_VERSION\fR
.fi
.RE
.PP
Поставља ограничење коришћења меморије за распакивање коришћењем \fBXZ_OPT\fP,
али ако је ограничење већ постављено, не повећава је:
.RS
.PP
.nf
\f(CRNEWLIM=$((123 << 20))\ \ # 123 MiB
OLDLIM=$(xz \-\-robot \-\-info\-memory | cut \-f3)
if [ $OLDLIM \-eq 0 \-o $OLDLIM \-gt $NEWLIM ]; then
    XZ_OPT="$XZ_OPT \-\-memlimit\-decompress=$NEWLIM"
    export XZ_OPT
fi\fR
.fi
.RE
.
.SS "Произвољни ланци филтера запакивача"
Најједноставнија употреба за произвољне ланце филтера прилагођава LZMA2
предподешеност.  Ово може бити корисно, јер предподешености покривају само
подскуп потенцијално корисних комбинација поставки запакивања.
.PP
Колоне ЗапакЦПЈ у табелама из описа опција \fB\-0\fP ... \fB\-9\fP и \fB\-\-extreme\fP су
корисне приликом прилагођавања LZMA2 предподешености.  Овде су значајни
делови прикупљени из те две табеле:
.RS
.PP
.TS
tab(;);
c c
n n.
Преподешеност;ЗапакЦПЈ
\-0;0
\-1;1
\-2;2
\-3;3
\-4;4
\-5;5
\-6;6
\-5e;7
\-6e;8
.TE
.RE
.PP
Ако знате да датотека захтева нешто велики речник (на пример, 32 \ MiB) за
добро запакивање, али желите да је запакујете брже него што би то \fBxz \-8\fP
урадио, предподешеност са ниском вредношћу ЗапакМем (на пример, 1) може се
изменити да користи већи речник:
.RS
.PP
.nf
\f(CRxz \-\-lzma2=preset=1,dict=32MiB foo.tar\fR
.fi
.RE
.PP
Са одређеним датотекама, горња наредба може бити бржа од \fBxz \-6\fP а
запакивање значајно боље.  Међутим, мора бити наглашено да само неке
датотеке имају корист од великог речника док одржавају вредност ЗапакЦПЈ
ниском.  Најочигледнија ситуација, у којој велики речник може доста помоћи,
јесте архива која садржи врло сличне датотеке где свака има најмање неколико
мегабајта.  Величина речника треба да буде значајно већа од сваке засебне
датотеке да би се омогућило да LZMA2 има потпуну предност од сличности
између узастопних датотека.
.PP
Ако је веома велико коришћење меморије запакивача и распакивача у реду, а
датотека која се запакује је барем неколико стотина мегабајта, може бити
корисно користити још већи речник од 64 MiB који ће \fBxz \-9\fP користити:
.RS
.PP
.nf
\f(CRxz \-vv \-\-lzma2=dict=192MiB big_foo.tar\fR
.fi
.RE
.PP
Коришћење \fB\-vv\fP (\fB\-\-verbose \-\-verbose\fP) као у горњем примеру може бити
корисно да се виде захтеви за меморијом запакивача и распакивача.  Знајте да
је коришћење речника већег од величине незапаковане датотеке губитак
меморије, тако да горња наредба није корисна за мале датотеке.
.PP
Понекад време запакивања није важно, али коришћење меморије распакивача
треба да се одржава ниским, на пример, да би се учинило могућим распакивање
датотеке на угнежденом систему,  Следеће наредбе користе \fB\-6e\fP (\fB\-6 \-\-extreme\fP) као основу и постављају речник на само 64\ KiB.  Резултујућа
датотека се може распаковати са XZ Embedded (због тога је ту
\fB\-\-check=crc32\fP) користећи око 100\ KiB меморије.
.RS
.PP
.nf
\f(CRxz \-\-check=crc32 \-\-lzma2=preset=6e,dict=64KiB foo\fR
.fi
.RE
.PP
Ако желите да исцедите што је више могуће бајтова, дотеривање броја битова
контекста литерала (\fIlc\fP) и броја битова положаја (\fIpb\fP) може понекад да
помогне.  Дотеривање броја битова положаја литерала (\fIlp\fP) може такође да
помогне, али обично \fIlc\fP и \fIpb\fP су важнији.  На пример, архива извора кода
садржи углавном US\-ASCII текст, тако да нешто као следеће може да да
незнатно (око 0.1\ %) мању датотеку него \fBxz \-6e\fP (пробајте такође без
\fBlc=4\fP):
.RS
.PP
.nf
\f(CRxz \-\-lzma2=preset=6e,pb=0,lc=4 source_code.tar\fR
.fi
.RE
.PP
Коришћење још једног филтера заједно са LZMA2 може побољшати запакивање са
одређеним врстама датотека.  На пример, за запакивање x86\-32 или x86\-64
дељене библиотеке коришћењем x86 BCJ филтера:
.RS
.PP
.nf
\f(CRxz \-\-x86 \-\-lzma2 libfoo.so\fR
.fi
.RE
.PP
Знајте да поредак опција филтера има значај.  Ако је \fB\-\-x86\fP наведено након
\fB\-\-lzma2\fP, \fBxz\fP ће дати грешку, јер не сме бити никаквог филтера после
LZMA2, и такође зато што се x86 BCJ филтер не може користити као последњи
филтер у ланцу.
.PP
Delta филтер заједно са LZMA2 може дати добре резултате са битмап сликама.
Требало би обично да надјача PNG, који има нешто више напредних филтера него
једноставни делта али користи Deflate за стварно запакивање.
.PP
Слика треба да се сачува у незапакованом формату, на пример, као
незапакована TIFF.  Параметар растојања Delta филтера је постављен да се
подудари са бројем бајтова по пикселу у слици.  На пример, RGB битмапа од 24
бита захтева \fBdist=3\fP, а такође је добро проследити \fBpb=0\fP за LZMA2 да се
прилагоди поравнање од три бајта:
.RS
.PP
.nf
\f(CRxz \-\-delta=dist=3 \-\-lzma2=pb=0 foo.tiff\fR
.fi
.RE
.PP
Ако је више слика стављено у једну архиву (на пример, \fB.tar\fP), Delta филтер
ће радити на томе такође све док све слике не буду имале исти број бајтова
по пикселу.
.
.SH "ВИДИТЕ ТАКОЂЕ"
\fBxzdec\fP(1), \fBxzdiff\fP(1), \fBxzgrep\fP(1), \fBxzless\fP(1), \fBxzmore\fP(1),
\fBgzip\fP(1), \fBbzip2\fP(1), \fB7z\fP(1)
.PP
XZ Utils: <https://tukaani.org/xz/>
.br
XZ Embedded: <https://tukaani.org/xz/embedded.html>
.br
LZMA SDK: <https://7\-zip.org/sdk.html>
