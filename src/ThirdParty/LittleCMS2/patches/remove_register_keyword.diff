diff -Nur lcms2-2.9_orig/include/lcms2.h lcms2-2.9/include/lcms2.h
--- lcms2-2.9_orig/include/lcms2.h	2018-07-11 07:45:19.000000000 +0700
+++ lcms2-2.9/include/lcms2.h	2018-07-11 15:26:16.000000000 +0700
@@ -1247,13 +1247,13 @@
 CMSAPI void*             CMSEXPORT cmsStageData(const cmsStage* mpe);
 
 // Sampling
-typedef cmsInt32Number (* cmsSAMPLER16)   (register const cmsUInt16Number In[],
-                                            register cmsUInt16Number Out[],
-                                            register void * Cargo);
-
-typedef cmsInt32Number (* cmsSAMPLERFLOAT)(register const cmsFloat32Number In[],
-                                            register cmsFloat32Number Out[],
-                                            register void * Cargo);
+typedef cmsInt32Number (* cmsSAMPLER16)   (const cmsUInt16Number In[],
+                                            cmsUInt16Number Out[],
+                                            void * Cargo);
+
+typedef cmsInt32Number (* cmsSAMPLERFLOAT)(const cmsFloat32Number In[],
+                                            cmsFloat32Number Out[],
+                                            void * Cargo);
 
 // Use this flag to prevent changes being written to destination
 #define SAMPLER_INSPECT     0x01000000
diff -Nur lcms2-2.9_orig/include/lcms2_plugin.h lcms2-2.9/include/lcms2_plugin.h
--- lcms2-2.9_orig/include/lcms2_plugin.h	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/include/lcms2_plugin.h	2018-07-11 15:26:35.000000000 +0700
@@ -255,9 +255,9 @@
 // 16 bits forward interpolation. This function performs precision-limited linear interpolation
 // and is supposed to be quite fast. Implementation may be tetrahedral or trilinear, and plug-ins may
 // choose to implement any other interpolation algorithm.
-typedef void (* _cmsInterpFn16)(register const cmsUInt16Number Input[],
-                                register cmsUInt16Number Output[],
-                                register const struct _cms_interp_struc* p);
+typedef void (* _cmsInterpFn16)(const cmsUInt16Number Input[],
+                                cmsUInt16Number Output[],
+                                const struct _cms_interp_struc* p);
 
 // Floating point forward interpolation. Full precision interpolation using floats. This is not a
 // time critical function. Implementation may be tetrahedral or trilinear, and plug-ins may
@@ -340,10 +340,10 @@
 
 struct _cmstransform_struct;
 
-typedef cmsUInt8Number* (* cmsFormatter16)(register struct _cmstransform_struct* CMMcargo,
-                                           register cmsUInt16Number Values[],
-                                           register cmsUInt8Number* Buffer,
-                                           register cmsUInt32Number Stride);
+typedef cmsUInt8Number* (* cmsFormatter16)(struct _cmstransform_struct* CMMcargo,
+                                           cmsUInt16Number Values[],
+                                           cmsUInt8Number* Buffer,
+                                           cmsUInt32Number Stride);
 
 typedef cmsUInt8Number* (* cmsFormatterFloat)(struct _cmstransform_struct* CMMcargo,
                                               cmsFloat32Number Values[],
@@ -541,9 +541,9 @@
 // the optimization  search. Or FALSE if it is unable to optimize and want to give a chance
 // to the rest of optimizers.
 
-typedef void     (* _cmsOPTeval16Fn)(register const cmsUInt16Number In[],
-                                     register cmsUInt16Number Out[],
-                                     register const void* Data);
+typedef void     (* _cmsOPTeval16Fn)(const cmsUInt16Number In[],
+                                     cmsUInt16Number Out[],
+                                     const void* Data);
 
 
 typedef cmsBool  (* _cmsOPToptimizeFn)(cmsPipeline** Lut,
diff -Nur lcms2-2.9_orig/src/cmscgats.c lcms2-2.9/src/cmscgats.c
--- lcms2-2.9_orig/src/cmscgats.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmscgats.c	2018-07-11 15:27:15.000000000 +0700
@@ -683,8 +683,8 @@
 static
 void InSymbol(cmsIT8* it8)
 {
-    register char *idptr;
-    register int k;
+    char *idptr;
+    int k;
     SYMBOL key;
     int sng;
     
diff -Nur lcms2-2.9_orig/src/cmscnvrt.c lcms2-2.9/src/cmscnvrt.c
--- lcms2-2.9_orig/src/cmscnvrt.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmscnvrt.c	2018-07-11 15:27:25.000000000 +0700
@@ -710,7 +710,7 @@
 
 // Preserve black only if that is the only ink used
 static
-int BlackPreservingGrayOnlySampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+int BlackPreservingGrayOnlySampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     GrayOnlyParams* bp = (GrayOnlyParams*) Cargo;
 
@@ -837,7 +837,7 @@
 
 // The CLUT will be stored at 16 bits, but calculations are performed at cmsFloat32Number precision
 static
-int BlackPreservingSampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+int BlackPreservingSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     int i;
     cmsFloat32Number Inf[4], Outf[4];
diff -Nur lcms2-2.9_orig/src/cmserr.c lcms2-2.9/src/cmserr.c
--- lcms2-2.9_orig/src/cmserr.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmserr.c	2018-07-11 15:27:43.000000000 +0700
@@ -38,7 +38,7 @@
 // compare two strings ignoring case
 int CMSEXPORT cmsstrcasecmp(const char* s1, const char* s2)
 {
-    register const unsigned char *us1 = (const unsigned char *)s1,
+    const unsigned char *us1 = (const unsigned char *)s1,
                                  *us2 = (const unsigned char *)s2;
 
     while (toupper(*us1) == toupper(*us2++))
diff -Nur lcms2-2.9_orig/src/cmsgmt.c lcms2-2.9/src/cmsgmt.c
--- lcms2-2.9_orig/src/cmsgmt.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsgmt.c	2018-07-11 15:27:57.000000000 +0700
@@ -211,7 +211,7 @@
 
 
 static
-int GamutSampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+int GamutSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     GAMUTCHAIN*  t = (GAMUTCHAIN* ) Cargo;
     cmsCIELab LabIn1, LabOut1;
@@ -424,7 +424,7 @@
 // This callback just accounts the maximum ink dropped in the given node. It does not populate any
 // memory, as the destination table is NULL. Its only purpose it to know the global maximum.
 static
-int EstimateTAC(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void * Cargo)
+int EstimateTAC(const cmsUInt16Number In[], cmsUInt16Number Out[], void * Cargo)
 {
     cmsTACestimator* bp = (cmsTACestimator*) Cargo;
     cmsFloat32Number RoundTrip[cmsMAXCHANNELS];
diff -Nur lcms2-2.9_orig/src/cmsintrp.c lcms2-2.9/src/cmsintrp.c
--- lcms2-2.9_orig/src/cmsintrp.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsintrp.c	2018-07-11 15:29:40.000000000 +0700
@@ -191,9 +191,9 @@
 
 //  Linear interpolation (Fixed-point optimized)
 static
-void LinLerp1D(register const cmsUInt16Number Value[],
-               register cmsUInt16Number Output[],
-               register const cmsInterpParams* p)
+void LinLerp1D(const cmsUInt16Number Value[],
+               cmsUInt16Number Output[],
+               const cmsInterpParams* p)
 {
     cmsUInt16Number y1, y0;
     int cell0, rest;
@@ -263,9 +263,9 @@
 
 // Eval gray LUT having only one input channel
 static
-void Eval1Input(register const cmsUInt16Number Input[],
-                register cmsUInt16Number Output[],
-                register const cmsInterpParams* p16)
+void Eval1Input(const cmsUInt16Number Input[],
+                cmsUInt16Number Output[],
+                const cmsInterpParams* p16)
 {
        cmsS15Fixed16Number fk;
        cmsS15Fixed16Number k0, k1, rk, K0, K1;
@@ -387,9 +387,9 @@
 
 // Bilinear interpolation (16 bits) - optimized version
 static
-void BilinearInterp16(register const cmsUInt16Number Input[],
-                      register cmsUInt16Number Output[],
-                      register const cmsInterpParams* p)
+void BilinearInterp16(const cmsUInt16Number Input[],
+                      cmsUInt16Number Output[],
+                      const cmsInterpParams* p)
 
 {
 #define DENS(i,j) (LutTable[(i)+(j)+OutChan])
@@ -398,9 +398,9 @@
            const cmsUInt16Number* LutTable = (cmsUInt16Number*) p ->Table;
            int        OutChan, TotalOut;
            cmsS15Fixed16Number    fx, fy;
-  register int        rx, ry;
+           int        rx, ry;
            int        x0, y0;
-  register int        X0, X1, Y0, Y1;
+           int        X0, X1, Y0, Y1;
            int        d00, d01, d10, d11,
                       dx0, dx1,
                       dxy;
@@ -518,9 +518,9 @@
 
 // Trilinear interpolation (16 bits) - optimized version
 static
-void TrilinearInterp16(register const cmsUInt16Number Input[],
-                       register cmsUInt16Number Output[],
-                       register const cmsInterpParams* p)
+void TrilinearInterp16(const cmsUInt16Number Input[],
+                       cmsUInt16Number Output[],
+                       const cmsInterpParams* p)
 
 {
 #define DENS(i,j,k) (LutTable[(i)+(j)+(k)+OutChan])
@@ -529,9 +529,9 @@
            const cmsUInt16Number* LutTable = (cmsUInt16Number*) p ->Table;
            int        OutChan, TotalOut;
            cmsS15Fixed16Number    fx, fy, fz;
-  register int        rx, ry, rz;
+           int        rx, ry, rz;
            int        x0, y0, z0;
-  register int        X0, X1, Y0, Y1, Z0, Z1;
+           int        X0, X1, Y0, Y1, Z0, Z1;
            int        d000, d001, d010, d011,
                       d100, d101, d110, d111,
                       dx00, dx01, dx10, dx11,
@@ -698,9 +698,9 @@
 
 
 static
-void TetrahedralInterp16(register const cmsUInt16Number Input[],
-                         register cmsUInt16Number Output[],
-                         register const cmsInterpParams* p)
+void TetrahedralInterp16(const cmsUInt16Number Input[],
+                         cmsUInt16Number Output[],
+                         const cmsInterpParams* p)
 {
     const cmsUInt16Number* LutTable = (cmsUInt16Number*) p -> Table;
     cmsS15Fixed16Number fx, fy, fz;
@@ -832,9 +832,9 @@
 
 #define DENS(i,j,k) (LutTable[(i)+(j)+(k)+OutChan])
 static
-void Eval4Inputs(register const cmsUInt16Number Input[],
-                     register cmsUInt16Number Output[],
-                     register const cmsInterpParams* p16)
+void Eval4Inputs(const cmsUInt16Number Input[],
+                     cmsUInt16Number Output[],
+                     const cmsInterpParams* p16)
 {
     const cmsUInt16Number* LutTable;
     cmsS15Fixed16Number fk;
@@ -1061,10 +1061,10 @@
 
 
 static
-void Eval5Inputs(register const cmsUInt16Number Input[],
-                 register cmsUInt16Number Output[],
+void Eval5Inputs(const cmsUInt16Number Input[],
+                 cmsUInt16Number Output[],
 
-                 register const cmsInterpParams* p16)
+                 const cmsInterpParams* p16)
 {
        const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;
        cmsS15Fixed16Number fk;
@@ -1150,9 +1150,9 @@
 
 
 static
-void Eval6Inputs(register const cmsUInt16Number Input[],
-                 register cmsUInt16Number Output[],
-                 register const cmsInterpParams* p16)
+void Eval6Inputs(const cmsUInt16Number Input[],
+                 cmsUInt16Number Output[],
+                 const cmsInterpParams* p16)
 {
        const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;
        cmsS15Fixed16Number fk;
@@ -1236,9 +1236,9 @@
 
 
 static
-void Eval7Inputs(register const cmsUInt16Number Input[],
-                 register cmsUInt16Number Output[],
-                 register const cmsInterpParams* p16)
+void Eval7Inputs(const cmsUInt16Number Input[],
+                 cmsUInt16Number Output[],
+                 const cmsInterpParams* p16)
 {
        const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;
        cmsS15Fixed16Number fk;
@@ -1322,9 +1322,9 @@
 }
 
 static
-void Eval8Inputs(register const cmsUInt16Number Input[],
-                 register cmsUInt16Number Output[],
-                 register const cmsInterpParams* p16)
+void Eval8Inputs(const cmsUInt16Number Input[],
+                 cmsUInt16Number Output[],
+                 const cmsInterpParams* p16)
 {
        const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;
        cmsS15Fixed16Number fk;
diff -Nur lcms2-2.9_orig/src/cmslut.c lcms2-2.9/src/cmslut.c
--- lcms2-2.9_orig/src/cmslut.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmslut.c	2018-07-11 15:30:14.000000000 +0700
@@ -700,7 +700,7 @@
 
 
 static
-int IdentitySampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void * Cargo)
+int IdentitySampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void * Cargo)
 {
     int nChan = *(int*) Cargo;
     int i;
@@ -1317,7 +1317,7 @@
 
 // Default to evaluate the LUT on 16 bit-basis. Precision is retained.
 static
-void _LUTeval16(register const cmsUInt16Number In[], register cmsUInt16Number Out[],  register const void* D)
+void _LUTeval16(const cmsUInt16Number In[], cmsUInt16Number Out[],  const void* D)
 {
     cmsPipeline* lut = (cmsPipeline*) D;
     cmsStage *mpe;
@@ -1343,7 +1343,7 @@
 
 // Does evaluate the LUT on cmsFloat32Number-basis.
 static
-void _LUTevalFloat(register const cmsFloat32Number In[], register cmsFloat32Number Out[], const void* D)
+void _LUTevalFloat(const cmsFloat32Number In[], cmsFloat32Number Out[], const void* D)
 {
     cmsPipeline* lut = (cmsPipeline*) D;
     cmsStage *mpe;
diff -Nur lcms2-2.9_orig/src/cmsmd5.c lcms2-2.9/src/cmsmd5.c
--- lcms2-2.9_orig/src/cmsmd5.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsmd5.c	2018-07-11 15:30:23.000000000 +0700
@@ -68,7 +68,7 @@
 void MD5_Transform(cmsUInt32Number buf[4], cmsUInt32Number in[16])
 
 {
-    register cmsUInt32Number a, b, c, d;
+    cmsUInt32Number a, b, c, d;
 
     a = buf[0];
     b = buf[1];
diff -Nur lcms2-2.9_orig/src/cmsopt.c lcms2-2.9/src/cmsopt.c
--- lcms2-2.9_orig/src/cmsopt.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsopt.c	2018-07-11 15:31:53.000000000 +0700
@@ -288,9 +288,9 @@
 }
 
 static
-void Eval16nop1D(register const cmsUInt16Number Input[],
-                 register cmsUInt16Number Output[],
-                 register const struct _cms_interp_struc* p)
+void Eval16nop1D(const cmsUInt16Number Input[],
+                 cmsUInt16Number Output[],
+                 const struct _cms_interp_struc* p)
 {
     Output[0] = Input[0];
 
@@ -298,9 +298,9 @@
 }
 
 static
-void PrelinEval16(register const cmsUInt16Number Input[],
-                  register cmsUInt16Number Output[],
-                  register const void* D)
+void PrelinEval16(const cmsUInt16Number Input[],
+                  cmsUInt16Number Output[],
+                  const void* D)
 {
     Prelin16Data* p16 = (Prelin16Data*) D;
     cmsUInt16Number  StageABC[MAX_INPUT_DIMENSIONS];
@@ -406,7 +406,7 @@
 // Sampler implemented by another LUT. This is a clean way to precalculate the devicelink 3D CLUT for
 // almost any transform. We use floating point precision and then convert from floating point to 16 bits.
 static
-cmsInt32Number XFormSampler16(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+cmsInt32Number XFormSampler16(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     cmsPipeline* Lut = (cmsPipeline*) Cargo;
     cmsFloat32Number InFloat[cmsMAXCHANNELS], OutFloat[cmsMAXCHANNELS];
@@ -909,18 +909,18 @@
 // A optimized interpolation for 8-bit input.
 #define DENS(i,j,k) (LutTable[(i)+(j)+(k)+OutChan])
 static
-void PrelinEval8(register const cmsUInt16Number Input[],
-                  register cmsUInt16Number Output[],
-                  register const void* D)
+void PrelinEval8(const cmsUInt16Number Input[],
+                  cmsUInt16Number Output[],
+                  const void* D)
 {
 
     cmsUInt8Number         r, g, b;
     cmsS15Fixed16Number    rx, ry, rz;
     cmsS15Fixed16Number    c0, c1, c2, c3, Rest;
     int                    OutChan;
-    register cmsS15Fixed16Number X0, X1, Y0, Y1, Z0, Z1;
+    cmsS15Fixed16Number    X0, X1, Y0, Y1, Z0, Z1;
     Prelin8Data* p8 = (Prelin8Data*) D;
-    register const cmsInterpParams* p = p8 ->p;
+    const cmsInterpParams* p = p8 ->p;
     int                    TotalOut = (int) p -> nOutputs;
     const cmsUInt16Number* LutTable = (const cmsUInt16Number*) p->Table;
 
@@ -1330,9 +1330,9 @@
 }
 
 static
-void FastEvaluateCurves8(register const cmsUInt16Number In[],
-                          register cmsUInt16Number Out[],
-                          register const void* D)
+void FastEvaluateCurves8(const cmsUInt16Number In[],
+                          cmsUInt16Number Out[],
+                          const void* D)
 {
     Curves16Data* Data = (Curves16Data*) D;
     int x;
@@ -1347,9 +1347,9 @@
 
 
 static
-void FastEvaluateCurves16(register const cmsUInt16Number In[],
-                          register cmsUInt16Number Out[],
-                          register const void* D)
+void FastEvaluateCurves16(const cmsUInt16Number In[],
+                          cmsUInt16Number Out[],
+                          const void* D)
 {
     Curves16Data* Data = (Curves16Data*) D;
     cmsUInt32Number i;
@@ -1361,9 +1361,9 @@
 
 
 static
-void FastIdentity16(register const cmsUInt16Number In[],
-                    register cmsUInt16Number Out[],
-                    register const void* D)
+void FastIdentity16(const cmsUInt16Number In[],
+                    cmsUInt16Number Out[],
+                    const void* D)
 {
     cmsPipeline* Lut = (cmsPipeline*) D;
     cmsUInt32Number i;
@@ -1522,9 +1522,9 @@
 // to accomplish some performance. Actually it takes 256x3 16 bits tables and 16385 x 3 tables of 8 bits,
 // in total about 50K, and the performance boost is huge!
 static
-void MatShaperEval16(register const cmsUInt16Number In[],
-                     register cmsUInt16Number Out[],
-                     register const void* D)
+void MatShaperEval16(const cmsUInt16Number In[],
+                     cmsUInt16Number Out[],
+                     const void* D)
 {
     MatShaper8Data* p = (MatShaper8Data*) D;
     cmsS1Fixed14Number l1, l2, l3, r, g, b;
diff -Nur lcms2-2.9_orig/src/cmspack.c lcms2-2.9/src/cmspack.c
--- lcms2-2.9_orig/src/cmspack.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmspack.c	2018-07-11 15:35:36.000000000 +0700
@@ -92,10 +92,10 @@
 
 // Does almost everything but is slow
 static
-cmsUInt8Number* UnrollChunkyBytes(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wIn[],
-                                  register cmsUInt8Number* accum,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollChunkyBytes(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wIn[],
+                                  cmsUInt8Number* accum,
+                                  cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan      = T_CHANNELS(info -> InputFormat);
     cmsUInt32Number DoSwap     = T_DOSWAP(info ->InputFormat);
@@ -139,10 +139,10 @@
 
 // Extra channels are just ignored because come in the next planes
 static
-cmsUInt8Number* UnrollPlanarBytes(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wIn[],
-                                  register cmsUInt8Number* accum,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollPlanarBytes(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wIn[],
+                                  cmsUInt8Number* accum,
+                                  cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan     = T_CHANNELS(info -> InputFormat);
     cmsUInt32Number DoSwap    = T_DOSWAP(info ->InputFormat);
@@ -169,10 +169,10 @@
 
 // Special cases, provided for performance
 static
-cmsUInt8Number* Unroll4Bytes(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wIn[],
-                             register cmsUInt8Number* accum,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4Bytes(_cmsTRANSFORM* info,
+                             cmsUInt16Number wIn[],
+                             cmsUInt8Number* accum,
+                             cmsUInt32Number Stride)
 {
     wIn[0] = FROM_8_TO_16(*accum); accum++; // C
     wIn[1] = FROM_8_TO_16(*accum); accum++; // M
@@ -186,10 +186,10 @@
 }
 
 static
-cmsUInt8Number* Unroll4BytesReverse(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4BytesReverse(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number Stride)
 {
     wIn[0] = FROM_8_TO_16(REVERSE_FLAVOR_8(*accum)); accum++; // C
     wIn[1] = FROM_8_TO_16(REVERSE_FLAVOR_8(*accum)); accum++; // M
@@ -203,10 +203,10 @@
 }
 
 static
-cmsUInt8Number* Unroll4BytesSwapFirst(register _cmsTRANSFORM* info,
-                                      register cmsUInt16Number wIn[],
-                                      register cmsUInt8Number* accum,
-                                      register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4BytesSwapFirst(_cmsTRANSFORM* info,
+                                      cmsUInt16Number wIn[],
+                                      cmsUInt8Number* accum,
+                                      cmsUInt32Number Stride)
 {
     wIn[3] = FROM_8_TO_16(*accum); accum++; // K
     wIn[0] = FROM_8_TO_16(*accum); accum++; // C
@@ -221,10 +221,10 @@
 
 // KYMC
 static
-cmsUInt8Number* Unroll4BytesSwap(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4BytesSwap(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[3] = FROM_8_TO_16(*accum); accum++;  // K
     wIn[2] = FROM_8_TO_16(*accum); accum++;  // Y
@@ -238,10 +238,10 @@
 }
 
 static
-cmsUInt8Number* Unroll4BytesSwapSwapFirst(register _cmsTRANSFORM* info,
-                                          register cmsUInt16Number wIn[],
-                                          register cmsUInt8Number* accum,
-                                          register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4BytesSwapSwapFirst(_cmsTRANSFORM* info,
+                                          cmsUInt16Number wIn[],
+                                          cmsUInt8Number* accum,
+                                          cmsUInt32Number Stride)
 {
     wIn[2] = FROM_8_TO_16(*accum); accum++;  // K
     wIn[1] = FROM_8_TO_16(*accum); accum++;  // Y
@@ -255,10 +255,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3Bytes(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wIn[],
-                             register cmsUInt8Number* accum,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3Bytes(_cmsTRANSFORM* info,
+                             cmsUInt16Number wIn[],
+                             cmsUInt8Number* accum,
+                             cmsUInt32Number Stride)
 {
     wIn[0] = FROM_8_TO_16(*accum); accum++;     // R
     wIn[1] = FROM_8_TO_16(*accum); accum++;     // G
@@ -271,10 +271,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3BytesSkip1Swap(register _cmsTRANSFORM* info,
-                                      register cmsUInt16Number wIn[],
-                                      register cmsUInt8Number* accum,
-                                      register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3BytesSkip1Swap(_cmsTRANSFORM* info,
+                                      cmsUInt16Number wIn[],
+                                      cmsUInt8Number* accum,
+                                      cmsUInt32Number Stride)
 {
     accum++; // A
     wIn[2] = FROM_8_TO_16(*accum); accum++; // B
@@ -288,10 +288,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3BytesSkip1SwapSwapFirst(register _cmsTRANSFORM* info, 
-                                              register cmsUInt16Number wIn[], 
-                                              register cmsUInt8Number* accum,
-                                              register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3BytesSkip1SwapSwapFirst(_cmsTRANSFORM* info, 
+                                              cmsUInt16Number wIn[], 
+                                              cmsUInt8Number* accum,
+                                              cmsUInt32Number Stride)
 {
     wIn[2] = FROM_8_TO_16(*accum); accum++; // B
     wIn[1] = FROM_8_TO_16(*accum); accum++; // G
@@ -305,10 +305,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3BytesSkip1SwapFirst(register _cmsTRANSFORM* info, 
-                                           register cmsUInt16Number wIn[], 
-                                           register cmsUInt8Number* accum,
-                                           register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3BytesSkip1SwapFirst(_cmsTRANSFORM* info, 
+                                           cmsUInt16Number wIn[], 
+                                           cmsUInt8Number* accum,
+                                           cmsUInt32Number Stride)
 {
     accum++; // A
     wIn[0] = FROM_8_TO_16(*accum); accum++; // R
@@ -324,10 +324,10 @@
 
 // BRG
 static
-cmsUInt8Number* Unroll3BytesSwap(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3BytesSwap(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[2] = FROM_8_TO_16(*accum); accum++;     // B
     wIn[1] = FROM_8_TO_16(*accum); accum++;     // G
@@ -340,10 +340,10 @@
 }
 
 static
-cmsUInt8Number* UnrollLabV2_8(register _cmsTRANSFORM* info,
-                              register cmsUInt16Number wIn[],
-                              register cmsUInt8Number* accum,
-                              register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollLabV2_8(_cmsTRANSFORM* info,
+                              cmsUInt16Number wIn[],
+                              cmsUInt8Number* accum,
+                              cmsUInt32Number Stride)
 {
     wIn[0] = FomLabV2ToLabV4(FROM_8_TO_16(*accum)); accum++;     // L
     wIn[1] = FomLabV2ToLabV4(FROM_8_TO_16(*accum)); accum++;     // a
@@ -356,10 +356,10 @@
 }
 
 static
-cmsUInt8Number* UnrollALabV2_8(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wIn[],
-                               register cmsUInt8Number* accum,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollALabV2_8(_cmsTRANSFORM* info,
+                               cmsUInt16Number wIn[],
+                               cmsUInt8Number* accum,
+                               cmsUInt32Number Stride)
 {
     accum++;  // A
     wIn[0] = FomLabV2ToLabV4(FROM_8_TO_16(*accum)); accum++;     // L
@@ -373,10 +373,10 @@
 }
 
 static
-cmsUInt8Number* UnrollLabV2_16(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wIn[],
-                               register cmsUInt8Number* accum,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollLabV2_16(_cmsTRANSFORM* info,
+                               cmsUInt16Number wIn[],
+                               cmsUInt8Number* accum,
+                               cmsUInt32Number Stride)
 {
     wIn[0] = FomLabV2ToLabV4(*(cmsUInt16Number*) accum); accum += 2;     // L
     wIn[1] = FomLabV2ToLabV4(*(cmsUInt16Number*) accum); accum += 2;     // a
@@ -390,10 +390,10 @@
 
 // for duplex
 static
-cmsUInt8Number* Unroll2Bytes(register _cmsTRANSFORM* info,
-                                     register cmsUInt16Number wIn[],
-                                     register cmsUInt8Number* accum,
-                                     register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll2Bytes(_cmsTRANSFORM* info,
+                                     cmsUInt16Number wIn[],
+                                     cmsUInt8Number* accum,
+                                     cmsUInt32Number Stride)
 {
     wIn[0] = FROM_8_TO_16(*accum); accum++;     // ch1
     wIn[1] = FROM_8_TO_16(*accum); accum++;     // ch2
@@ -409,10 +409,10 @@
 
 // Monochrome duplicates L into RGB for null-transforms
 static
-cmsUInt8Number* Unroll1Byte(register _cmsTRANSFORM* info,
-                            register cmsUInt16Number wIn[],
-                            register cmsUInt8Number* accum,
-                            register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1Byte(_cmsTRANSFORM* info,
+                            cmsUInt16Number wIn[],
+                            cmsUInt8Number* accum,
+                            cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = FROM_8_TO_16(*accum); accum++;     // L
 
@@ -424,10 +424,10 @@
 
 
 static
-cmsUInt8Number* Unroll1ByteSkip1(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1ByteSkip1(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = FROM_8_TO_16(*accum); accum++;     // L
     accum += 1;
@@ -439,10 +439,10 @@
 }
 
 static
-cmsUInt8Number* Unroll1ByteSkip2(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1ByteSkip2(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = FROM_8_TO_16(*accum); accum++;     // L
     accum += 2;
@@ -454,10 +454,10 @@
 }
 
 static
-cmsUInt8Number* Unroll1ByteReversed(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1ByteReversed(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = REVERSE_FLAVOR_16(FROM_8_TO_16(*accum)); accum++;     // L
 
@@ -469,10 +469,10 @@
 
 
 static
-cmsUInt8Number* UnrollAnyWords(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wIn[],
-                               register cmsUInt8Number* accum,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollAnyWords(_cmsTRANSFORM* info,
+                               cmsUInt16Number wIn[],
+                               cmsUInt8Number* accum,
+                               cmsUInt32Number Stride)
 {
    cmsUInt32Number nChan       = T_CHANNELS(info -> InputFormat);
    cmsUInt32Number SwapEndian  = T_ENDIAN16(info -> InputFormat);
@@ -518,10 +518,10 @@
 }
 
 static
-cmsUInt8Number* UnrollPlanarWords(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wIn[],
-                                  register cmsUInt8Number* accum,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollPlanarWords(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wIn[],
+                                  cmsUInt8Number* accum,
+                                  cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan = T_CHANNELS(info -> InputFormat);
     cmsUInt32Number DoSwap= T_DOSWAP(info ->InputFormat);
@@ -552,10 +552,10 @@
 
 
 static
-cmsUInt8Number* Unroll4Words(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wIn[],
-                             register cmsUInt8Number* accum,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4Words(_cmsTRANSFORM* info,
+                             cmsUInt16Number wIn[],
+                             cmsUInt8Number* accum,
+                             cmsUInt32Number Stride)
 {
     wIn[0] = *(cmsUInt16Number*) accum; accum+= 2; // C
     wIn[1] = *(cmsUInt16Number*) accum; accum+= 2; // M
@@ -569,10 +569,10 @@
 }
 
 static
-cmsUInt8Number* Unroll4WordsReverse(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4WordsReverse(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number Stride)
 {
     wIn[0] = REVERSE_FLAVOR_16(*(cmsUInt16Number*) accum); accum+= 2; // C
     wIn[1] = REVERSE_FLAVOR_16(*(cmsUInt16Number*) accum); accum+= 2; // M
@@ -586,10 +586,10 @@
 }
 
 static
-cmsUInt8Number* Unroll4WordsSwapFirst(register _cmsTRANSFORM* info,
-                                      register cmsUInt16Number wIn[],
-                                      register cmsUInt8Number* accum,
-                                      register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4WordsSwapFirst(_cmsTRANSFORM* info,
+                                      cmsUInt16Number wIn[],
+                                      cmsUInt8Number* accum,
+                                      cmsUInt32Number Stride)
 {
     wIn[3] = *(cmsUInt16Number*) accum; accum+= 2; // K
     wIn[0] = *(cmsUInt16Number*) accum; accum+= 2; // C
@@ -604,10 +604,10 @@
 
 // KYMC
 static
-cmsUInt8Number* Unroll4WordsSwap(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4WordsSwap(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[3] = *(cmsUInt16Number*) accum; accum+= 2; // K
     wIn[2] = *(cmsUInt16Number*) accum; accum+= 2; // Y
@@ -621,10 +621,10 @@
 }
 
 static
-cmsUInt8Number* Unroll4WordsSwapSwapFirst(register _cmsTRANSFORM* info,
-                                          register cmsUInt16Number wIn[],
-                                          register cmsUInt8Number* accum,
-                                          register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll4WordsSwapSwapFirst(_cmsTRANSFORM* info,
+                                          cmsUInt16Number wIn[],
+                                          cmsUInt8Number* accum,
+                                          cmsUInt32Number Stride)
 {
     wIn[2] = *(cmsUInt16Number*) accum; accum+= 2; // K
     wIn[1] = *(cmsUInt16Number*) accum; accum+= 2; // Y
@@ -638,10 +638,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3Words(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wIn[],
-                             register cmsUInt8Number* accum,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3Words(_cmsTRANSFORM* info,
+                             cmsUInt16Number wIn[],
+                             cmsUInt8Number* accum,
+                             cmsUInt32Number Stride)
 {
     wIn[0] = *(cmsUInt16Number*) accum; accum+= 2;  // C R
     wIn[1] = *(cmsUInt16Number*) accum; accum+= 2;  // M G
@@ -654,10 +654,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3WordsSwap(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3WordsSwap(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[2] = *(cmsUInt16Number*) accum; accum+= 2;  // C R
     wIn[1] = *(cmsUInt16Number*) accum; accum+= 2;  // M G
@@ -670,10 +670,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3WordsSkip1Swap(register _cmsTRANSFORM* info,
-                                      register cmsUInt16Number wIn[],
-                                      register cmsUInt8Number* accum,
-                                      register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3WordsSkip1Swap(_cmsTRANSFORM* info,
+                                      cmsUInt16Number wIn[],
+                                      cmsUInt8Number* accum,
+                                      cmsUInt32Number Stride)
 {
     accum += 2; // A
     wIn[2] = *(cmsUInt16Number*) accum; accum += 2; // R
@@ -687,10 +687,10 @@
 }
 
 static
-cmsUInt8Number* Unroll3WordsSkip1SwapFirst(register _cmsTRANSFORM* info,
-                                           register cmsUInt16Number wIn[],
-                                           register cmsUInt8Number* accum,
-                                           register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll3WordsSkip1SwapFirst(_cmsTRANSFORM* info,
+                                           cmsUInt16Number wIn[],
+                                           cmsUInt8Number* accum,
+                                           cmsUInt32Number Stride)
 {
     accum += 2; // A
     wIn[0] = *(cmsUInt16Number*) accum; accum += 2; // R
@@ -704,10 +704,10 @@
 }
 
 static
-cmsUInt8Number* Unroll1Word(register _cmsTRANSFORM* info,
-                            register cmsUInt16Number wIn[],
-                            register cmsUInt8Number* accum,
-                            register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1Word(_cmsTRANSFORM* info,
+                            cmsUInt16Number wIn[],
+                            cmsUInt8Number* accum,
+                            cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = *(cmsUInt16Number*) accum; accum+= 2;   // L
 
@@ -718,10 +718,10 @@
 }
 
 static
-cmsUInt8Number* Unroll1WordReversed(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1WordReversed(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = REVERSE_FLAVOR_16(*(cmsUInt16Number*) accum); accum+= 2;
 
@@ -732,10 +732,10 @@
 }
 
 static
-cmsUInt8Number* Unroll1WordSkip3(register _cmsTRANSFORM* info,
-                                 register cmsUInt16Number wIn[],
-                                 register cmsUInt8Number* accum,
-                                 register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll1WordSkip3(_cmsTRANSFORM* info,
+                                 cmsUInt16Number wIn[],
+                                 cmsUInt8Number* accum,
+                                 cmsUInt32Number Stride)
 {
     wIn[0] = wIn[1] = wIn[2] = *(cmsUInt16Number*) accum;
 
@@ -748,10 +748,10 @@
 }
 
 static
-cmsUInt8Number* Unroll2Words(register _cmsTRANSFORM* info,
-                                     register cmsUInt16Number wIn[],
-                                     register cmsUInt8Number* accum,
-                                     register cmsUInt32Number Stride)
+cmsUInt8Number* Unroll2Words(_cmsTRANSFORM* info,
+                                     cmsUInt16Number wIn[],
+                                     cmsUInt8Number* accum,
+                                     cmsUInt32Number Stride)
 {
     wIn[0] = *(cmsUInt16Number*) accum; accum += 2;    // ch1
     wIn[1] = *(cmsUInt16Number*) accum; accum += 2;    // ch2
@@ -765,10 +765,10 @@
 
 // This is a conversion of Lab double to 16 bits
 static
-cmsUInt8Number* UnrollLabDoubleTo16(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number  Stride)
+cmsUInt8Number* UnrollLabDoubleTo16(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number  Stride)
 {
     if (T_PLANAR(info -> InputFormat)) {
 
@@ -799,10 +799,10 @@
 
 // This is a conversion of Lab float to 16 bits
 static
-cmsUInt8Number* UnrollLabFloatTo16(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number  Stride)
+cmsUInt8Number* UnrollLabFloatTo16(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number  Stride)
 {
     cmsCIELab Lab;
     
@@ -837,10 +837,10 @@
 
 // This is a conversion of XYZ double to 16 bits
 static
-cmsUInt8Number* UnrollXYZDoubleTo16(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wIn[],
-                                    register cmsUInt8Number* accum,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollXYZDoubleTo16(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wIn[],
+                                    cmsUInt8Number* accum,
+                                    cmsUInt32Number Stride)
 {
     if (T_PLANAR(info -> InputFormat)) {
 
@@ -873,10 +873,10 @@
 
 // This is a conversion of XYZ float to 16 bits
 static
-cmsUInt8Number* UnrollXYZFloatTo16(register _cmsTRANSFORM* info,
-                                   register cmsUInt16Number wIn[],
-                                   register cmsUInt8Number* accum,
-                                   register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollXYZFloatTo16(_cmsTRANSFORM* info,
+                                   cmsUInt16Number wIn[],
+                                   cmsUInt8Number* accum,
+                                   cmsUInt32Number Stride)
 {
     if (T_PLANAR(info -> InputFormat)) {
 
@@ -953,10 +953,10 @@
 
 // Inks does come in percentage, remaining cases are between 0..1.0, again to 16 bits
 static
-cmsUInt8Number* UnrollDoubleTo16(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wIn[],
-                                register cmsUInt8Number* accum,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollDoubleTo16(_cmsTRANSFORM* info,
+                                cmsUInt16Number wIn[],
+                                cmsUInt8Number* accum,
+                                cmsUInt32Number Stride)
 {
 
     cmsUInt32Number nChan      = T_CHANNELS(info -> InputFormat);
@@ -1011,10 +1011,10 @@
 
 
 static
-cmsUInt8Number* UnrollFloatTo16(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wIn[],
-                                register cmsUInt8Number* accum,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollFloatTo16(_cmsTRANSFORM* info,
+                                cmsUInt16Number wIn[],
+                                cmsUInt8Number* accum,
+                                cmsUInt32Number Stride)
 {
 
     cmsUInt32Number nChan  = T_CHANNELS(info -> InputFormat);
@@ -1070,10 +1070,10 @@
 
 // For 1 channel, we need to duplicate data (it comes in 0..1.0 range)
 static
-cmsUInt8Number* UnrollDouble1Chan(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wIn[],
-                                  register cmsUInt8Number* accum,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollDouble1Chan(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wIn[],
+                                  cmsUInt8Number* accum,
+                                  cmsUInt32Number Stride)
 {
     cmsFloat64Number* Inks = (cmsFloat64Number*) accum;
 
@@ -1323,10 +1323,10 @@
 // Generic chunky for byte
 
 static
-cmsUInt8Number* PackAnyBytes(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wOut[],
-                             register cmsUInt8Number* output,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* PackAnyBytes(_cmsTRANSFORM* info,
+                             cmsUInt16Number wOut[],
+                             cmsUInt8Number* output,
+                             cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan  = T_CHANNELS(info -> OutputFormat);
     cmsUInt32Number DoSwap   = T_DOSWAP(info ->OutputFormat);
@@ -1375,10 +1375,10 @@
 
 
 static
-cmsUInt8Number* PackAnyWords(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wOut[],
-                             register cmsUInt8Number* output,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* PackAnyWords(_cmsTRANSFORM* info,
+                             cmsUInt16Number wOut[],
+                             cmsUInt8Number* output,
+                             cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan  = T_CHANNELS(info -> OutputFormat);
     cmsUInt32Number SwapEndian = T_ENDIAN16(info -> OutputFormat);
@@ -1432,10 +1432,10 @@
 
 
 static
-cmsUInt8Number* PackPlanarBytes(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wOut[],
-                                register cmsUInt8Number* output,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* PackPlanarBytes(_cmsTRANSFORM* info,
+                                cmsUInt16Number wOut[],
+                                cmsUInt8Number* output,
+                                cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan     = T_CHANNELS(info -> OutputFormat);
     cmsUInt32Number DoSwap    = T_DOSWAP(info ->OutputFormat);
@@ -1466,10 +1466,10 @@
 
 
 static
-cmsUInt8Number* PackPlanarWords(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wOut[],
-                                register cmsUInt8Number* output,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* PackPlanarWords(_cmsTRANSFORM* info,
+                                cmsUInt16Number wOut[],
+                                cmsUInt8Number* output,
+                                cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan      = T_CHANNELS(info -> OutputFormat);
     cmsUInt32Number DoSwap     = T_DOSWAP(info ->OutputFormat);
@@ -1505,10 +1505,10 @@
 // CMYKcm (unrolled for speed)
 
 static
-cmsUInt8Number* Pack6Bytes(register _cmsTRANSFORM* info,
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* Pack6Bytes(_cmsTRANSFORM* info,
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[0]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -1526,10 +1526,10 @@
 // KCMYcm
 
 static
-cmsUInt8Number* Pack6BytesSwap(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack6BytesSwap(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[5]);
     *output++ = FROM_16_TO_8(wOut[4]);
@@ -1546,10 +1546,10 @@
 
 // CMYKcm
 static
-cmsUInt8Number* Pack6Words(register _cmsTRANSFORM* info,
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* Pack6Words(_cmsTRANSFORM* info,
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[0];
     output+= 2;
@@ -1572,10 +1572,10 @@
 
 // KCMYcm
 static
-cmsUInt8Number* Pack6WordsSwap(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack6WordsSwap(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[5];
     output+= 2;
@@ -1598,10 +1598,10 @@
 
 
 static
-cmsUInt8Number* Pack4Bytes(register _cmsTRANSFORM* info,
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4Bytes(_cmsTRANSFORM* info,
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[0]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -1615,10 +1615,10 @@
 }
 
 static
-cmsUInt8Number* Pack4BytesReverse(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wOut[],
-                                  register cmsUInt8Number* output,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4BytesReverse(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wOut[],
+                                  cmsUInt8Number* output,
+                                  cmsUInt32Number Stride)
 {
     *output++ = REVERSE_FLAVOR_8(FROM_16_TO_8(wOut[0]));
     *output++ = REVERSE_FLAVOR_8(FROM_16_TO_8(wOut[1]));
@@ -1633,10 +1633,10 @@
 
 
 static
-cmsUInt8Number* Pack4BytesSwapFirst(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4BytesSwapFirst(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[3]);
     *output++ = FROM_16_TO_8(wOut[0]);
@@ -1651,10 +1651,10 @@
 
 // ABGR
 static
-cmsUInt8Number* Pack4BytesSwap(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4BytesSwap(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[3]);
     *output++ = FROM_16_TO_8(wOut[2]);
@@ -1668,10 +1668,10 @@
 }
 
 static
-cmsUInt8Number* Pack4BytesSwapSwapFirst(register _cmsTRANSFORM* info,
-                                        register cmsUInt16Number wOut[],
-                                        register cmsUInt8Number* output,
-                                        register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4BytesSwapSwapFirst(_cmsTRANSFORM* info,
+                                        cmsUInt16Number wOut[],
+                                        cmsUInt8Number* output,
+                                        cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[2]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -1685,10 +1685,10 @@
 }
 
 static
-cmsUInt8Number* Pack4Words(register _cmsTRANSFORM* info,
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4Words(_cmsTRANSFORM* info,
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[0];
     output+= 2;
@@ -1706,10 +1706,10 @@
 }
 
 static
-cmsUInt8Number* Pack4WordsReverse(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wOut[],
-                                  register cmsUInt8Number* output,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4WordsReverse(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wOut[],
+                                  cmsUInt8Number* output,
+                                  cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = REVERSE_FLAVOR_16(wOut[0]);
     output+= 2;
@@ -1728,10 +1728,10 @@
 
 // ABGR
 static
-cmsUInt8Number* Pack4WordsSwap(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4WordsSwap(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[3];
     output+= 2;
@@ -1750,10 +1750,10 @@
 
 // CMYK
 static
-cmsUInt8Number* Pack4WordsBigEndian(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Pack4WordsBigEndian(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = CHANGE_ENDIAN(wOut[0]);
     output+= 2;
@@ -1772,10 +1772,10 @@
 
 
 static
-cmsUInt8Number* PackLabV2_8(register _cmsTRANSFORM* info,
-                            register cmsUInt16Number wOut[],
-                            register cmsUInt8Number* output,
-                            register cmsUInt32Number Stride)
+cmsUInt8Number* PackLabV2_8(_cmsTRANSFORM* info,
+                            cmsUInt16Number wOut[],
+                            cmsUInt8Number* output,
+                            cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(FomLabV4ToLabV2(wOut[0]));
     *output++ = FROM_16_TO_8(FomLabV4ToLabV2(wOut[1]));
@@ -1788,10 +1788,10 @@
 }
 
 static
-cmsUInt8Number* PackALabV2_8(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wOut[],
-                             register cmsUInt8Number* output,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* PackALabV2_8(_cmsTRANSFORM* info,
+                             cmsUInt16Number wOut[],
+                             cmsUInt8Number* output,
+                             cmsUInt32Number Stride)
 {
     output++;
     *output++ = FROM_16_TO_8(FomLabV4ToLabV2(wOut[0]));
@@ -1805,10 +1805,10 @@
 }
 
 static
-cmsUInt8Number* PackLabV2_16(register _cmsTRANSFORM* info,
-                             register cmsUInt16Number wOut[],
-                             register cmsUInt8Number* output,
-                             register cmsUInt32Number Stride)
+cmsUInt8Number* PackLabV2_16(_cmsTRANSFORM* info,
+                             cmsUInt16Number wOut[],
+                             cmsUInt8Number* output,
+                             cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = FomLabV4ToLabV2(wOut[0]);
     output += 2;
@@ -1824,10 +1824,10 @@
 }
 
 static
-cmsUInt8Number* Pack3Bytes(register _cmsTRANSFORM* info,
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3Bytes(_cmsTRANSFORM* info,
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[0]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -1840,10 +1840,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesOptimized(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesOptimized(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
     *output++ = (wOut[0] & 0xFFU);
     *output++ = (wOut[1] & 0xFFU);
@@ -1856,10 +1856,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesSwap(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesSwap(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[2]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -1872,10 +1872,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesSwapOptimized(register _cmsTRANSFORM* info,
-                                        register cmsUInt16Number wOut[],
-                                        register cmsUInt8Number* output,
-                                        register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesSwapOptimized(_cmsTRANSFORM* info,
+                                        cmsUInt16Number wOut[],
+                                        cmsUInt8Number* output,
+                                        cmsUInt32Number Stride)
 {
     *output++ = (wOut[2] & 0xFFU);
     *output++ = (wOut[1] & 0xFFU);
@@ -1889,10 +1889,10 @@
 
 
 static
-cmsUInt8Number* Pack3Words(register _cmsTRANSFORM* info,
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3Words(_cmsTRANSFORM* info,
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[0];
     output+= 2;
@@ -1908,10 +1908,10 @@
 }
 
 static
-cmsUInt8Number* Pack3WordsSwap(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3WordsSwap(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[2];
     output+= 2;
@@ -1927,10 +1927,10 @@
 }
 
 static
-cmsUInt8Number* Pack3WordsBigEndian(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3WordsBigEndian(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = CHANGE_ENDIAN(wOut[0]);
     output+= 2;
@@ -1946,10 +1946,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1(register _cmsTRANSFORM* info,
-                                   register cmsUInt16Number wOut[],
-                                   register cmsUInt8Number* output,
-                                   register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1(_cmsTRANSFORM* info,
+                                   cmsUInt16Number wOut[],
+                                   cmsUInt8Number* output,
+                                   cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[0]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -1963,10 +1963,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1Optimized(register _cmsTRANSFORM* info,
-                                            register cmsUInt16Number wOut[],
-                                            register cmsUInt8Number* output,
-                                            register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1Optimized(_cmsTRANSFORM* info,
+                                            cmsUInt16Number wOut[],
+                                            cmsUInt8Number* output,
+                                            cmsUInt32Number Stride)
 {
     *output++ = (wOut[0] & 0xFFU);
     *output++ = (wOut[1] & 0xFFU);
@@ -1981,10 +1981,10 @@
 
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1SwapFirst(register _cmsTRANSFORM* info,
-                                            register cmsUInt16Number wOut[],
-                                            register cmsUInt8Number* output,
-                                            register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1SwapFirst(_cmsTRANSFORM* info,
+                                            cmsUInt16Number wOut[],
+                                            cmsUInt8Number* output,
+                                            cmsUInt32Number Stride)
 {
     output++;
     *output++ = FROM_16_TO_8(wOut[0]);
@@ -1998,10 +1998,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1SwapFirstOptimized(register _cmsTRANSFORM* info,
-                                                     register cmsUInt16Number wOut[],
-                                                     register cmsUInt8Number* output,
-                                                     register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1SwapFirstOptimized(_cmsTRANSFORM* info,
+                                                     cmsUInt16Number wOut[],
+                                                     cmsUInt8Number* output,
+                                                     cmsUInt32Number Stride)
 {
     output++;
     *output++ = (wOut[0] & 0xFFU);
@@ -2015,10 +2015,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1Swap(register _cmsTRANSFORM* info,
-                                       register cmsUInt16Number wOut[],
-                                       register cmsUInt8Number* output,
-                                       register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1Swap(_cmsTRANSFORM* info,
+                                       cmsUInt16Number wOut[],
+                                       cmsUInt8Number* output,
+                                       cmsUInt32Number Stride)
 {
     output++;
     *output++ = FROM_16_TO_8(wOut[2]);
@@ -2032,10 +2032,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1SwapOptimized(register _cmsTRANSFORM* info,
-                                                register cmsUInt16Number wOut[],
-                                                register cmsUInt8Number* output,
-                                                register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1SwapOptimized(_cmsTRANSFORM* info,
+                                                cmsUInt16Number wOut[],
+                                                cmsUInt8Number* output,
+                                                cmsUInt32Number Stride)
 {
     output++;
     *output++ = (wOut[2] & 0xFFU);
@@ -2050,10 +2050,10 @@
 
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1SwapSwapFirst(register _cmsTRANSFORM* info,
-                                                register cmsUInt16Number wOut[],
-                                                register cmsUInt8Number* output,
-                                                register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1SwapSwapFirst(_cmsTRANSFORM* info,
+                                                cmsUInt16Number wOut[],
+                                                cmsUInt8Number* output,
+                                                cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[2]);
     *output++ = FROM_16_TO_8(wOut[1]);
@@ -2067,10 +2067,10 @@
 }
 
 static
-cmsUInt8Number* Pack3BytesAndSkip1SwapSwapFirstOptimized(register _cmsTRANSFORM* info,
-                                                         register cmsUInt16Number wOut[],
-                                                         register cmsUInt8Number* output,
-                                                         register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3BytesAndSkip1SwapSwapFirstOptimized(_cmsTRANSFORM* info,
+                                                         cmsUInt16Number wOut[],
+                                                         cmsUInt8Number* output,
+                                                         cmsUInt32Number Stride)
 {
     *output++ = (wOut[2] & 0xFFU);
     *output++ = (wOut[1] & 0xFFU);
@@ -2084,10 +2084,10 @@
 }
 
 static
-cmsUInt8Number* Pack3WordsAndSkip1(register _cmsTRANSFORM* info,
-                                   register cmsUInt16Number wOut[],
-                                   register cmsUInt8Number* output,
-                                   register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3WordsAndSkip1(_cmsTRANSFORM* info,
+                                   cmsUInt16Number wOut[],
+                                   cmsUInt8Number* output,
+                                   cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[0];
     output+= 2;
@@ -2104,10 +2104,10 @@
 }
 
 static
-cmsUInt8Number* Pack3WordsAndSkip1Swap(register _cmsTRANSFORM* info,
-                                       register cmsUInt16Number wOut[],
-                                       register cmsUInt8Number* output,
-                                       register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3WordsAndSkip1Swap(_cmsTRANSFORM* info,
+                                       cmsUInt16Number wOut[],
+                                       cmsUInt8Number* output,
+                                       cmsUInt32Number Stride)
 {
     output+= 2;
     *(cmsUInt16Number*) output = wOut[2];
@@ -2125,10 +2125,10 @@
 
 
 static
-cmsUInt8Number* Pack3WordsAndSkip1SwapFirst(register _cmsTRANSFORM* info,
-                                            register cmsUInt16Number wOut[],
-                                            register cmsUInt8Number* output,
-                                            register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3WordsAndSkip1SwapFirst(_cmsTRANSFORM* info,
+                                            cmsUInt16Number wOut[],
+                                            cmsUInt8Number* output,
+                                            cmsUInt32Number Stride)
 {
     output+= 2;
     *(cmsUInt16Number*) output = wOut[0];
@@ -2146,10 +2146,10 @@
 
 
 static
-cmsUInt8Number* Pack3WordsAndSkip1SwapSwapFirst(register _cmsTRANSFORM* info,
-                                                register cmsUInt16Number wOut[],
-                                                register cmsUInt8Number* output,
-                                                register cmsUInt32Number Stride)
+cmsUInt8Number* Pack3WordsAndSkip1SwapSwapFirst(_cmsTRANSFORM* info,
+                                                cmsUInt16Number wOut[],
+                                                cmsUInt8Number* output,
+                                                cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[2];
     output+= 2;
@@ -2168,10 +2168,10 @@
 
 
 static
-cmsUInt8Number* Pack1Byte(register _cmsTRANSFORM* info,
-                          register cmsUInt16Number wOut[],
-                          register cmsUInt8Number* output,
-                          register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1Byte(_cmsTRANSFORM* info,
+                          cmsUInt16Number wOut[],
+                          cmsUInt8Number* output,
+                          cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[0]);
 
@@ -2183,10 +2183,10 @@
 
 
 static
-cmsUInt8Number* Pack1ByteReversed(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wOut[],
-                                  register cmsUInt8Number* output,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1ByteReversed(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wOut[],
+                                  cmsUInt8Number* output,
+                                  cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(REVERSE_FLAVOR_16(wOut[0]));
 
@@ -2198,10 +2198,10 @@
 
 
 static
-cmsUInt8Number* Pack1ByteSkip1(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1ByteSkip1(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *output++ = FROM_16_TO_8(wOut[0]);
     output++;
@@ -2214,10 +2214,10 @@
 
 
 static
-cmsUInt8Number* Pack1ByteSkip1SwapFirst(register _cmsTRANSFORM* info,
-                                        register cmsUInt16Number wOut[],
-                                        register cmsUInt8Number* output,
-                                        register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1ByteSkip1SwapFirst(_cmsTRANSFORM* info,
+                                        cmsUInt16Number wOut[],
+                                        cmsUInt8Number* output,
+                                        cmsUInt32Number Stride)
 {
     output++;
     *output++ = FROM_16_TO_8(wOut[0]);
@@ -2229,10 +2229,10 @@
 }
 
 static
-cmsUInt8Number* Pack1Word(register _cmsTRANSFORM* info,
-                          register cmsUInt16Number wOut[],
-                          register cmsUInt8Number* output,
-                          register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1Word(_cmsTRANSFORM* info,
+                          cmsUInt16Number wOut[],
+                          cmsUInt8Number* output,
+                          cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[0];
     output+= 2;
@@ -2245,10 +2245,10 @@
 
 
 static
-cmsUInt8Number* Pack1WordReversed(register _cmsTRANSFORM* info,
-                                  register cmsUInt16Number wOut[],
-                                  register cmsUInt8Number* output,
-                                  register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1WordReversed(_cmsTRANSFORM* info,
+                                  cmsUInt16Number wOut[],
+                                  cmsUInt8Number* output,
+                                  cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = REVERSE_FLAVOR_16(wOut[0]);
     output+= 2;
@@ -2260,10 +2260,10 @@
 }
 
 static
-cmsUInt8Number* Pack1WordBigEndian(register _cmsTRANSFORM* info,
-                                   register cmsUInt16Number wOut[],
-                                   register cmsUInt8Number* output,
-                                   register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1WordBigEndian(_cmsTRANSFORM* info,
+                                   cmsUInt16Number wOut[],
+                                   cmsUInt8Number* output,
+                                   cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = CHANGE_ENDIAN(wOut[0]);
     output+= 2;
@@ -2276,10 +2276,10 @@
 
 
 static
-cmsUInt8Number* Pack1WordSkip1(register _cmsTRANSFORM* info,
-                               register cmsUInt16Number wOut[],
-                               register cmsUInt8Number* output,
-                               register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1WordSkip1(_cmsTRANSFORM* info,
+                               cmsUInt16Number wOut[],
+                               cmsUInt8Number* output,
+                               cmsUInt32Number Stride)
 {
     *(cmsUInt16Number*) output = wOut[0];
     output+= 4;
@@ -2291,10 +2291,10 @@
 }
 
 static
-cmsUInt8Number* Pack1WordSkip1SwapFirst(register _cmsTRANSFORM* info,
-                                        register cmsUInt16Number wOut[],
-                                        register cmsUInt8Number* output,
-                                        register cmsUInt32Number Stride)
+cmsUInt8Number* Pack1WordSkip1SwapFirst(_cmsTRANSFORM* info,
+                                        cmsUInt16Number wOut[],
+                                        cmsUInt8Number* output,
+                                        cmsUInt32Number Stride)
 {
     output += 2;
     *(cmsUInt16Number*) output = wOut[0];
@@ -2309,10 +2309,10 @@
 
 // Unencoded Float values -- don't try optimize speed
 static
-cmsUInt8Number* PackLabDoubleFrom16(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* PackLabDoubleFrom16(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
 
     if (T_PLANAR(info -> OutputFormat)) {
@@ -2336,10 +2336,10 @@
 
 
 static
-cmsUInt8Number* PackLabFloatFrom16(register _cmsTRANSFORM* info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* PackLabFloatFrom16(_cmsTRANSFORM* info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
     cmsCIELab  Lab;
     cmsLabEncoded2Float(&Lab, wOut);
@@ -2367,10 +2367,10 @@
 }
 
 static
-cmsUInt8Number* PackXYZDoubleFrom16(register _cmsTRANSFORM* Info,
-                                    register cmsUInt16Number wOut[],
-                                    register cmsUInt8Number* output,
-                                    register cmsUInt32Number Stride)
+cmsUInt8Number* PackXYZDoubleFrom16(_cmsTRANSFORM* Info,
+                                    cmsUInt16Number wOut[],
+                                    cmsUInt8Number* output,
+                                    cmsUInt32Number Stride)
 {
     if (T_PLANAR(Info -> OutputFormat)) {
 
@@ -2396,10 +2396,10 @@
 }
 
 static
-cmsUInt8Number* PackXYZFloatFrom16(register _cmsTRANSFORM* Info,
-                                   register cmsUInt16Number wOut[],
-                                   register cmsUInt8Number* output,
-                                   register cmsUInt32Number Stride)
+cmsUInt8Number* PackXYZFloatFrom16(_cmsTRANSFORM* Info,
+                                   cmsUInt16Number wOut[],
+                                   cmsUInt8Number* output,
+                                   cmsUInt32Number Stride)
 {
     if (T_PLANAR(Info -> OutputFormat)) {
 
@@ -2431,10 +2431,10 @@
 }
 
 static
-cmsUInt8Number* PackDoubleFrom16(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wOut[],
-                                register cmsUInt8Number* output,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* PackDoubleFrom16(_cmsTRANSFORM* info,
+                                cmsUInt16Number wOut[],
+                                cmsUInt8Number* output,
+                                cmsUInt32Number Stride)
 {
     cmsUInt32Number nChan      = T_CHANNELS(info -> OutputFormat);
     cmsUInt32Number DoSwap     = T_DOSWAP(info ->OutputFormat);
@@ -2484,10 +2484,10 @@
 
 
 static
-cmsUInt8Number* PackFloatFrom16(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wOut[],
-                                register cmsUInt8Number* output,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* PackFloatFrom16(_cmsTRANSFORM* info,
+                                cmsUInt16Number wOut[],
+                                cmsUInt8Number* output,
+                                cmsUInt32Number Stride)
 {
        cmsUInt32Number nChan      = T_CHANNELS(info->OutputFormat);
        cmsUInt32Number DoSwap     = T_DOSWAP(info->OutputFormat);
@@ -2773,10 +2773,10 @@
 // Decodes an stream of half floats to wIn[] described by input format
 
 static
-cmsUInt8Number* UnrollHalfTo16(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wIn[],
-                                register cmsUInt8Number* accum,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* UnrollHalfTo16(_cmsTRANSFORM* info,
+                                cmsUInt16Number wIn[],
+                                cmsUInt8Number* accum,
+                                cmsUInt32Number Stride)
 {
 
     cmsUInt32Number nChan      = T_CHANNELS(info -> InputFormat);
@@ -2879,10 +2879,10 @@
 
 
 static
-cmsUInt8Number* PackHalfFrom16(register _cmsTRANSFORM* info,
-                                register cmsUInt16Number wOut[],
-                                register cmsUInt8Number* output,
-                                register cmsUInt32Number Stride)
+cmsUInt8Number* PackHalfFrom16(_cmsTRANSFORM* info,
+                                cmsUInt16Number wOut[],
+                                cmsUInt8Number* output,
+                                cmsUInt32Number Stride)
 {
        cmsUInt32Number nChan      = T_CHANNELS(info->OutputFormat);
        cmsUInt32Number DoSwap     = T_DOSWAP(info->OutputFormat);
diff -Nur lcms2-2.9_orig/src/cmsps2.c lcms2-2.9/src/cmsps2.c
--- lcms2-2.9_orig/src/cmsps2.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsps2.c	2018-07-11 15:36:05.000000000 +0700
@@ -582,7 +582,7 @@
 //  component. -1 is used to mark beginning of whole block.
 
 static
-int OutputValueSampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+int OutputValueSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     cmsPsSamplerCargo* sc = (cmsPsSamplerCargo*) Cargo;
     cmsUInt32Number i;
diff -Nur lcms2-2.9_orig/src/cmsvirt.c lcms2-2.9/src/cmsvirt.c
--- lcms2-2.9_orig/src/cmsvirt.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsvirt.c	2018-07-11 15:36:28.000000000 +0700
@@ -361,7 +361,7 @@
 //     K: Does not change
 
 static
-int InkLimitingSampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+int InkLimitingSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     cmsFloat64Number InkLimit = *(cmsFloat64Number *) Cargo;
     cmsFloat64Number SumCMY, SumCMYK, Ratio;
@@ -686,7 +686,7 @@
 
 
 static
-int bchswSampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+int bchswSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     cmsCIELab LabIn, LabOut;
     cmsCIELCh LChIn, LChOut;
diff -Nur lcms2-2.9_orig/src/cmsxform.c lcms2-2.9/src/cmsxform.c
--- lcms2-2.9_orig/src/cmsxform.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/src/cmsxform.c	2018-07-11 15:36:40.000000000 +0700
@@ -388,8 +388,8 @@
                         cmsUInt32Number LineCount,
                         const cmsStride* Stride)
 {
-    register cmsUInt8Number* accum;
-    register cmsUInt8Number* output;
+    cmsUInt8Number* accum;
+    cmsUInt8Number* output;
     cmsUInt16Number wIn[cmsMAXCHANNELS], wOut[cmsMAXCHANNELS];
     cmsUInt32Number i, j, strideIn, strideOut;
 
diff -Nur lcms2-2.9_orig/testbed/testcms2.c lcms2-2.9/testbed/testcms2.c
--- lcms2-2.9_orig/testbed/testcms2.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/testbed/testcms2.c	2018-07-11 16:06:02.000000000 +0700
@@ -467,7 +467,7 @@
 }
 
 static
-cmsInt32Number ForwardSampler(register const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
+cmsInt32Number ForwardSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     FakeCMYKParams* p = (FakeCMYKParams*) Cargo;
     cmsFloat64Number rgb[3], cmyk[4];
@@ -497,7 +497,7 @@
 
 
 static
-cmsInt32Number ReverseSampler(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void* Cargo)
+cmsInt32Number ReverseSampler(const cmsUInt16Number In[], cmsUInt16Number Out[], void* Cargo)
 {
     FakeCMYKParams* p = (FakeCMYKParams*) Cargo;
     cmsFloat64Number c, m, y, k, rgb[3];
@@ -1733,9 +1733,9 @@
 
 
 static
-cmsInt32Number Sampler3D(register const cmsUInt16Number In[],
-               register cmsUInt16Number Out[],
-               register void * Cargo)
+cmsInt32Number Sampler3D(const cmsUInt16Number In[],
+               cmsUInt16Number Out[],
+               void * Cargo)
 {
 
     Out[0] = Fn8D1(In[0], In[1], In[2], 0, 0, 0, 0, 0, 3);
@@ -1749,9 +1749,9 @@
 }
 
 static
-cmsInt32Number Sampler4D(register const cmsUInt16Number In[],
-               register cmsUInt16Number Out[],
-               register void * Cargo)
+cmsInt32Number Sampler4D(const cmsUInt16Number In[],
+               cmsUInt16Number Out[],
+               void * Cargo)
 {
 
     Out[0] = Fn8D1(In[0], In[1], In[2], In[3], 0, 0, 0, 0, 4);
@@ -1764,9 +1764,9 @@
 }
 
 static
-cmsInt32Number Sampler5D(register const cmsUInt16Number In[],
-               register cmsUInt16Number Out[],
-               register void * Cargo)
+cmsInt32Number Sampler5D(const cmsUInt16Number In[],
+               cmsUInt16Number Out[],
+               void * Cargo)
 {
 
     Out[0] = Fn8D1(In[0], In[1], In[2], In[3], In[4], 0, 0, 0, 5);
@@ -1779,9 +1779,9 @@
 }
 
 static
-cmsInt32Number Sampler6D(register const cmsUInt16Number In[],
-               register cmsUInt16Number Out[],
-               register void * Cargo)
+cmsInt32Number Sampler6D(const cmsUInt16Number In[],
+               cmsUInt16Number Out[],
+               void * Cargo)
 {
 
     Out[0] = Fn8D1(In[0], In[1], In[2], In[3], In[4], In[5], 0, 0, 6);
@@ -1794,9 +1794,9 @@
 }
 
 static
-cmsInt32Number Sampler7D(register const cmsUInt16Number In[],
-               register cmsUInt16Number Out[],
-               register void * Cargo)
+cmsInt32Number Sampler7D(const cmsUInt16Number In[],
+               cmsUInt16Number Out[],
+               void * Cargo)
 {
 
     Out[0] = Fn8D1(In[0], In[1], In[2], In[3], In[4], In[5], In[6], 0, 7);
@@ -1809,9 +1809,9 @@
 }
 
 static
-cmsInt32Number Sampler8D(register const cmsUInt16Number In[],
-               register cmsUInt16Number Out[],
-               register void * Cargo)
+cmsInt32Number Sampler8D(const cmsUInt16Number In[],
+               cmsUInt16Number Out[],
+               void * Cargo)
 {
 
     Out[0] = Fn8D1(In[0], In[1], In[2], In[3], In[4], In[5], In[6], In[7], 8);
diff -Nur lcms2-2.9_orig/testbed/testplugin.c lcms2-2.9/testbed/testplugin.c
--- lcms2-2.9_orig/testbed/testplugin.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/testbed/testplugin.c	2018-07-11 16:06:21.000000000 +0700
@@ -239,9 +239,9 @@
 
 // This fake interpolation just uses scrambled negated indexes for output
 static
-void Fake3D16(register const cmsUInt16Number Input[],
-              register cmsUInt16Number Output[],
-              register const struct _cms_interp_struc* p)
+void Fake3D16(const cmsUInt16Number Input[],
+              cmsUInt16Number Output[],
+              const struct _cms_interp_struc* p)
 {
        Output[0] =  0xFFFF - Input[2];
        Output[1] =  0xFFFF - Input[1];
@@ -635,10 +635,10 @@
 
 #define TYPE_RGB_565  (COLORSPACE_SH(PT_RGB)|CHANNELS_SH(3)|BYTES_SH(0) | (1 << 23))
 
-cmsUInt8Number* my_Unroll565(register struct _cmstransform_struct* nfo, 
-                            register cmsUInt16Number wIn[], 
-                            register cmsUInt8Number* accum,
-                            register cmsUInt32Number Stride)
+cmsUInt8Number* my_Unroll565(struct _cmstransform_struct* nfo, 
+                            cmsUInt16Number wIn[], 
+                            cmsUInt8Number* accum,
+                            cmsUInt32Number Stride)
 {
     cmsUInt16Number pixel = *(cmsUInt16Number*) accum;  // Take whole pixel
 
@@ -653,13 +653,13 @@
     return accum + 2;
 }
 
-cmsUInt8Number* my_Pack565(register _cmsTRANSFORM* info, 
-                           register cmsUInt16Number wOut[],
-                           register cmsUInt8Number* output,
-                           register cmsUInt32Number Stride)
+cmsUInt8Number* my_Pack565(_cmsTRANSFORM* info, 
+                           cmsUInt16Number wOut[],
+                           cmsUInt8Number* output,
+                           cmsUInt32Number Stride)
 {
 
-    register cmsUInt16Number pixel;
+    cmsUInt16Number pixel;
     int r, g, b;
 
     r = (int) floor(( wOut[2] * 31) / 65535.0 + 0.5);
@@ -1113,9 +1113,9 @@
 // --------------------------------------------------------------------------------------------------
 
 static
-void FastEvaluateCurves(register const cmsUInt16Number In[],
-                                     register cmsUInt16Number Out[],
-                                     register const void* Data)
+void FastEvaluateCurves(const cmsUInt16Number In[],
+                                     cmsUInt16Number Out[],
+                                     const void* Data)
 {
     Out[0] = In[0];
 }
diff -Nur lcms2-2.9_orig/utils/jpgicc/jpgicc.c lcms2-2.9/utils/jpgicc/jpgicc.c
--- lcms2-2.9_orig/utils/jpgicc/jpgicc.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/utils/jpgicc/jpgicc.c	2018-07-11 16:07:04.000000000 +0700
@@ -176,7 +176,7 @@
 #define GRID_POINTS 33
 
 static
-int PCS2ITU(register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void*  Cargo)
+int PCS2ITU(const cmsUInt16Number In[], cmsUInt16Number Out[], void*  Cargo)
 {
     cmsCIELab Lab;
 
@@ -190,7 +190,7 @@
 
 
 static
-int ITU2PCS( register const cmsUInt16Number In[], register cmsUInt16Number Out[], register void*  Cargo)
+int ITU2PCS( const cmsUInt16Number In[], cmsUInt16Number Out[], void*  Cargo)
 {
     cmsCIELab Lab;
 
diff -Nur lcms2-2.9_orig/utils/samples/itufax.c lcms2-2.9/utils/samples/itufax.c
--- lcms2-2.9_orig/utils/samples/itufax.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/utils/samples/itufax.c	2018-07-11 16:07:57.000000000 +0700
@@ -65,7 +65,7 @@
 #define GRID_POINTS 33
 
 static
-int InputDirection(register WORD In[], register WORD Out[], register LPVOID Cargo)
+int InputDirection(WORD In[], WORD Out[], LPVOID Cargo)
 {	   
     cmsCIELab Lab;
 
@@ -78,7 +78,7 @@
 
 
 static
-int OutputDirection(register WORD In[], register WORD Out[], register LPVOID Cargo)
+int OutputDirection(WORD In[], WORD Out[], LPVOID Cargo)
 {	
 
 	cmsCIELab Lab;
diff -Nur lcms2-2.9_orig/utils/samples/mkcmy.c lcms2-2.9/utils/samples/mkcmy.c
--- lcms2-2.9_orig/utils/samples/mkcmy.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/utils/samples/mkcmy.c	2018-07-11 16:08:06.000000000 +0700
@@ -44,7 +44,7 @@
 // Our space will be CIE primaries plus a gamma of 4.5
 
 static
-int Forward(register WORD In[], register WORD Out[], register LPVOID Cargo)
+int Forward(WORD In[], WORD Out[], LPVOID Cargo)
 {	
 	LPCARGO C = (LPCARGO) Cargo;	
 	WORD RGB[3];
@@ -68,7 +68,7 @@
 
 
 static
-int Reverse(register WORD In[], register WORD Out[], register LPVOID Cargo)
+int Reverse(WORD In[], WORD Out[], LPVOID Cargo)
 {	
 
 	LPCARGO C = (LPCARGO) Cargo;	
diff -Nur lcms2-2.9_orig/utils/samples/mkgrayer.c lcms2-2.9/utils/samples/mkgrayer.c
--- lcms2-2.9_orig/utils/samples/mkgrayer.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/utils/samples/mkgrayer.c	2018-07-11 16:08:12.000000000 +0700
@@ -26,7 +26,7 @@
 
 
 static
-int Forward(register WORD In[], register WORD Out[], register LPVOID Cargo)
+int Forward(WORD In[], WORD Out[], LPVOID Cargo)
 {	
     cmsCIELab Lab;
 
diff -Nur lcms2-2.9_orig/utils/tificc/tificc.c lcms2-2.9/utils/tificc/tificc.c
--- lcms2-2.9_orig/utils/tificc/tificc.c	2018-07-11 07:17:16.000000000 +0700
+++ lcms2-2.9/utils/tificc/tificc.c	2018-07-11 16:07:34.000000000 +0700
@@ -135,9 +135,9 @@
 // Formatter for 8bit Lab TIFF (photometric 8)
 static
 unsigned char* UnrollTIFFLab8(struct _cmstransform_struct* CMMcargo,
-                              register cmsUInt16Number wIn[], 
-                              register cmsUInt8Number* accum, 
-                              register cmsUInt32Number Stride)
+                              cmsUInt16Number wIn[], 
+                              cmsUInt8Number* accum, 
+                              cmsUInt32Number Stride)
 {
     wIn[0] = (cmsUInt16Number) FromLabV2ToLabV4((accum[0]) << 8);
     wIn[1] = (cmsUInt16Number) FromLabV2ToLabV4(((accum[1] > 127) ? (accum[1] - 128) : (accum[1] + 128)) << 8);
@@ -152,9 +152,9 @@
 // Formatter for 16bit Lab TIFF (photometric 8)
 static
 unsigned char* UnrollTIFFLab16(struct _cmstransform_struct* CMMcargo,
-                              register cmsUInt16Number wIn[],
-                              register cmsUInt8Number* accum,
-                              register cmsUInt32Number Stride )
+                              cmsUInt16Number wIn[],
+                              cmsUInt8Number* accum,
+                              cmsUInt32Number Stride )
 {
     cmsUInt16Number* accum16 = (cmsUInt16Number*) accum;
 
@@ -171,9 +171,9 @@
 
 static
 unsigned char* PackTIFFLab8(struct _cmstransform_struct* CMMcargo, 
-                            register cmsUInt16Number wOut[], 
-                            register cmsUInt8Number* output, 
-                            register cmsUInt32Number Stride)
+                            cmsUInt16Number wOut[], 
+                            cmsUInt8Number* output, 
+                            cmsUInt32Number Stride)
 {
     int a, b;
 
@@ -193,9 +193,9 @@
 
 static
 unsigned char* PackTIFFLab16(struct _cmstransform_struct* CMMcargo, 
-                            register cmsUInt16Number wOut[], 
-                            register cmsUInt8Number* output, 
-                            register cmsUInt32Number Stride)
+                            cmsUInt16Number wOut[], 
+                            cmsUInt8Number* output, 
+                            cmsUInt32Number Stride)
 {
     int a, b;
     cmsUInt16Number* output16 = (cmsUInt16Number*) output;
