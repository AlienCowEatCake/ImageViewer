From 592577366e7b0b37dfebf075e02b97de4c396866 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Sat, 23 Nov 2024 20:17:00 +0700
Subject: [PATCH 3/3] Remove C++20

---
 libheif/api/libheif/heif_properties.cc        |  2 +-
 libheif/bitstream.cc                          | 19 -------
 .../codecs/uncompressed/decoder_abstract.cc   | 13 ++---
 libheif/security_limits.cc                    | 52 +++++++++++++------
 4 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/libheif/api/libheif/heif_properties.cc b/libheif/api/libheif/heif_properties.cc
index 94851392..82a27eb2 100644
--- a/libheif/api/libheif/heif_properties.cc
+++ b/libheif/api/libheif/heif_properties.cc
@@ -335,7 +335,7 @@ struct heif_error heif_item_add_raw_property(const struct heif_context* context,
 
 
 template<typename T>
-struct heif_error find_property(const struct heif_context* context,
+/*struct*/ heif_error find_property(const struct heif_context* context,
                                 heif_item_id itemId,
                                 heif_property_id propertyId,
                                 std::shared_ptr<T>* box_casted)
diff --git a/libheif/bitstream.cc b/libheif/bitstream.cc
index 651e839c..1adb46ac 100644
--- a/libheif/bitstream.cc
+++ b/libheif/bitstream.cc
@@ -24,12 +24,6 @@
 #include <cstring>
 #include <cassert>
 
-#if ((defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER) && !defined(__PGI)) && __GNUC__ < 9) || (defined(__clang__) && __clang_major__ < 10)
-#include <type_traits>
-#else
-#include <bit>
-#endif
-
 #define MAX_UVLC_LEADING_ZEROS 20
 
 
@@ -351,12 +345,6 @@ int64_t BitstreamRange::read64s()
 
 float BitstreamRange::read_float32()
 {
-#if __cpp_lib_bit_cast >= 201806L
-  uint32_t i = read32();
-  return std::bit_cast<float>(i); // this works directly on the value layout, thus we do not have to worry about memory layout
-#else
-  // compiler too old to support bit_cast
-
   // TODO: I am not sure this works everywhere as there seem to be systems where
   //       the float byte order is different from the integer endianness
   //       https://en.wikipedia.org/wiki/Endianness#Floating_point
@@ -364,24 +352,17 @@ float BitstreamRange::read_float32()
   float f;
   memcpy(&f, &i, sizeof(float));
   return f;
-#endif
 }
 
 
 void StreamWriter::write_float32(float v)
 {
-#if __cpp_lib_bit_cast >= 201806L
-  write32(std::bit_cast<uint32_t>(v)); // this works directly on the value layout, thus we do not have to worry about memory layout
-#else
-  // compiler too old to support bit_cast
-
   // TODO: I am not sure this works everywhere as there seem to be systems where
   //       the float byte order is different from the integer endianness
   //       https://en.wikipedia.org/wiki/Endianness#Floating_point
   uint32_t i;
   memcpy(&i, &v, sizeof(float));
   write32(i);
-#endif
 }
 
 
diff --git a/libheif/codecs/uncompressed/decoder_abstract.cc b/libheif/codecs/uncompressed/decoder_abstract.cc
index 83c6ce37..c8c6fff4 100644
--- a/libheif/codecs/uncompressed/decoder_abstract.cc
+++ b/libheif/codecs/uncompressed/decoder_abstract.cc
@@ -24,11 +24,7 @@
 #include <cassert>
 #include <utility>
 
-#if ((defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER) && !defined(__PGI)) && __GNUC__ < 9) || (defined(__clang__) && __clang_major__ < 10)
-#include <type_traits>
-#else
-#include <bit>
-#endif
+#include <QtGlobal>
 
 #include "common_utils.h"
 #include "context.h"
@@ -72,15 +68,16 @@ void AbstractDecoder::memcpy_to_native_endian(uint8_t* dst, uint32_t value, uint
     *dst = static_cast<uint8_t>(value);
     return;
   }
-  else if (std::endian::native == std::endian::big) {
+  else {
+#if defined(Q_BYTE_ORDER) && (Q_BYTE_ORDER == Q_BIG_ENDIAN)
     for (uint32_t i = 0; i < bytes_per_sample; i++) {
       dst[bytes_per_sample - 1 - i] = static_cast<uint8_t>((value >> (i * 8)) & 0xFF);
     }
-  }
-  else {
+#else
     for (uint32_t i = 0; i < bytes_per_sample; i++) {
       dst[i] = static_cast<uint8_t>((value >> (i * 8)) & 0xFF);
     }
+#endif
   }
 }
 
diff --git a/libheif/security_limits.cc b/libheif/security_limits.cc
index 9a6b3844..f515f76b 100644
--- a/libheif/security_limits.cc
+++ b/libheif/security_limits.cc
@@ -25,36 +25,58 @@
 
 
 struct heif_security_limits global_security_limits{
-    .version = 2,
+    /*.version =*/ 2,
 
     // --- version 1
 
     // Artificial limit to avoid allocating too much memory.
     // 32768^2 = 1.5 GB as YUV-4:2:0 or 4 GB as RGB32
-    .max_image_size_pixels = 32768 * 32768,
-    .max_number_of_tiles = 4096 * 4096,
-    .max_bayer_pattern_pixels = 16 * 16,
-    .max_items = 1000,
+    /*.max_image_size_pixels =*/ 32768 * 32768,
+    /*.max_number_of_tiles =*/ 4096 * 4096,
+    /*.max_bayer_pattern_pixels =*/ 16 * 16,
+    /*.max_items =*/ 1000,
 
-    .max_color_profile_size = 100 * 1024 * 1024, // 100 MB
-    .max_memory_block_size = UINT64_C(4) * 1024 * 1024 * 1024,  // 4 GB
+    /*.max_color_profile_size =*/ 100 * 1024 * 1024, // 100 MB
+    /*.max_memory_block_size =*/ UINT64_C(4) * 1024 * 1024 * 1024,  // 4 GB
 
-    .max_components = 256,
-    .max_iloc_extents_per_item = 32,
-    .max_size_entity_group = 64,
+    /*.max_components =*/ 256,
+    /*.max_iloc_extents_per_item =*/ 32,
+    /*.max_size_entity_group =*/ 64,
 
-    .max_children_per_box = 100,
+    /*.max_children_per_box =*/ 100,
 
     // --- version 2
 
-    .max_total_memory = UINT64_C(4) * 1024 * 1024 * 1024,  // 4 GB
-    .max_sample_description_box_entries = 1024,
-    .max_sample_group_description_box_entries = 1024
+    /*.max_total_memory =*/ UINT64_C(4) * 1024 * 1024 * 1024,  // 4 GB
+    /*.max_sample_description_box_entries =*/ 1024,
+    /*.max_sample_group_description_box_entries =*/ 1024
 };
 
 
 struct heif_security_limits disabled_security_limits{
-    .version = 2
+    /*.version =*/ 2,
+
+    // --- version 1
+
+    /*.max_image_size_pixels =*/ 0,
+    /*.max_number_of_tiles =*/ 0,
+    /*.max_bayer_pattern_pixels =*/ 0,
+    /*.max_items =*/ 0,
+
+    /*.max_color_profile_size =*/ 0,
+    /*.max_memory_block_size =*/ 0,
+
+    /*.max_components =*/ 0,
+    /*.max_iloc_extents_per_item =*/ 0,
+    /*.max_size_entity_group =*/ 0,
+
+    /*.max_children_per_box =*/ 0,
+
+    // --- version 2
+
+    /*.max_total_memory =*/ 0,
+    /*.max_sample_description_box_entries =*/ 0,
+    /*.max_sample_group_description_box_entries =*/ 0
 };
 
 
-- 
2.39.5

