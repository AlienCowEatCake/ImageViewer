From 5fdc828b0e6939fd615a30631cee0bab47c16b4b Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Mon, 22 Jul 2019 04:35:53 +0700
Subject: [PATCH 4/9] Use Qt RWLock

---
 include/exiv2/rwlock.hpp | 78 +++++-----------------------------------
 1 file changed, 8 insertions(+), 70 deletions(-)

diff --git a/include/exiv2/rwlock.hpp b/include/exiv2/rwlock.hpp
index 1ebbdb90..43d8061a 100644
--- a/include/exiv2/rwlock.hpp
+++ b/include/exiv2/rwlock.hpp
@@ -21,114 +21,53 @@
 #ifndef RW_LOCK_HPP
 #define RW_LOCK_HPP
 
-#ifdef _MSC_VER
-#include <windows.h>
-#else
-#include <pthread.h>
-#endif
+#include <QReadWriteLock>
 
 namespace Exiv2 {
-#ifdef _MSC_VER
         /*!
          @brief Class to provide a Read-Write Lock
         */
         class RWLock
         {
-        public:
-            RWLock()
-            {
-                InitializeCriticalSection(&lock_);
-            }
-
-            ~RWLock()
-            {
-                DeleteCriticalSection(&lock_);
-            }
-
-            void wrlock() { enter(); }
-
-            bool trywrlock() { return tryenter(); }
-
-            void rdlock() { enter(); }
-
-            bool tryrdlock() { return tryenter(); }
-
-            void rdunlock() { leave(); }
-
-            void wrunlock() { leave(); }
-
-        private:
-            void enter()
-            {
-                EnterCriticalSection(&lock_);
-            }
-
-            void leave()
-            {
-                LeaveCriticalSection(&lock_);
-            }
-
-            bool tryenter()
-            {
-#if defined(MSDEV_2003) || defined(MSDEV_2005)
-                EnterCriticalSection(&lock_);
-                return true;
-#else
-                return 0 != TryEnterCriticalSection(&lock_);
-#endif
-            }
-
-        private:
-            CRITICAL_SECTION lock_;
-        };
-#else
-        /*!
-         @brief Class to provide a Read-Write Lock
-        */
-        // UNIX systems (including MinGW and Cygwin)
-        class RWLock
-        {
         public:
             //! constructor (acquires the lock)
-            explicit RWLock(const pthread_rwlockattr_t *attr = 0)
+            explicit RWLock()
             {
-                pthread_rwlock_init(&rwlock_, attr);
             }
 
             //! constructor (releases lock)
             ~RWLock()
             {
-                pthread_rwlock_destroy(&rwlock_);
             }
 
             //! acquire rw lock
             void wrlock()
             {
-                pthread_rwlock_wrlock(&rwlock_);
+                rwlock_.lockForWrite();
             }
 
             //! test to see if the rw lock can be acquired
             bool trywrlock()
             {
-                return 0 == pthread_rwlock_trywrlock(&rwlock_);
+                return rwlock_.tryLockForWrite();
             }
 
             //! acquire rd lock
             void rdlock()
             {
-                pthread_rwlock_rdlock(&rwlock_);
+                rwlock_.lockForRead();
             }
 
             //! test to see if the rd lock can be acquired
             bool tryrdlock()
             {
-                return 0 == pthread_rwlock_tryrdlock(&rwlock_);
+                return rwlock_.tryLockForRead();
             }
 
             //! release rw lock
             void unlock()
             {
-                pthread_rwlock_unlock(&rwlock_);
+                rwlock_.unlock();
             }
 
             //! unlock rd lock
@@ -139,9 +78,8 @@ namespace Exiv2 {
 
         private:
             //! the lock itself
-            pthread_rwlock_t rwlock_;
+            QReadWriteLock rwlock_;
         };
-#endif
 
         /*!
          @brief Class to provide a ScopedReadLock.
-- 
2.20.1

