From 7ed3d7685a1572cb1cef1ba93e810a0b50dd519c Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Wed, 12 Jun 2024 05:59:35 +0700
Subject: [PATCH 1/2] Use Qt convertStringCharset

---
 src/convert.cpp | 88 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 88 insertions(+)

diff --git a/src/convert.cpp b/src/convert.cpp
index ed097eed1..7eae38869 100644
--- a/src/convert.cpp
+++ b/src/convert.cpp
@@ -27,6 +27,16 @@
 #include <cerrno>
 #elif defined _WIN32
 #include <windows.h>
+#elif defined QT_CORE_LIB
+# include <QByteArray>
+# include <QString>
+# if (QT_VERSION < QT_VERSION_CHECK(6, 0, 0))
+#  include <QTextCodec>
+# else
+#  include <QSharedPointer>
+#  include <QStringConverter>
+# endif
+# include <QMap>
 #endif
 
 // Adobe XMP Toolkit
@@ -49,6 +59,9 @@ bool convertStringCharsetIconv(std::string& str, const char* from, const char* t
 #elif defined _WIN32
 // Convert string charset with Windows functions.
 bool convertStringCharsetWindows(std::string& str, const char* from, const char* to);
+#elif defined QT_CORE_LIB
+// Convert string charset with QTextCodec/QStringConverter.
+bool convertStringCharsetQt(std::string& str, const char* from, const char* to);
 #endif
 /*!
   @brief Get the text value of an XmpDatum \em pos.
@@ -1393,6 +1406,8 @@ bool convertStringCharset([[maybe_unused]] std::string& str, const char* from, c
   return convertStringCharsetIconv(str, from, to);
 #elif defined _WIN32
   return convertStringCharsetWindows(str, from, to);
+#elif defined QT_CORE_LIB
+  return convertStringCharsetQt(str, from, to);
 #else
 #ifndef SUPPRESS_WARNINGS
   EXV_WARNING << "Charset conversion required but no character mapping functionality available.\n";
@@ -1598,6 +1613,79 @@ const ConvFctList convFctList[] = {
   return ret;
 }
 
+#elif defined QT_CORE_LIB
+#if(QT_VERSION < QT_VERSION_CHECK(6, 0, 0))
+  static QTextCodec* codecForCharset(const char* charset) {
+    if (QTextCodec* codec = QTextCodec::codecForName(charset))
+      return codec;
+
+    QMap<QByteArray, QByteArray> codecsMap;
+    codecsMap["UTF-8"]      = "UTF-8";
+    codecsMap["UCS-2BE"]    = "UTF-16BE";
+    codecsMap["UCS-2LE"]    = "UTF-16LE";
+    codecsMap["ISO-8859-1"] = "ISO-8859-1";
+    codecsMap["ASCII"]      = "ISO-8859-1";
+
+    QMap<QByteArray, QByteArray>::ConstIterator it = codecsMap.find(charset);
+    if (it != codecsMap.constEnd())
+      return QTextCodec::codecForName(it.value());
+
+    return NULL;
+  }
+
+  [[maybe_unused]] bool convertStringCharsetQt(std::string& str, const char* from, const char* to) {
+    if (strcmp(from, to) == 0)
+      return true;
+
+    QTextCodec* inCodec = codecForCharset(from);
+    QTextCodec* outCodec = codecForCharset(to);
+    if (!inCodec || !outCodec)
+      return false;
+
+    const QByteArray inArray = QByteArray(str.c_str(), static_cast<int>(str.length()));
+    const QByteArray outArray = outCodec->fromUnicode(inCodec->toUnicode(inArray));
+    str = std::string(outArray.constData(), static_cast<size_t>(outArray.size()));
+    return true;
+  }
+#else
+  template<typename T>
+  static QSharedPointer<T> converterForCharset(const char* charset) {
+    QSharedPointer<T> result(new T(charset));
+    if (result->isValid())
+      return result;
+
+    QMap<QByteArray, QByteArray> codecsMap;
+    codecsMap["UTF-8"]      = "UTF-8";
+    codecsMap["UCS-2BE"]    = "UTF-16BE";
+    codecsMap["UCS-2LE"]    = "UTF-16LE";
+    codecsMap["ISO-8859-1"] = "ISO-8859-1";
+    codecsMap["ASCII"]      = "ISO-8859-1";
+
+    QMap<QByteArray, QByteArray>::ConstIterator it = codecsMap.find(charset);
+    if (it != codecsMap.constEnd())
+      result.reset(new T(it.value()));
+    else
+      result.reset();
+
+    return result;
+  }
+
+  [[maybe_unused]] bool convertStringCharsetQt(std::string& str, const char* from, const char* to) {
+    if (strcmp(from, to) == 0)
+      return true;
+
+    QSharedPointer<QStringDecoder> decoder = converterForCharset<QStringDecoder>(from);
+    QSharedPointer<QStringEncoder> encoder = converterForCharset<QStringEncoder>(to);
+    if (!decoder || !encoder)
+      return false;
+
+    const QByteArray inArray = QByteArray(str.c_str(), static_cast<int>(str.length()));
+    const QByteArray outArray = encoder->encode(decoder->decode(inArray));
+    str = std::string(outArray.constData(), static_cast<size_t>(outArray.size()));
+    return true;
+  }
+#endif
+
 #endif  // EXV_HAVE_ICONV
 bool getTextValue(std::string& value, const XmpData::iterator& pos) {
   if (pos->typeId() == langAlt) {
-- 
2.39.2

